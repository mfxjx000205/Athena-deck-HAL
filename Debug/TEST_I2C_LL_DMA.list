
TEST_I2C_LL_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f4  080059f4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059fc  080059fc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059fc  080059fc  000159fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  2000006c  08005a70  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012a0  08005a70  000212a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001839f  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bfd  00000000  00000000  0003847e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  0003c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fe  00000000  00000000  0003d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026521  00000000  00000000  0003e7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a622  00000000  00000000  00064ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfcd5  00000000  00000000  0007f2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006254  00000000  00000000  0015efc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0016521c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005960 	.word	0x08005960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005960 	.word	0x08005960

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <__NVIC_GetPriorityGrouping+0x18>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	f003 0307 	and.w	r3, r3, #7
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <__NVIC_EnableIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	; (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000578:	b480      	push	{r7}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	f1c3 0307 	rsb	r3, r3, #7
 8000592:	2b04      	cmp	r3, #4
 8000594:	bf28      	it	cs
 8000596:	2304      	movcs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3304      	adds	r3, #4
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d902      	bls.n	80005a8 <NVIC_EncodePriority+0x30>
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3b03      	subs	r3, #3
 80005a6:	e000      	b.n	80005aa <NVIC_EncodePriority+0x32>
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43da      	mvns	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	401a      	ands	r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43d9      	mvns	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	4313      	orrs	r3, r2
         );
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3724      	adds	r7, #36	; 0x24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005ec:	4907      	ldr	r1, [pc, #28]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff ffe3 	bl	80005e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800061a:	f7ff ff57 	bl	80004cc <__NVIC_GetPriorityGrouping>
 800061e:	4603      	mov	r3, r0
 8000620:	2200      	movs	r2, #0
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ffa7 	bl	8000578 <NVIC_EncodePriority>
 800062a:	4603      	mov	r3, r0
 800062c:	4619      	mov	r1, r3
 800062e:	2010      	movs	r0, #16
 8000630:	f7ff ff78 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000634:	2010      	movs	r0, #16
 8000636:	f7ff ff57 	bl	80004e8 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800063a:	f7ff ff47 	bl	80004cc <__NVIC_GetPriorityGrouping>
 800063e:	4603      	mov	r3, r0
 8000640:	2200      	movs	r2, #0
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff97 	bl	8000578 <NVIC_EncodePriority>
 800064a:	4603      	mov	r3, r0
 800064c:	4619      	mov	r1, r3
 800064e:	2011      	movs	r0, #17
 8000650:	f7ff ff68 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000654:	2011      	movs	r0, #17
 8000656:	f7ff ff47 	bl	80004e8 <__NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}

0800065e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800065e:	b480      	push	{r7}
 8000660:	b085      	sub	sp, #20
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	4013      	ands	r3, r2
 8000674:	041a      	lsls	r2, r3, #16
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	43d9      	mvns	r1, r3
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	400b      	ands	r3, r1
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	619a      	str	r2, [r3, #24]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetIdleTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetIdleTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	200000e0 	.word	0x200000e0

080006c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_FREERTOS_Init+0x30>)
 80006cc:	1d3c      	adds	r4, r7, #4
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 f9aa 	bl	8003a3a <osThreadCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <MX_FREERTOS_Init+0x34>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	08005984 	.word	0x08005984
 80006f8:	20000088 	.word	0x20000088

080006fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af02      	add	r7, sp, #8
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	//char buf[100];
	uint8_t rx_buffer[RX_BUFFER_SIZE];
    uint8_t addr= 0;
 8000704:	2300      	movs	r3, #0
 8000706:	75bb      	strb	r3, [r7, #22]
    for(uint8_t i=5; i>0; i--)
 8000708:	2305      	movs	r3, #5
 800070a:	75fb      	strb	r3, [r7, #23]
 800070c:	e00a      	b.n	8000724 <StartDefaultTask+0x28>
    {
      LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800070e:	2108      	movs	r1, #8
 8000710:	481b      	ldr	r0, [pc, #108]	; (8000780 <StartDefaultTask+0x84>)
 8000712:	f7ff ffa4 	bl	800065e <LL_GPIO_TogglePin>
	  osDelay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071a:	f003 f9da 	bl	8003ad2 <osDelay>
    for(uint8_t i=5; i>0; i--)
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	3b01      	subs	r3, #1
 8000722:	75fb      	strb	r3, [r7, #23]
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f1      	bne.n	800070e <StartDefaultTask+0x12>
    }
    //printf("\r\nHello");
    uint8_t *result = i2cdevReadRegSeq_DMA(I2C1, 0x76, 0xD0, rx_buffer, RX_BUFFER_SIZE, NULL);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	9201      	str	r2, [sp, #4]
 8000732:	2201      	movs	r2, #1
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	22d0      	movs	r2, #208	; 0xd0
 8000738:	2176      	movs	r1, #118	; 0x76
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <StartDefaultTask+0x88>)
 800073c:	f000 fcf4 	bl	8001128 <i2cdevReadRegSeq_DMA>
 8000740:	6138      	str	r0, [r7, #16]
    //addr=i2cdevReadReg8(I2C1, 0x76, 0xD0);
    //printf("\r\n BMP280 ADDR=%d",addr);
    //i2cdevReadReg_Mul(I2C1, 0x76, 0xD0, 1, rx_buffer);
    //printf("\r\n %d%d%d%d%d",rx_buffer[0],rx_buffer[1],rx_buffer[2],rx_buffer[3],rx_buffer[4]);
    if(addr == 0x58){
 8000742:	7dbb      	ldrb	r3, [r7, #22]
 8000744:	2b58      	cmp	r3, #88	; 0x58
 8000746:	d107      	bne.n	8000758 <StartDefaultTask+0x5c>
    	while(1){

    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000748:	2108      	movs	r1, #8
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <StartDefaultTask+0x84>)
 800074c:	f7ff ff87 	bl	800065e <LL_GPIO_TogglePin>
    		osDelay(80);
 8000750:	2050      	movs	r0, #80	; 0x50
 8000752:	f003 f9be 	bl	8003ad2 <osDelay>
    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000756:	e7f7      	b.n	8000748 <StartDefaultTask+0x4c>
    	}
    }
    else if (addr ==0x00){
 8000758:	7dbb      	ldrb	r3, [r7, #22]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d108      	bne.n	8000770 <StartDefaultTask+0x74>
    	while(1){

    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800075e:	2108      	movs	r1, #8
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <StartDefaultTask+0x84>)
 8000762:	f7ff ff7c 	bl	800065e <LL_GPIO_TogglePin>
    		osDelay(1000);
 8000766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076a:	f003 f9b2 	bl	8003ad2 <osDelay>
    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800076e:	e7f6      	b.n	800075e <StartDefaultTask+0x62>
    	}
    }
    else{
    	while(1){

    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000770:	2108      	movs	r1, #8
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <StartDefaultTask+0x84>)
 8000774:	f7ff ff73 	bl	800065e <LL_GPIO_TogglePin>
    	    osDelay(2);
 8000778:	2002      	movs	r0, #2
 800077a:	f003 f9aa 	bl	8003ad2 <osDelay>
    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800077e:	e7f7      	b.n	8000770 <StartDefaultTask+0x74>
 8000780:	48000400 	.word	0x48000400
 8000784:	40005400 	.word	0x40005400

08000788 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000794:	4907      	ldr	r1, [pc, #28]	; (80007b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800079e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4013      	ands	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_GPIO_ResetOutputPin>:
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80007ea:	2004      	movs	r0, #4
 80007ec:	f7ff ffcc 	bl	8000788 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ffc9 	bl	8000788 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f7ff ffc6 	bl	8000788 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 80007fc:	2108      	movs	r1, #8
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <MX_GPIO_Init+0x58>)
 8000800:	f7ff ffda 	bl	80007b8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8000804:	2308      	movs	r3, #8
 8000806:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000808:	2301      	movs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <MX_GPIO_Init+0x58>)
 800081e:	f002 ff8f 	bl	8003740 <LL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	48000400 	.word	0x48000400

08000830 <__NVIC_GetPriorityGrouping>:
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <__NVIC_GetPriorityGrouping+0x18>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	f003 0307 	and.w	r3, r3, #7
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_EnableIRQ>:
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	db0b      	blt.n	8000876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f003 021f 	and.w	r2, r3, #31
 8000864:	4907      	ldr	r1, [pc, #28]	; (8000884 <__NVIC_EnableIRQ+0x38>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	095b      	lsrs	r3, r3, #5
 800086c:	2001      	movs	r0, #1
 800086e:	fa00 f202 	lsl.w	r2, r0, r2
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000e100 	.word	0xe000e100

08000888 <__NVIC_SetPriority>:
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db0a      	blt.n	80008b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	490c      	ldr	r1, [pc, #48]	; (80008d4 <__NVIC_SetPriority+0x4c>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	440b      	add	r3, r1
 80008ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008b0:	e00a      	b.n	80008c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4908      	ldr	r1, [pc, #32]	; (80008d8 <__NVIC_SetPriority+0x50>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	3b04      	subs	r3, #4
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	440b      	add	r3, r1
 80008c6:	761a      	strb	r2, [r3, #24]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_EncodePriority>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f1c3 0307 	rsb	r3, r3, #7
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	bf28      	it	cs
 80008fa:	2304      	movcs	r3, #4
 80008fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3304      	adds	r3, #4
 8000902:	2b06      	cmp	r3, #6
 8000904:	d902      	bls.n	800090c <NVIC_EncodePriority+0x30>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3b03      	subs	r3, #3
 800090a:	e000      	b.n	800090e <NVIC_EncodePriority+0x32>
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 32ff 	mov.w	r2, #4294967295
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43da      	mvns	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	401a      	ands	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000924:	f04f 31ff 	mov.w	r1, #4294967295
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43d9      	mvns	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	4313      	orrs	r3, r2
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	; 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4413      	add	r3, r2
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000968:	f023 0310 	bic.w	r3, r3, #16
 800096c:	4908      	ldr	r1, [pc, #32]	; (8000990 <LL_DMA_SetDataTransferDirection+0x4c>)
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	440a      	add	r2, r1
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	4611      	mov	r1, r2
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	440a      	add	r2, r1
 800097a:	4611      	mov	r1, r2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4313      	orrs	r3, r2
 8000980:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000982:	bf00      	nop
 8000984:	371c      	adds	r7, #28
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	080059ac 	.word	0x080059ac

08000994 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000994:	b480      	push	{r7}
 8000996:	b087      	sub	sp, #28
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LL_DMA_SetMode+0x48>)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f023 0220 	bic.w	r2, r3, #32
 80009b8:	4908      	ldr	r1, [pc, #32]	; (80009dc <LL_DMA_SetMode+0x48>)
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	440b      	add	r3, r1
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	440b      	add	r3, r1
 80009c6:	4619      	mov	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80009ce:	bf00      	nop
 80009d0:	371c      	adds	r7, #28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	080059ac 	.word	0x080059ac

080009e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LL_DMA_SetPeriphIncMode+0x48>)
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	4413      	add	r3, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	4413      	add	r3, r2
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a04:	4908      	ldr	r1, [pc, #32]	; (8000a28 <LL_DMA_SetPeriphIncMode+0x48>)
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	440b      	add	r3, r1
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	440b      	add	r3, r1
 8000a12:	4619      	mov	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000a1a:	bf00      	nop
 8000a1c:	371c      	adds	r7, #28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	080059ac 	.word	0x080059ac

08000a2c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LL_DMA_SetMemoryIncMode+0x48>)
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	4413      	add	r3, r2
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a50:	4908      	ldr	r1, [pc, #32]	; (8000a74 <LL_DMA_SetMemoryIncMode+0x48>)
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	440b      	add	r3, r1
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000a66:	bf00      	nop
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	080059ac 	.word	0x080059ac

08000a78 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LL_DMA_SetPeriphSize+0x48>)
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000a9c:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <LL_DMA_SetPeriphSize+0x48>)
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	440b      	add	r3, r1
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	440b      	add	r3, r1
 8000aaa:	4619      	mov	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000ab2:	bf00      	nop
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	080059ac 	.word	0x080059ac

08000ac4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LL_DMA_SetMemorySize+0x48>)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000ae8:	4908      	ldr	r1, [pc, #32]	; (8000b0c <LL_DMA_SetMemorySize+0x48>)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	440b      	add	r3, r1
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	440b      	add	r3, r1
 8000af6:	4619      	mov	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	080059ac 	.word	0x080059ac

08000b10 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	4413      	add	r3, r2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000b34:	4908      	ldr	r1, [pc, #32]	; (8000b58 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	440b      	add	r3, r1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	440b      	add	r3, r1
 8000b42:	4619      	mov	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000b4a:	bf00      	nop
 8000b4c:	371c      	adds	r7, #28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	080059ac 	.word	0x080059ac

08000b5c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	33a8      	adds	r3, #168	; 0xa8
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	210f      	movs	r1, #15
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	210f      	movs	r1, #15
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa93 f3a3 	rbit	r3, r3
 8000b8e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	e003      	b.n	8000ba6 <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fab3 f383 	clz	r3, r3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	408b      	lsls	r3, r1
 8000bac:	68f9      	ldr	r1, [r7, #12]
 8000bae:	31a8      	adds	r1, #168	; 0xa8
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8000bb4:	bf00      	nop
 8000bb6:	3724      	adds	r7, #36	; 0x24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_I2C_EnableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_EnableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c14:	f023 0306 	bic.w	r3, r3, #6
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	60da      	str	r2, [r3, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60da      	str	r2, [r3, #12]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	605a      	str	r2, [r3, #4]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	0e1a      	lsrs	r2, r3, #24
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <LL_RCC_SetI2CClockSource+0x4c>)
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	0c1b      	lsrs	r3, r3, #16
 8000c8a:	f003 031f 	and.w	r3, r3, #31
 8000c8e:	2103      	movs	r1, #3
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	401a      	ands	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	b2d9      	uxtb	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	0c1b      	lsrs	r3, r3, #16
 8000ca0:	f003 031f 	and.w	r3, r3, #31
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40021088 	.word	0x40021088

08000cc0 <LL_AHB2_GRP1_EnableClock>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000

08000cf0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40021000 	.word	0x40021000

08000d20 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000d4a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8000d4e:	f7ff ff8f 	bl	8000c70 <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff ffb4 	bl	8000cc0 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000d58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000d66:	2301      	movs	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f002 fce1 	bl	8003740 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000d7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d82:	f7ff ffb5 	bl	8000cf0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_3);
 8000d86:	2203      	movs	r2, #3
 8000d88:	2105      	movs	r1, #5
 8000d8a:	484c      	ldr	r0, [pc, #304]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000d8c:	f7ff fee6 	bl	8000b5c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000d90:	2210      	movs	r2, #16
 8000d92:	2105      	movs	r1, #5
 8000d94:	4849      	ldr	r0, [pc, #292]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000d96:	f7ff fdd5 	bl	8000944 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_HIGH);
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	2105      	movs	r1, #5
 8000da0:	4846      	ldr	r0, [pc, #280]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000da2:	f7ff feb5 	bl	8000b10 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8000da6:	2220      	movs	r2, #32
 8000da8:	2105      	movs	r1, #5
 8000daa:	4844      	ldr	r0, [pc, #272]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000dac:	f7ff fdf2 	bl	8000994 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2105      	movs	r1, #5
 8000db4:	4841      	ldr	r0, [pc, #260]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000db6:	f7ff fe13 	bl	80009e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	483f      	ldr	r0, [pc, #252]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000dc0:	f7ff fe34 	bl	8000a2c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2105      	movs	r1, #5
 8000dc8:	483c      	ldr	r0, [pc, #240]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000dca:	f7ff fe55 	bl	8000a78 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	483a      	ldr	r0, [pc, #232]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000dd4:	f7ff fe76 	bl	8000ac4 <LL_DMA_SetMemorySize>

  /* I2C1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_3);
 8000dd8:	2203      	movs	r2, #3
 8000dda:	2106      	movs	r1, #6
 8000ddc:	4837      	ldr	r0, [pc, #220]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000dde:	f7ff febd 	bl	8000b5c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2106      	movs	r1, #6
 8000de6:	4835      	ldr	r0, [pc, #212]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000de8:	f7ff fdac 	bl	8000944 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_HIGH);
 8000dec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df0:	2106      	movs	r1, #6
 8000df2:	4832      	ldr	r0, [pc, #200]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000df4:	f7ff fe8c 	bl	8000b10 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2106      	movs	r1, #6
 8000dfc:	482f      	ldr	r0, [pc, #188]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000dfe:	f7ff fdc9 	bl	8000994 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2106      	movs	r1, #6
 8000e06:	482d      	ldr	r0, [pc, #180]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000e08:	f7ff fdea 	bl	80009e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	2106      	movs	r1, #6
 8000e10:	482a      	ldr	r0, [pc, #168]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000e12:	f7ff fe0b 	bl	8000a2c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2106      	movs	r1, #6
 8000e1a:	4828      	ldr	r0, [pc, #160]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000e1c:	f7ff fe2c 	bl	8000a78 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2106      	movs	r1, #6
 8000e24:	4825      	ldr	r0, [pc, #148]	; (8000ebc <MX_I2C1_Init+0x19c>)
 8000e26:	f7ff fe4d 	bl	8000ac4 <LL_DMA_SetMemorySize>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000e2a:	f7ff fd01 	bl	8000830 <__NVIC_GetPriorityGrouping>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2200      	movs	r2, #0
 8000e32:	2105      	movs	r1, #5
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fd51 	bl	80008dc <NVIC_EncodePriority>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201f      	movs	r0, #31
 8000e40:	f7ff fd22 	bl	8000888 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e44:	201f      	movs	r0, #31
 8000e46:	f7ff fd01 	bl	800084c <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000e4a:	f7ff fcf1 	bl	8000830 <__NVIC_GetPriorityGrouping>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2200      	movs	r2, #0
 8000e52:	2105      	movs	r1, #5
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fd41 	bl	80008dc <NVIC_EncodePriority>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	2020      	movs	r0, #32
 8000e60:	f7ff fd12 	bl	8000888 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e64:	2020      	movs	r0, #32
 8000e66:	f7ff fcf1 	bl	800084c <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <MX_I2C1_Init+0x1a0>)
 8000e6c:	f7ff fef0 	bl	8000c50 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_I2C1_Init+0x1a0>)
 8000e72:	f7ff fedd 	bl	8000c30 <LL_I2C_DisableOwnAddress2>
  LL_I2C_EnableGeneralCall(I2C1);
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <MX_I2C1_Init+0x1a0>)
 8000e78:	f7ff feb2 	bl	8000be0 <LL_I2C_EnableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000e7c:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <MX_I2C1_Init+0x1a0>)
 8000e7e:	f7ff fe9f 	bl	8000bc0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00707CBB;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C1_Init+0x1a4>)
 8000e88:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <MX_I2C1_Init+0x1a0>)
 8000ea6:	f002 fd5c 	bl	8003962 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_I2C1_Init+0x1a0>)
 8000eb0:	f7ff fea6 	bl	8000c00 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3738      	adds	r7, #56	; 0x38
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	00707cbb 	.word	0x00707cbb

08000ec8 <LL_I2C_IsActiveFlag_TXE>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <LL_I2C_IsActiveFlag_TXE+0x18>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <LL_I2C_IsActiveFlag_RXNE>:
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d101      	bne.n	8000f06 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_I2C_IsActiveFlag_STOP>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d101      	bne.n	8000f2c <LL_I2C_IsActiveFlag_STOP+0x18>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_I2C_IsActiveFlag_TC>:
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4a:	2b40      	cmp	r3, #64	; 0x40
 8000f4c:	d101      	bne.n	8000f52 <LL_I2C_IsActiveFlag_TC+0x18>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_I2C_IsActiveFlag_TC+0x1a>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_I2C_IsActiveFlag_BUSY>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f74:	d101      	bne.n	8000f7a <LL_I2C_IsActiveFlag_BUSY+0x1a>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <LL_I2C_IsActiveFlag_BUSY+0x1c>
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_I2C_ClearFlag_STOP>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	f043 0220 	orr.w	r2, r3, #32
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	61da      	str	r2, [r3, #28]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_I2C_ClearFlag_TXE>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	619a      	str	r2, [r3, #24]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	0d5b      	lsrs	r3, r3, #21
 8000fda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <LL_I2C_HandleTransfer+0x48>)
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4319      	orrs	r1, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4319      	orrs	r1, r3
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	03ff7bff 	.word	0x03ff7bff

08001010 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <LL_DMA_EnableChannel>:
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800103e:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <LL_DMA_EnableChannel+0x40>)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <LL_DMA_EnableChannel+0x40>)
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	440a      	add	r2, r1
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	4611      	mov	r1, r2
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	440a      	add	r2, r1
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6013      	str	r3, [r2, #0]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	080059b4 	.word	0x080059b4

08001074 <LL_DMA_SetDataLength>:
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LL_DMA_SetDataLength+0x48>)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	0c1b      	lsrs	r3, r3, #16
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	4908      	ldr	r1, [pc, #32]	; (80010bc <LL_DMA_SetDataLength+0x48>)
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	440a      	add	r2, r1
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	4611      	mov	r1, r2
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	440a      	add	r2, r1
 80010a6:	4611      	mov	r1, r2
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
}
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	080059b4 	.word	0x080059b4

080010c0 <LL_DMA_SetMemoryAddress>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <LL_DMA_SetMemoryAddress+0x30>)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4413      	add	r3, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	080059b4 	.word	0x080059b4

080010f4 <LL_DMA_SetPeriphAddress>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <LL_DMA_SetPeriphAddress+0x30>)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	4413      	add	r3, r2
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6093      	str	r3, [r2, #8]
}
 8001118:	bf00      	nop
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	080059b4 	.word	0x080059b4

08001128 <i2cdevReadRegSeq_DMA>:

}


uint8_t *i2cdevReadRegSeq_DMA(I2C_TypeDef *I2Cx, uint8_t SlaveAddr_IC, uint8_t target_reg, uint8_t *rx_buffer, uint16_t size, DMA_Callback callback)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	72fb      	strb	r3, [r7, #11]
 8001136:	4613      	mov	r3, r2
 8001138:	72bb      	strb	r3, [r7, #10]
	//Address process
	SlaveAddr_IC = SlaveAddr_IC<<1;
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	72fb      	strb	r3, [r7, #11]

	//I2C wait for : BUS BUSY
	uint32_t counter = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 8001144:	e00b      	b.n	800115e <i2cdevReadRegSeq_DMA+0x36>
		counter++;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
		if( counter == 25000 ) { //150ms
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001152:	4293      	cmp	r3, r2
 8001154:	d103      	bne.n	800115e <i2cdevReadRegSeq_DMA+0x36>
			Error_Handler();
 8001156:	f000 fad1 	bl	80016fc <Error_Handler>
			return NULL;
 800115a:	2300      	movs	r3, #0
 800115c:	e071      	b.n	8001242 <i2cdevReadRegSeq_DMA+0x11a>
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff fefe 	bl	8000f60 <LL_I2C_IsActiveFlag_BUSY>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d0ed      	beq.n	8001146 <i2cdevReadRegSeq_DMA+0x1e>
		}
	}

	//Write the TARGET REGISTER to the I2C slave
	LL_I2C_HandleTransfer(I2Cx , SlaveAddr_IC , LL_I2C_ADDRSLAVE_7BIT , 1 , LL_I2C_MODE_SOFTEND , LL_I2C_GENERATE_START_WRITE); //LL_I2C_GENERATE_START_READ
 800116a:	7af9      	ldrb	r1, [r7, #11]
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <i2cdevReadRegSeq_DMA+0x124>)
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2300      	movs	r3, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2200      	movs	r2, #0
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff ff23 	bl	8000fc4 <LL_I2C_HandleTransfer>

	//I2C wait for : TX REG BUSY
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 800117e:	bf00      	nop
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff fea1 	bl	8000ec8 <LL_I2C_IsActiveFlag_TXE>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f9      	beq.n	8001180 <i2cdevReadRegSeq_DMA+0x58>

	LL_I2C_TransmitData8(I2Cx, target_reg);
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	4619      	mov	r1, r3
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff ff3d 	bl	8001010 <LL_I2C_TransmitData8>

	//I2C wait for : TX REG BUSY AND CLEAR
	counter = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 800119a:	e00e      	b.n	80011ba <i2cdevReadRegSeq_DMA+0x92>
		counter++;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
		if( counter == 25000){ //150ms
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d106      	bne.n	80011ba <i2cdevReadRegSeq_DMA+0x92>
			LL_I2C_ClearFlag_TXE(I2Cx);
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fefb 	bl	8000fa8 <LL_I2C_ClearFlag_TXE>
			Error_Handler();
 80011b2:	f000 faa3 	bl	80016fc <Error_Handler>
			return NULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e043      	b.n	8001242 <i2cdevReadRegSeq_DMA+0x11a>
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f7ff fe84 	bl	8000ec8 <LL_I2C_IsActiveFlag_TXE>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0ea      	beq.n	800119c <i2cdevReadRegSeq_DMA+0x74>
		}
	}

	//I2C wait for : TX COMPLETE
	while(LL_I2C_IsActiveFlag_TC(I2Cx)==RESET);
 80011c6:	bf00      	nop
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff feb6 	bl	8000f3a <LL_I2C_IsActiveFlag_TC>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f9      	beq.n	80011c8 <i2cdevReadRegSeq_DMA+0xa0>

	LL_I2C_ClearFlag_STOP(I2Cx);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff fed7 	bl	8000f88 <LL_I2C_ClearFlag_STOP>

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, size ,LL_I2C_MODE_AUTOEND ,LL_I2C_GENERATE_START_READ);
 80011da:	7af9      	ldrb	r1, [r7, #11]
 80011dc:	8c3b      	ldrh	r3, [r7, #32]
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <i2cdevReadRegSeq_DMA+0x128>)
 80011e0:	9201      	str	r2, [sp, #4]
 80011e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011e6:	9200      	str	r2, [sp, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff feea 	bl	8000fc4 <LL_I2C_HandleTransfer>

	//I2C wait for : RX REG BUSY
	while(LL_I2C_IsActiveFlag_RXNE(I2Cx)==RESET);
 80011f0:	bf00      	nop
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff fe7b 	bl	8000eee <LL_I2C_IsActiveFlag_RXNE>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f9      	beq.n	80011f2 <i2cdevReadRegSeq_DMA+0xca>

	//I2C DMA Transfer
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)&I2Cx->RXDR);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3324      	adds	r3, #36	; 0x24
 8001202:	461a      	mov	r2, r3
 8001204:	2106      	movs	r1, #6
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <i2cdevReadRegSeq_DMA+0x12c>)
 8001208:	f7ff ff74 	bl	80010f4 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)rx_buffer);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	461a      	mov	r2, r3
 8001210:	2106      	movs	r1, #6
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <i2cdevReadRegSeq_DMA+0x12c>)
 8001214:	f7ff ff54 	bl	80010c0 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, size);
 8001218:	8c3b      	ldrh	r3, [r7, #32]
 800121a:	461a      	mov	r2, r3
 800121c:	2106      	movs	r1, #6
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <i2cdevReadRegSeq_DMA+0x12c>)
 8001220:	f7ff ff28 	bl	8001074 <LL_DMA_SetDataLength>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001224:	2106      	movs	r1, #6
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <i2cdevReadRegSeq_DMA+0x12c>)
 8001228:	f7ff ff02 	bl	8001030 <LL_DMA_EnableChannel>

	//I2C wait for : STOP DETECT
	while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);
 800122c:	bf00      	nop
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fe70 	bl	8000f14 <LL_I2C_IsActiveFlag_STOP>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f9      	beq.n	800122e <i2cdevReadRegSeq_DMA+0x106>

	LL_I2C_ClearFlag_STOP(I2Cx);
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff fea4 	bl	8000f88 <LL_I2C_ClearFlag_STOP>
    // 返回接收缓冲区指针
    return rx_buffer;
 8001240:	687b      	ldr	r3, [r7, #4]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	80002000 	.word	0x80002000
 8001250:	80002400 	.word	0x80002400
 8001254:	40020000 	.word	0x40020000

08001258 <I2C_DMA_TransferComplete_Callback>:

void I2C_DMA_TransferComplete_Callback(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    printf("OK\n");
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <I2C_DMA_TransferComplete_Callback+0x10>)
 800125e:	f003 ff33 	bl	80050c8 <puts>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	080059a0 	.word	0x080059a0

0800126c <LL_RCC_LSE_Enable>:
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <LL_RCC_LSE_Enable+0x20>)
 8001272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <LL_RCC_LSE_Enable+0x20>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <LL_RCC_LSE_SetDriveCapability>:
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <LL_RCC_LSE_SetDriveCapability+0x28>)
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129e:	f023 0218 	bic.w	r2, r3, #24
 80012a2:	4905      	ldr	r1, [pc, #20]	; (80012b8 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40021000 	.word	0x40021000

080012bc <LL_RCC_LSE_IsReady>:
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <LL_RCC_LSE_IsReady+0x24>)
 80012c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d101      	bne.n	80012d2 <LL_RCC_LSE_IsReady+0x16>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_RCC_LSE_IsReady+0x18>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <LL_RCC_MSI_Enable>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <LL_RCC_MSI_Enable+0x1c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <LL_RCC_MSI_Enable+0x1c>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <LL_RCC_MSI_IsReady>:
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <LL_RCC_MSI_IsReady+0x20>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b02      	cmp	r3, #2
 8001312:	d101      	bne.n	8001318 <LL_RCC_MSI_IsReady+0x14>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_RCC_MSI_IsReady+0x16>
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000

08001328 <LL_RCC_MSI_EnablePLLMode>:
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <LL_RCC_MSI_EnableRangeSelection>:
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <LL_RCC_MSI_SetRange>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <LL_RCC_MSI_SetRange+0x24>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001378:	4904      	ldr	r1, [pc, #16]	; (800138c <LL_RCC_MSI_SetRange+0x24>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000

08001390 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <LL_RCC_SetSysClkSource>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <LL_RCC_SetSysClkSource+0x24>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 0203 	bic.w	r2, r3, #3
 80013cc:	4904      	ldr	r1, [pc, #16]	; (80013e0 <LL_RCC_SetSysClkSource+0x24>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000

080013e4 <LL_RCC_GetSysClkSource>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <LL_RCC_GetSysClkSource+0x18>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 030c 	and.w	r3, r3, #12
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <LL_RCC_SetAHBPrescaler>:
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <LL_RCC_SetAHBPrescaler+0x24>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001410:	4904      	ldr	r1, [pc, #16]	; (8001424 <LL_RCC_SetAHBPrescaler+0x24>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4313      	orrs	r3, r2
 8001416:	608b      	str	r3, [r1, #8]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000

08001428 <LL_RCC_SetAPB1Prescaler>:
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001438:	4904      	ldr	r1, [pc, #16]	; (800144c <LL_RCC_SetAPB1Prescaler+0x24>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4313      	orrs	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000

08001450 <LL_RCC_SetAPB2Prescaler>:
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <LL_RCC_SetAPB2Prescaler+0x24>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001460:	4904      	ldr	r1, [pc, #16]	; (8001474 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000

08001478 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <LL_RCC_PLL_Enable+0x1c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <LL_RCC_PLL_Enable+0x1c>)
 8001482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000

08001498 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <LL_RCC_PLL_IsReady+0x24>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014a8:	d101      	bne.n	80014ae <LL_RCC_PLL_IsReady+0x16>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <LL_RCC_PLL_IsReady+0x18>
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	68f9      	ldr	r1, [r7, #12]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	4311      	orrs	r1, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	0212      	lsls	r2, r2, #8
 80014e0:	4311      	orrs	r1, r2
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	4904      	ldr	r1, [pc, #16]	; (80014f8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000
 80014fc:	f9ff808c 	.word	0xf9ff808c

08001500 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800150a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <LL_FLASH_SetLatency+0x24>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 0207 	bic.w	r2, r3, #7
 8001530:	4904      	ldr	r1, [pc, #16]	; (8001544 <LL_FLASH_SetLatency+0x24>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40022000 	.word	0x40022000

08001548 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <LL_FLASH_GetLatency+0x18>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40022000 	.word	0x40022000

08001564 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40007000 	.word	0x40007000

0800158c <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40007000 	.word	0x40007000

080015ac <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015bc:	d101      	bne.n	80015c2 <LL_PWR_IsActiveFlag_VOS+0x16>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_PWR_IsActiveFlag_VOS+0x18>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40007000 	.word	0x40007000

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b09a      	sub	sp, #104	; 0x68
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015da:	f000 fba6 	bl	8001d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015de:	f000 f815 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e2:	f7ff f8f7 	bl	80007d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80015e6:	f7ff f813 	bl	8000610 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015ea:	f000 fab7 	bl	8001b5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015ee:	f7ff fb97 	bl	8000d20 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015f2:	f000 fa83 	bl	8001afc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80015f6:	4804      	ldr	r0, [pc, #16]	; (8001608 <main+0x34>)
 80015f8:	f000 f886 	bl	8001708 <RetargetInit>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80015fc:	f7ff f862 	bl	80006c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001600:	f002 fa14 	bl	8003a2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001604:	e7fe      	b.n	8001604 <main+0x30>
 8001606:	bf00      	nop
 8001608:	200003bc 	.word	0x200003bc

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001610:	2004      	movs	r0, #4
 8001612:	f7ff ff85 	bl	8001520 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001616:	bf00      	nop
 8001618:	f7ff ff96 	bl	8001548 <LL_FLASH_GetLatency>
 800161c:	4603      	mov	r3, r0
 800161e:	2b04      	cmp	r3, #4
 8001620:	d1fa      	bne.n	8001618 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001622:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001626:	f7ff ff9d 	bl	8001564 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800162a:	bf00      	nop
 800162c:	f7ff ffbe 	bl	80015ac <LL_PWR_IsActiveFlag_VOS>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1fa      	bne.n	800162c <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8001636:	f7ff fe55 	bl	80012e4 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 800163a:	bf00      	nop
 800163c:	f7ff fe62 	bl	8001304 <LL_RCC_MSI_IsReady>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d1fa      	bne.n	800163c <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001646:	f7ff fe7f 	bl	8001348 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 800164a:	2060      	movs	r0, #96	; 0x60
 800164c:	f7ff fe8c 	bl	8001368 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fe9d 	bl	8001390 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001656:	f7ff ff99 	bl	800158c <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fe18 	bl	8001290 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001660:	f7ff fe04 	bl	800126c <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001664:	bf00      	nop
 8001666:	f7ff fe29 	bl	80012bc <LL_RCC_LSE_IsReady>
 800166a:	4603      	mov	r3, r0
 800166c:	2b01      	cmp	r3, #1
 800166e:	d1fa      	bne.n	8001666 <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001670:	f7ff fe5a 	bl	8001328 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8001674:	2300      	movs	r3, #0
 8001676:	2228      	movs	r2, #40	; 0x28
 8001678:	2100      	movs	r1, #0
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff ff20 	bl	80014c0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001680:	f7ff ff3e 	bl	8001500 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001684:	f7ff fef8 	bl	8001478 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001688:	bf00      	nop
 800168a:	f7ff ff05 	bl	8001498 <LL_RCC_PLL_IsReady>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	d1fa      	bne.n	800168a <SystemClock_Config+0x7e>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001694:	2003      	movs	r0, #3
 8001696:	f7ff fe91 	bl	80013bc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800169a:	bf00      	nop
 800169c:	f7ff fea2 	bl	80013e4 <LL_RCC_GetSysClkSource>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d1fa      	bne.n	800169c <SystemClock_Config+0x90>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff feaa 	bl	8001400 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff febb 	bl	8001428 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff fecc 	bl	8001450 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 80016b8:	4806      	ldr	r0, [pc, #24]	; (80016d4 <SystemClock_Config+0xc8>)
 80016ba:	f002 f98f 	bl	80039dc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80016be:	200f      	movs	r0, #15
 80016c0:	f000 f910 	bl	80018e4 <HAL_InitTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ca:	f000 f817 	bl	80016fc <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	04c4b400 	.word	0x04c4b400

080016d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ea:	f000 fb37 	bl	8001d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40012c00 	.word	0x40012c00

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	e7fe      	b.n	8001704 <Error_Handler+0x8>
	...

08001708 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <RetargetInit+0x28>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <RetargetInit+0x2c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6898      	ldr	r0, [r3, #8]
 800171c:	2300      	movs	r3, #0
 800171e:	2202      	movs	r2, #2
 8001720:	2100      	movs	r1, #0
 8001722:	f003 fcd9 	bl	80050d8 <setvbuf>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002e0 	.word	0x200002e0
 8001734:	20000068 	.word	0x20000068

08001738 <_isatty>:

int _isatty(int fd) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db04      	blt.n	8001750 <_isatty+0x18>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b02      	cmp	r3, #2
 800174a:	dc01      	bgt.n	8001750 <_isatty+0x18>
    return 1;
 800174c:	2301      	movs	r3, #1
 800174e:	e005      	b.n	800175c <_isatty+0x24>

  errno = EBADF;
 8001750:	f003 fe96 	bl	8005480 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	2209      	movs	r2, #9
 8001758:	601a      	str	r2, [r3, #0]
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_write>:

int _write(int fd, char* ptr, int len) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d002      	beq.n	800177c <_write+0x18>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d111      	bne.n	80017a0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <_write+0x54>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	b29a      	uxth	r2, r3
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	f001 f8f9 	bl	8002980 <HAL_UART_Transmit>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <_write+0x38>
      return len;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	e008      	b.n	80017ae <_write+0x4a>
    else
      return EIO;
 800179c:	2305      	movs	r3, #5
 800179e:	e006      	b.n	80017ae <_write+0x4a>
  }
  errno = EBADF;
 80017a0:	f003 fe6e 	bl	8005480 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2209      	movs	r2, #9
 80017a8:	601a      	str	r2, [r3, #0]
  return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002e0 	.word	0x200002e0

080017bc <_close>:

int _close(int fd) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db04      	blt.n	80017d4 <_close+0x18>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	dc01      	bgt.n	80017d4 <_close+0x18>
    return 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e006      	b.n	80017e2 <_close+0x26>

  errno = EBADF;
 80017d4:	f003 fe54 	bl	8005480 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	2209      	movs	r2, #9
 80017dc:	601a      	str	r2, [r3, #0]
  return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80017f6:	f003 fe43 	bl	8005480 <__errno>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2209      	movs	r2, #9
 80017fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_read>:

int _read(int fd, char* ptr, int len) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d110      	bne.n	8001840 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <_read+0x4c>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	2201      	movs	r2, #1
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	f001 f933 	bl	8002a94 <HAL_UART_Receive>
 800182e:	4603      	mov	r3, r0
 8001830:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <_read+0x30>
      return 1;
 8001838:	2301      	movs	r3, #1
 800183a:	e008      	b.n	800184e <_read+0x42>
    else
      return EIO;
 800183c:	2305      	movs	r3, #5
 800183e:	e006      	b.n	800184e <_read+0x42>
  }
  errno = EBADF;
 8001840:	f003 fe1e 	bl	8005480 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	2209      	movs	r2, #9
 8001848:	601a      	str	r2, [r3, #0]
  return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200002e0 	.word	0x200002e0

0800185c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db08      	blt.n	800187e <_fstat+0x22>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	dc05      	bgt.n	800187e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001878:	605a      	str	r2, [r3, #4]
    return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	e005      	b.n	800188a <_fstat+0x2e>
  }

  errno = EBADF;
 800187e:	f003 fdff 	bl	8005480 <__errno>
 8001882:	4603      	mov	r3, r0
 8001884:	2209      	movs	r2, #9
 8001886:	601a      	str	r2, [r3, #0]
  return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_MspInit+0x4c>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6613      	str	r3, [r2, #96]	; 0x60
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_MspInit+0x4c>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_MspInit+0x4c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	210f      	movs	r1, #15
 80018ce:	f06f 0001 	mvn.w	r0, #1
 80018d2:	f000 fb1b 	bl	8001f0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_InitTick+0xc8>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	4a2d      	ldr	r2, [pc, #180]	; (80019ac <HAL_InitTick+0xc8>)
 80018f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018fc:	6613      	str	r3, [r2, #96]	; 0x60
 80018fe:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_InitTick+0xc8>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800190a:	f107 020c 	add.w	r2, r7, #12
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fd51 	bl	80023bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800191a:	f000 fd39 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 800191e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_InitTick+0xcc>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	3b01      	subs	r3, #1
 800192c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_InitTick+0xd0>)
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <HAL_InitTick+0xd4>)
 8001932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_InitTick+0xd0>)
 8001936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800193a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_InitTick+0xd0>)
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_InitTick+0xd0>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_InitTick+0xd0>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_InitTick+0xd0>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001954:	4817      	ldr	r0, [pc, #92]	; (80019b4 <HAL_InitTick+0xd0>)
 8001956:	f000 fd63 	bl	8002420 <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001964:	2b00      	cmp	r3, #0
 8001966:	d11b      	bne.n	80019a0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001968:	4812      	ldr	r0, [pc, #72]	; (80019b4 <HAL_InitTick+0xd0>)
 800196a:	f000 fdbb 	bl	80024e4 <HAL_TIM_Base_Start_IT>
 800196e:	4603      	mov	r3, r0
 8001970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001974:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001978:	2b00      	cmp	r3, #0
 800197a:	d111      	bne.n	80019a0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800197c:	2019      	movs	r0, #25
 800197e:	f000 fae1 	bl	8001f44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d808      	bhi.n	800199a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	2019      	movs	r0, #25
 800198e:	f000 fabd 	bl	8001f0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_InitTick+0xd8>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e002      	b.n	80019a0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3730      	adds	r7, #48	; 0x30
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	200002e4 	.word	0x200002e4
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	20000004 	.word	0x20000004

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a0e:	f000 fdbd 	bl	800258c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002e4 	.word	0x200002e4

08001a1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C_DMA_TransferComplete_Callback();
 8001a20:	f7ff fc1a 	bl	8001258 <I2C_DMA_TransferComplete_Callback>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */

  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f003 fd0a 	bl	8005480 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <_sbrk+0x64>)
 8001a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20010000 	.word	0x20010000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	20000330 	.word	0x20000330
 8001aa0:	200012a0 	.word	0x200012a0

08001aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <LL_RCC_SetUSARTClockSource>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <LL_RCC_SetUSARTClockSource+0x30>)
 8001ad2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	43db      	mvns	r3, r3
 8001adc:	401a      	ands	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4905      	ldr	r1, [pc, #20]	; (8001af8 <LL_RCC_SetUSARTClockSource+0x30>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <MX_USART1_UART_Init+0x5c>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART1_UART_Init+0x58>)
 8001b40:	f000 fed0 	bl	80028e4 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b4a:	f7ff fdd7 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000334 	.word	0x20000334
 8001b58:	40013800 	.word	0x40013800

08001b5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <MX_USART2_UART_Init+0x5c>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001ba0:	f000 fea0 	bl	80028e4 <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001baa:	f7ff fda7 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200003bc 	.word	0x200003bc
 8001bb8:	40004400 	.word	0x40004400

08001bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <HAL_UART_MspInit+0x10c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d12c      	bne.n	8001c38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8001bde:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001be2:	f7ff ff71 	bl	8001ac8 <LL_RCC_SetUSARTClockSource>

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001be6:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	4a38      	ldr	r2, [pc, #224]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a32      	ldr	r2, [pc, #200]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c16:	23c0      	movs	r3, #192	; 0xc0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c26:	2307      	movs	r3, #7
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4827      	ldr	r0, [pc, #156]	; (8001cd0 <HAL_UART_MspInit+0x114>)
 8001c32:	f000 f995 	bl	8001f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c36:	e043      	b.n	8001cc0 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <HAL_UART_MspInit+0x118>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d13e      	bne.n	8001cc0 <HAL_UART_MspInit+0x104>
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001c42:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001c46:	f7ff ff3f 	bl	8001ac8 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_UART_MspInit+0x110>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c98:	f000 f962 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f000 f950 	bl	8001f60 <HAL_GPIO_Init>
}
 8001cc0:	bf00      	nop
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	40004400 	.word	0x40004400

08001cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cdc:	f7ff fee2 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce2:	490d      	ldr	r1, [pc, #52]	; (8001d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <LoopForever+0xe>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf8:	4c0a      	ldr	r4, [pc, #40]	; (8001d24 <LoopForever+0x16>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d06:	f003 fbc1 	bl	800548c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0a:	f7ff fc63 	bl	80015d4 <main>

08001d0e <LoopForever>:

LoopForever:
    b LoopForever
 8001d0e:	e7fe      	b.n	8001d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d18:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d1c:	08005a04 	.word	0x08005a04
  ldr r2, =_sbss
 8001d20:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d24:	200012a0 	.word	0x200012a0

08001d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC1_IRQHandler>

08001d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f8de 	bl	8001ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f7ff fdd2 	bl	80018e4 <HAL_InitTick>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	71fb      	strb	r3, [r7, #7]
 8001d4a:	e001      	b.n	8001d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d4c:	f7ff fda2 	bl	8001894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d50:	79fb      	ldrb	r3, [r7, #7]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000444 	.word	0x20000444

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000444 	.word	0x20000444

08001d9c <__NVIC_SetPriorityGrouping>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff4c 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1e:	f7ff ff61 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	6978      	ldr	r0, [r7, #20]
 8001f2a:	f7ff ffb1 	bl	8001e90 <NVIC_EncodePriority>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff80 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff54 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6e:	e148      	b.n	8002202 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2101      	movs	r1, #1
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 813a 	beq.w	80021fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d005      	beq.n	8001fa0 <HAL_GPIO_Init+0x40>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d130      	bne.n	8002002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	f003 0201 	and.w	r2, r3, #1
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b03      	cmp	r3, #3
 800200c:	d017      	beq.n	800203e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d123      	bne.n	8002092 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	08da      	lsrs	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3208      	adds	r2, #8
 800208c:	6939      	ldr	r1, [r7, #16]
 800208e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0203 	and.w	r2, r3, #3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8094 	beq.w	80021fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d4:	4b52      	ldr	r3, [pc, #328]	; (8002220 <HAL_GPIO_Init+0x2c0>)
 80020d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d8:	4a51      	ldr	r2, [pc, #324]	; (8002220 <HAL_GPIO_Init+0x2c0>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6613      	str	r3, [r2, #96]	; 0x60
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_GPIO_Init+0x2c0>)
 80020e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020ec:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_GPIO_Init+0x2c4>)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002116:	d00d      	beq.n	8002134 <HAL_GPIO_Init+0x1d4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a43      	ldr	r2, [pc, #268]	; (8002228 <HAL_GPIO_Init+0x2c8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <HAL_GPIO_Init+0x1d0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a42      	ldr	r2, [pc, #264]	; (800222c <HAL_GPIO_Init+0x2cc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_GPIO_Init+0x1cc>
 8002128:	2302      	movs	r3, #2
 800212a:	e004      	b.n	8002136 <HAL_GPIO_Init+0x1d6>
 800212c:	2307      	movs	r3, #7
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x1d6>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_GPIO_Init+0x1d6>
 8002134:	2300      	movs	r3, #0
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	f002 0203 	and.w	r2, r2, #3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	4093      	lsls	r3, r2
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002146:	4937      	ldr	r1, [pc, #220]	; (8002224 <HAL_GPIO_Init+0x2c4>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002154:	4b36      	ldr	r3, [pc, #216]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021a2:	4a23      	ldr	r2, [pc, #140]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021cc:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021f6:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	f47f aeaf 	bne.w	8001f70 <HAL_GPIO_Init+0x10>
  }
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000
 8002228:	48000400 	.word	0x48000400
 800222c:	48000800 	.word	0x48000800
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002242:	4b3e      	ldr	r3, [pc, #248]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x34>
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d121      	bne.n	80022a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d11e      	bne.n	80022a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002268:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e005      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002290:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10d      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	e004      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d134      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0xa6>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d003      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0xac>
 80022d8:	e005      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_RCC_GetSysClockFreq+0x110>)
 80022dc:	617b      	str	r3, [r7, #20]
      break;
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_GetSysClockFreq+0x114>)
 80022e2:	617b      	str	r3, [r7, #20]
      break;
 80022e4:	e002      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	617b      	str	r3, [r7, #20]
      break;
 80022ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	3301      	adds	r3, #1
 80022f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	fb03 f202 	mul.w	r2, r3, r2
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	0e5b      	lsrs	r3, r3, #25
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	3301      	adds	r3, #1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800232c:	69bb      	ldr	r3, [r7, #24]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	080059c4 	.word	0x080059c4
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002368:	f7ff fff0 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4904      	ldr	r1, [pc, #16]	; (800238c <HAL_RCC_GetPCLK1Freq+0x28>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	080059bc 	.word	0x080059bc

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002394:	f7ff ffda 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4904      	ldr	r1, [pc, #16]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	080059bc 	.word	0x080059bc

080023bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	220f      	movs	r2, #15
 80023ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0203 	and.w	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_RCC_GetClockConfig+0x60>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0207 	and.w	r2, r3, #7
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40022000 	.word	0x40022000

08002420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e049      	b.n	80024c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f841 	bl	80024ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f000 f9be 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d001      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e03b      	b.n	8002574 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_TIM_Base_Start_IT+0x9c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_TIM_Base_Start_IT+0x4e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002526:	d004      	beq.n	8002532 <HAL_TIM_Base_Start_IT+0x4e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <HAL_TIM_Base_Start_IT+0xa0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d115      	bne.n	800255e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <HAL_TIM_Base_Start_IT+0xa4>)
 800253a:	4013      	ands	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b06      	cmp	r3, #6
 8002542:	d015      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x8c>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254a:	d011      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255c:	e008      	b.n	8002570 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e000      	b.n	8002572 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002570:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40014000 	.word	0x40014000
 8002588:	00010007 	.word	0x00010007

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d020      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0202 	mvn.w	r2, #2
 80025c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8e4 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8d6 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8e7 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d020      	beq.n	800263c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01b      	beq.n	800263c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0204 	mvn.w	r2, #4
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8be 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8b0 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8c1 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d020      	beq.n	8002688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0208 	mvn.w	r2, #8
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f898 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f88a 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f89b 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d020      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01b      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0210 	mvn.w	r2, #16
 80026a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2208      	movs	r2, #8
 80026aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f872 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 80026c0:	e005      	b.n	80026ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f864 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f875 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00c      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0201 	mvn.w	r2, #1
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fff0 	bl	80016d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8d0 	bl	80028bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8c8 	bl	80028d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f834 	bl	80027cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0220 	mvn.w	r2, #32
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f890 	bl	80028a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a2a      	ldr	r2, [pc, #168]	; (800289c <TIM_Base_SetConfig+0xbc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d003      	beq.n	8002800 <TIM_Base_SetConfig+0x20>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fe:	d108      	bne.n	8002812 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a21      	ldr	r2, [pc, #132]	; (800289c <TIM_Base_SetConfig+0xbc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00b      	beq.n	8002832 <TIM_Base_SetConfig+0x52>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d007      	beq.n	8002832 <TIM_Base_SetConfig+0x52>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <TIM_Base_SetConfig+0xc0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d003      	beq.n	8002832 <TIM_Base_SetConfig+0x52>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <TIM_Base_SetConfig+0xc4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d108      	bne.n	8002844 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <TIM_Base_SetConfig+0xbc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <TIM_Base_SetConfig+0xa0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <TIM_Base_SetConfig+0xc0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_Base_SetConfig+0xa0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <TIM_Base_SetConfig+0xc4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d103      	bne.n	8002888 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	615a      	str	r2, [r3, #20]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40014000 	.word	0x40014000
 80028a4:	40014400 	.word	0x40014400

080028a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e040      	b.n	8002978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff f958 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fba8 	bl	8003080 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f979 	bl	8002c28 <UART_SetConfig>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e01b      	b.n	8002978 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800294e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800295e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fc27 	bl	80031c4 <UART_CheckIdleState>
 8002976:	4603      	mov	r3, r0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002994:	2b20      	cmp	r3, #32
 8002996:	d178      	bne.n	8002a8a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_UART_Transmit+0x24>
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e071      	b.n	8002a8c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b6:	f7ff f9e5 	bl	8001d84 <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d108      	bne.n	80029e8 <HAL_UART_Transmit+0x68>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e003      	b.n	80029f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029f0:	e030      	b.n	8002a54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fc89 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e03c      	b.n	8002a8c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a24:	b292      	uxth	r2, r2
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e008      	b.n	8002a42 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1c8      	bne.n	80029f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2200      	movs	r2, #0
 8002a68:	2140      	movs	r1, #64	; 0x40
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fc52 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e005      	b.n	8002a8c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	f040 80b6 	bne.w	8002c1c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_UART_Receive+0x28>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0ae      	b.n	8002c1e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2222      	movs	r2, #34	; 0x22
 8002acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ad6:	f7ff f955 	bl	8001d84 <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d10e      	bne.n	8002b14 <HAL_UART_Receive+0x80>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_UART_Receive+0x76>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b08:	e02d      	b.n	8002b66 <HAL_UART_Receive+0xd2>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b12:	e028      	b.n	8002b66 <HAL_UART_Receive+0xd2>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10d      	bne.n	8002b38 <HAL_UART_Receive+0xa4>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <HAL_UART_Receive+0x9a>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	22ff      	movs	r2, #255	; 0xff
 8002b28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b2c:	e01b      	b.n	8002b66 <HAL_UART_Receive+0xd2>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	227f      	movs	r2, #127	; 0x7f
 8002b32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b36:	e016      	b.n	8002b66 <HAL_UART_Receive+0xd2>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b40:	d10d      	bne.n	8002b5e <HAL_UART_Receive+0xca>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <HAL_UART_Receive+0xc0>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	227f      	movs	r2, #127	; 0x7f
 8002b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b52:	e008      	b.n	8002b66 <HAL_UART_Receive+0xd2>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	223f      	movs	r2, #63	; 0x3f
 8002b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b5c:	e003      	b.n	8002b66 <HAL_UART_Receive+0xd2>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b6c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	d108      	bne.n	8002b8a <HAL_UART_Receive+0xf6>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	e003      	b.n	8002b92 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b92:	e037      	b.n	8002c04 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fbb8 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e033      	b.n	8002c1e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10c      	bne.n	8002bd6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	8a7b      	ldrh	r3, [r7, #18]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	e00d      	b.n	8002bf2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	8a7b      	ldrh	r3, [r7, #18]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	4013      	ands	r3, r2
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1c1      	bne.n	8002b94 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e000      	b.n	8002c1e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c2c:	b08a      	sub	sp, #40	; 0x28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4bb4      	ldr	r3, [pc, #720]	; (8002f28 <UART_SetConfig+0x300>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4aa9      	ldr	r2, [pc, #676]	; (8002f2c <UART_SetConfig+0x304>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	4313      	orrs	r3, r2
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4aa0      	ldr	r2, [pc, #640]	; (8002f30 <UART_SetConfig+0x308>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d126      	bne.n	8002d00 <UART_SetConfig+0xd8>
 8002cb2:	4ba0      	ldr	r3, [pc, #640]	; (8002f34 <UART_SetConfig+0x30c>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d81b      	bhi.n	8002cf8 <UART_SetConfig+0xd0>
 8002cc0:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <UART_SetConfig+0xa0>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002cd9 	.word	0x08002cd9
 8002ccc:	08002ce9 	.word	0x08002ce9
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf1 	.word	0x08002cf1
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cde:	e080      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ce6:	e07c      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cee:	e078      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cf6:	e074      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfe:	e070      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a8c      	ldr	r2, [pc, #560]	; (8002f38 <UART_SetConfig+0x310>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d138      	bne.n	8002d7c <UART_SetConfig+0x154>
 8002d0a:	4b8a      	ldr	r3, [pc, #552]	; (8002f34 <UART_SetConfig+0x30c>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	d82d      	bhi.n	8002d74 <UART_SetConfig+0x14c>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <UART_SetConfig+0xf8>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002d75 	.word	0x08002d75
 8002d28:	08002d75 	.word	0x08002d75
 8002d2c:	08002d75 	.word	0x08002d75
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d75 	.word	0x08002d75
 8002d38:	08002d75 	.word	0x08002d75
 8002d3c:	08002d75 	.word	0x08002d75
 8002d40:	08002d5d 	.word	0x08002d5d
 8002d44:	08002d75 	.word	0x08002d75
 8002d48:	08002d75 	.word	0x08002d75
 8002d4c:	08002d75 	.word	0x08002d75
 8002d50:	08002d6d 	.word	0x08002d6d
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5a:	e042      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d62:	e03e      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002d64:	2304      	movs	r3, #4
 8002d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6a:	e03a      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d72:	e036      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002d74:	2310      	movs	r3, #16
 8002d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7a:	e032      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a6a      	ldr	r2, [pc, #424]	; (8002f2c <UART_SetConfig+0x304>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d12a      	bne.n	8002ddc <UART_SetConfig+0x1b4>
 8002d86:	4b6b      	ldr	r3, [pc, #428]	; (8002f34 <UART_SetConfig+0x30c>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d94:	d01a      	beq.n	8002dcc <UART_SetConfig+0x1a4>
 8002d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d9a:	d81b      	bhi.n	8002dd4 <UART_SetConfig+0x1ac>
 8002d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da0:	d00c      	beq.n	8002dbc <UART_SetConfig+0x194>
 8002da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da6:	d815      	bhi.n	8002dd4 <UART_SetConfig+0x1ac>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <UART_SetConfig+0x18c>
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	d008      	beq.n	8002dc4 <UART_SetConfig+0x19c>
 8002db2:	e00f      	b.n	8002dd4 <UART_SetConfig+0x1ac>
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dba:	e012      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc2:	e00e      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dca:	e00a      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002dcc:	2308      	movs	r3, #8
 8002dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd2:	e006      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dda:	e002      	b.n	8002de2 <UART_SetConfig+0x1ba>
 8002ddc:	2310      	movs	r3, #16
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <UART_SetConfig+0x304>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d17a      	bne.n	8002ee2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d824      	bhi.n	8002e3e <UART_SetConfig+0x216>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <UART_SetConfig+0x1d4>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e21 	.word	0x08002e21
 8002e00:	08002e3f 	.word	0x08002e3f
 8002e04:	08002e29 	.word	0x08002e29
 8002e08:	08002e3f 	.word	0x08002e3f
 8002e0c:	08002e2f 	.word	0x08002e2f
 8002e10:	08002e3f 	.word	0x08002e3f
 8002e14:	08002e3f 	.word	0x08002e3f
 8002e18:	08002e3f 	.word	0x08002e3f
 8002e1c:	08002e37 	.word	0x08002e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e20:	f7ff faa0 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8002e24:	61f8      	str	r0, [r7, #28]
        break;
 8002e26:	e010      	b.n	8002e4a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e28:	4b44      	ldr	r3, [pc, #272]	; (8002f3c <UART_SetConfig+0x314>)
 8002e2a:	61fb      	str	r3, [r7, #28]
        break;
 8002e2c:	e00d      	b.n	8002e4a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2e:	f7ff fa01 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002e32:	61f8      	str	r0, [r7, #28]
        break;
 8002e34:	e009      	b.n	8002e4a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	61fb      	str	r3, [r7, #28]
        break;
 8002e3c:	e005      	b.n	8002e4a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8107 	beq.w	8003060 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d305      	bcc.n	8002e6e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d903      	bls.n	8002e76 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e74:	e0f4      	b.n	8003060 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	4615      	mov	r5, r2
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	022b      	lsls	r3, r5, #8
 8002e88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e8c:	0222      	lsls	r2, r4, #8
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	6849      	ldr	r1, [r1, #4]
 8002e92:	0849      	lsrs	r1, r1, #1
 8002e94:	2000      	movs	r0, #0
 8002e96:	4688      	mov	r8, r1
 8002e98:	4681      	mov	r9, r0
 8002e9a:	eb12 0a08 	adds.w	sl, r2, r8
 8002e9e:	eb43 0b09 	adc.w	fp, r3, r9
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eb0:	4650      	mov	r0, sl
 8002eb2:	4659      	mov	r1, fp
 8002eb4:	f7fd f98c 	bl	80001d0 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec6:	d308      	bcc.n	8002eda <UART_SetConfig+0x2b2>
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ece:	d204      	bcs.n	8002eda <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	e0c2      	b.n	8003060 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ee0:	e0be      	b.n	8003060 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eea:	d16a      	bne.n	8002fc2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d834      	bhi.n	8002f5e <UART_SetConfig+0x336>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <UART_SetConfig+0x2d4>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f21 	.word	0x08002f21
 8002f00:	08002f41 	.word	0x08002f41
 8002f04:	08002f49 	.word	0x08002f49
 8002f08:	08002f5f 	.word	0x08002f5f
 8002f0c:	08002f4f 	.word	0x08002f4f
 8002f10:	08002f5f 	.word	0x08002f5f
 8002f14:	08002f5f 	.word	0x08002f5f
 8002f18:	08002f5f 	.word	0x08002f5f
 8002f1c:	08002f57 	.word	0x08002f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f20:	f7ff fa20 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8002f24:	61f8      	str	r0, [r7, #28]
        break;
 8002f26:	e020      	b.n	8002f6a <UART_SetConfig+0x342>
 8002f28:	efff69f3 	.word	0xefff69f3
 8002f2c:	40008000 	.word	0x40008000
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40004400 	.word	0x40004400
 8002f3c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f40:	f7ff fa26 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8002f44:	61f8      	str	r0, [r7, #28]
        break;
 8002f46:	e010      	b.n	8002f6a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <UART_SetConfig+0x454>)
 8002f4a:	61fb      	str	r3, [r7, #28]
        break;
 8002f4c:	e00d      	b.n	8002f6a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7ff f971 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002f52:	61f8      	str	r0, [r7, #28]
        break;
 8002f54:	e009      	b.n	8002f6a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5a:	61fb      	str	r3, [r7, #28]
        break;
 8002f5c:	e005      	b.n	8002f6a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d077      	beq.n	8003060 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	005a      	lsls	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	441a      	add	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d916      	bls.n	8002fba <UART_SetConfig+0x392>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d212      	bcs.n	8002fba <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f023 030f 	bic.w	r3, r3, #15
 8002f9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	8afb      	ldrh	r3, [r7, #22]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	8afa      	ldrh	r2, [r7, #22]
 8002fb6:	60da      	str	r2, [r3, #12]
 8002fb8:	e052      	b.n	8003060 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fc0:	e04e      	b.n	8003060 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d827      	bhi.n	800301a <UART_SetConfig+0x3f2>
 8002fca:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <UART_SetConfig+0x3a8>)
 8002fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	08002ffd 	.word	0x08002ffd
 8002fd8:	08003005 	.word	0x08003005
 8002fdc:	0800301b 	.word	0x0800301b
 8002fe0:	0800300b 	.word	0x0800300b
 8002fe4:	0800301b 	.word	0x0800301b
 8002fe8:	0800301b 	.word	0x0800301b
 8002fec:	0800301b 	.word	0x0800301b
 8002ff0:	08003013 	.word	0x08003013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f7ff f9b6 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	61f8      	str	r0, [r7, #28]
        break;
 8002ffa:	e014      	b.n	8003026 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ffc:	f7ff f9c8 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8003000:	61f8      	str	r0, [r7, #28]
        break;
 8003002:	e010      	b.n	8003026 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <UART_SetConfig+0x454>)
 8003006:	61fb      	str	r3, [r7, #28]
        break;
 8003008:	e00d      	b.n	8003026 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300a:	f7ff f913 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 800300e:	61f8      	str	r0, [r7, #28]
        break;
 8003010:	e009      	b.n	8003026 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003016:	61fb      	str	r3, [r7, #28]
        break;
 8003018:	e005      	b.n	8003026 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003024:	bf00      	nop
    }

    if (pclk != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d019      	beq.n	8003060 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	085a      	lsrs	r2, r3, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	441a      	add	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b0f      	cmp	r3, #15
 8003044:	d909      	bls.n	800305a <UART_SetConfig+0x432>
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d205      	bcs.n	800305a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	e002      	b.n	8003060 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800306c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003070:	4618      	mov	r0, r3
 8003072:	3728      	adds	r7, #40	; 0x28
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307a:	bf00      	nop
 800307c:	00f42400 	.word	0x00f42400

08003080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01a      	beq.n	8003196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317e:	d10a      	bne.n	8003196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b098      	sub	sp, #96	; 0x60
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d4:	f7fe fdd6 	bl	8001d84 <HAL_GetTick>
 80031d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d12e      	bne.n	8003246 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f0:	2200      	movs	r2, #0
 80031f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f88c 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d021      	beq.n	8003246 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003216:	653b      	str	r3, [r7, #80]	; 0x50
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003220:	647b      	str	r3, [r7, #68]	; 0x44
 8003222:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e6      	bne.n	8003202 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e062      	b.n	800330c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d149      	bne.n	80032e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f856 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d03c      	beq.n	80032e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	623b      	str	r3, [r7, #32]
   return(result);
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
 800328e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003294:	e841 2300 	strex	r3, r2, [r1]
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e6      	bne.n	800326e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3308      	adds	r3, #8
 80032a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3308      	adds	r3, #8
 80032be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c0:	61fa      	str	r2, [r7, #28]
 80032c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	617b      	str	r3, [r7, #20]
   return(result);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e5      	bne.n	80032a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e011      	b.n	800330c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3758      	adds	r7, #88	; 0x58
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003324:	e049      	b.n	80033ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d045      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe fd29 	bl	8001d84 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <UART_WaitOnFlagUntilTimeout+0x30>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e048      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d031      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d110      	bne.n	8003386 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2208      	movs	r2, #8
 800336a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f838 	bl	80033e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2208      	movs	r2, #8
 8003376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e029      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d111      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800339e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f81e 	bl	80033e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e00f      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4013      	ands	r3, r2
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d0a6      	beq.n	8003326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b095      	sub	sp, #84	; 0x54
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	643b      	str	r3, [r7, #64]	; 0x40
 800340a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800340e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e6      	bne.n	80033ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3308      	adds	r3, #8
 8003422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	61fb      	str	r3, [r7, #28]
   return(result);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	64bb      	str	r3, [r7, #72]	; 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3308      	adds	r3, #8
 800343a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800343c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003454:	2b01      	cmp	r3, #1
 8003456:	d118      	bne.n	800348a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	60bb      	str	r3, [r7, #8]
   return(result);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f023 0310 	bic.w	r3, r3, #16
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	613b      	str	r3, [r7, #16]
   return(result);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e6      	bne.n	8003458 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800349e:	bf00      	nop
 80034a0:	3754      	adds	r7, #84	; 0x54
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_GPIO_SetPinMode>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b08b      	sub	sp, #44	; 0x2c
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	613b      	str	r3, [r7, #16]
  return result;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e003      	b.n	80034dc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2103      	movs	r1, #3
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	61fb      	str	r3, [r7, #28]
  return result;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80034fe:	2320      	movs	r3, #32
 8003500:	e003      	b.n	800350a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]
}
 8003518:	bf00      	nop
 800351a:	372c      	adds	r7, #44	; 0x2c
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_GPIO_SetPinOutputType>:
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	43db      	mvns	r3, r3
 8003538:	401a      	ands	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	605a      	str	r2, [r3, #4]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_GPIO_SetPinSpeed>:
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	613b      	str	r3, [r7, #16]
  return result;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800357a:	2320      	movs	r3, #32
 800357c:	e003      	b.n	8003586 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2103      	movs	r1, #3
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	401a      	ands	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	61fb      	str	r3, [r7, #28]
  return result;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e003      	b.n	80035b4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	609a      	str	r2, [r3, #8]
}
 80035c2:	bf00      	nop
 80035c4:	372c      	adds	r7, #44	; 0x2c
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_GPIO_SetPinPull>:
{
 80035ce:	b480      	push	{r7}
 80035d0:	b08b      	sub	sp, #44	; 0x2c
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	613b      	str	r3, [r7, #16]
  return result;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e003      	b.n	8003600 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2103      	movs	r1, #3
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	61fb      	str	r3, [r7, #28]
  return result;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e003      	b.n	800362e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	431a      	orrs	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60da      	str	r2, [r3, #12]
}
 800363c:	bf00      	nop
 800363e:	372c      	adds	r7, #44	; 0x2c
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_GPIO_SetAFPin_0_7>:
{
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	613b      	str	r3, [r7, #16]
  return result;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800366e:	2320      	movs	r3, #32
 8003670:	e003      	b.n	800367a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	210f      	movs	r1, #15
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	401a      	ands	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	61fb      	str	r3, [r7, #28]
  return result;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e003      	b.n	80036a8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	372c      	adds	r7, #44	; 0x2c
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_GPIO_SetAFPin_8_15>:
{
 80036c2:	b480      	push	{r7}
 80036c4:	b08b      	sub	sp, #44	; 0x2c
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	613b      	str	r3, [r7, #16]
  return result;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e003      	b.n	80036f6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	210f      	movs	r1, #15
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	61fb      	str	r3, [r7, #28]
  return result;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800371a:	2320      	movs	r3, #32
 800371c:	e003      	b.n	8003726 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	431a      	orrs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003734:	bf00      	nop
 8003736:	372c      	adds	r7, #44	; 0x2c
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	60fb      	str	r3, [r7, #12]
  return result;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <LL_GPIO_Init+0x26>
    return 32U;
 8003762:	2320      	movs	r3, #32
 8003764:	e003      	b.n	800376e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003770:	e048      	b.n	8003804 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d03a      	beq.n	80037fe <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d003      	beq.n	8003798 <LL_GPIO_Init+0x58>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d10e      	bne.n	80037b6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	461a      	mov	r2, r3
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fed7 	bl	8003554 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff feb7 	bl	8003524 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	461a      	mov	r2, r3
 80037bc:	69b9      	ldr	r1, [r7, #24]
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff05 	bl	80035ce <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d111      	bne.n	80037f0 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2bff      	cmp	r3, #255	; 0xff
 80037d0:	d807      	bhi.n	80037e2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	461a      	mov	r2, r3
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff34 	bl	8003648 <LL_GPIO_SetAFPin_0_7>
 80037e0:	e006      	b.n	80037f0 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	461a      	mov	r2, r3
 80037e8:	69b9      	ldr	r1, [r7, #24]
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff69 	bl	80036c2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	461a      	mov	r2, r3
 80037f6:	69b9      	ldr	r1, [r7, #24]
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fe56 	bl	80034aa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1af      	bne.n	8003772 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <LL_I2C_Enable>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_I2C_Disable>:
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 0201 	bic.w	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_I2C_ConfigFilters>:
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	0219      	lsls	r1, r3, #8
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	430b      	orrs	r3, r1
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_I2C_SetOwnAddress1>:
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800389e:	f023 0307 	bic.w	r3, r3, #7
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	609a      	str	r2, [r3, #8]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <LL_I2C_EnableOwnAddress1>:
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	609a      	str	r2, [r3, #8]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <LL_I2C_DisableOwnAddress1>:
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <LL_I2C_SetTiming>:
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	611a      	str	r2, [r3, #16]
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_I2C_SetMode>:
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_I2C_AcknowledgeNextData>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	605a      	str	r2, [r3, #4]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff65 	bl	800383c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	461a      	mov	r2, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff6d 	bl	800385c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ffb6 	bl	80038fa <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff44 	bl	800381c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ffa0 	bl	80038da <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6919      	ldr	r1, [r3, #16]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	461a      	mov	r2, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff70 	bl	800388a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff81 	bl	80038ba <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ffa9 	bl	8003916 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ffb6 	bl	800393c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <LL_SetSystemCoreClock+0x1c>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6013      	str	r3, [r2, #0]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000000 	.word	0x20000000

080039fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0e:	2b84      	cmp	r3, #132	; 0x84
 8003a10:	d005      	beq.n	8003a1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	3303      	adds	r3, #3
 8003a1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a30:	f000 fade 	bl	8003ff0 <vTaskStartScheduler>
  
  return osOK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3c:	b089      	sub	sp, #36	; 0x24
 8003a3e:	af04      	add	r7, sp, #16
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <osThreadCreate+0x54>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01c      	beq.n	8003a8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685c      	ldr	r4, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691e      	ldr	r6, [r3, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ffc8 	bl	80039fc <makeFreeRtosPriority>
 8003a6c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a76:	9202      	str	r2, [sp, #8]
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	9100      	str	r1, [sp, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4632      	mov	r2, r6
 8003a80:	4629      	mov	r1, r5
 8003a82:	4620      	mov	r0, r4
 8003a84:	f000 f8ed 	bl	8003c62 <xTaskCreateStatic>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e01c      	b.n	8003ac8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685c      	ldr	r4, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a9a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ffaa 	bl	80039fc <makeFreeRtosPriority>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	9200      	str	r2, [sp, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	4632      	mov	r2, r6
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f000 f92f 	bl	8003d1c <xTaskCreate>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d001      	beq.n	8003ac8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ad2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <osDelay+0x16>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	e000      	b.n	8003aea <osDelay+0x18>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fa4c 	bl	8003f88 <vTaskDelay>
  
  return osOK;
 8003af0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f103 0208 	add.w	r2, r3, #8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f103 0208 	add.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f103 0208 	add.w	r2, r3, #8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d103      	bne.n	8003bbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e00c      	b.n	8003bd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e002      	b.n	8003bca <vListInsert+0x2e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d2f6      	bcs.n	8003bc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6892      	ldr	r2, [r2, #8]
 8003c24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6852      	ldr	r2, [r2, #4]
 8003c2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d103      	bne.n	8003c42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1e5a      	subs	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b08e      	sub	sp, #56	; 0x38
 8003c66:	af04      	add	r7, sp, #16
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	61fb      	str	r3, [r7, #28]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ca8:	2354      	movs	r3, #84	; 0x54
 8003caa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b54      	cmp	r3, #84	; 0x54
 8003cb0:	d00a      	beq.n	8003cc8 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	61bb      	str	r3, [r7, #24]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01e      	beq.n	8003d0e <xTaskCreateStatic+0xac>
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01b      	beq.n	8003d0e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	9302      	str	r3, [sp, #8]
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f850 	bl	8003da6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d08:	f000 f8d4 	bl	8003eb4 <prvAddNewTaskToReadyList>
 8003d0c:	e001      	b.n	8003d12 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d12:	697b      	ldr	r3, [r7, #20]
	}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	; 0x30
 8003d20:	af04      	add	r7, sp, #16
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fec9 	bl	8004ac8 <pvPortMalloc>
 8003d36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00e      	beq.n	8003d5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d3e:	2054      	movs	r0, #84	; 0x54
 8003d40:	f000 fec2 	bl	8004ac8 <pvPortMalloc>
 8003d44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
 8003d52:	e005      	b.n	8003d60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d54:	6978      	ldr	r0, [r7, #20]
 8003d56:	f000 ff83 	bl	8004c60 <vPortFree>
 8003d5a:	e001      	b.n	8003d60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	2300      	movs	r3, #0
 8003d72:	9303      	str	r3, [sp, #12]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	9302      	str	r3, [sp, #8]
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f80e 	bl	8003da6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d8a:	69f8      	ldr	r0, [r7, #28]
 8003d8c:	f000 f892 	bl	8003eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d90:	2301      	movs	r3, #1
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e002      	b.n	8003d9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
	}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b088      	sub	sp, #32
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f023 0307 	bic.w	r3, r3, #7
 8003dcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <prvInitialiseNewTask+0x48>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	617b      	str	r3, [r7, #20]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01f      	beq.n	8003e34 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e012      	b.n	8003e20 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	7819      	ldrb	r1, [r3, #0]
 8003e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	3334      	adds	r3, #52	; 0x34
 8003e0a:	460a      	mov	r2, r1
 8003e0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d9e9      	bls.n	8003dfa <prvInitialiseNewTask+0x54>
 8003e26:	e000      	b.n	8003e2a <prvInitialiseNewTask+0x84>
			{
				break;
 8003e28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e32:	e003      	b.n	8003e3c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d901      	bls.n	8003e46 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e42:	2306      	movs	r3, #6
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	2200      	movs	r2, #0
 8003e56:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fe6c 	bl	8003b3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	3318      	adds	r3, #24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fe67 	bl	8003b3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	f1c3 0207 	rsb	r2, r3, #7
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	2200      	movs	r2, #0
 8003e86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	69b8      	ldr	r0, [r7, #24]
 8003e96:	f000 fc05 	bl	80046a4 <pxPortInitialiseStack>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eac:	bf00      	nop
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ebc:	f000 fd22 	bl	8004904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <prvAddNewTaskToReadyList+0xb8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <prvAddNewTaskToReadyList+0xb8>)
 8003ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eca:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <prvAddNewTaskToReadyList+0xbc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ed2:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <prvAddNewTaskToReadyList+0xbc>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ed8:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <prvAddNewTaskToReadyList+0xb8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d110      	bne.n	8003f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ee0:	f000 fabc 	bl	800445c <prvInitialiseTaskLists>
 8003ee4:	e00d      	b.n	8003f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ee6:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <prvAddNewTaskToReadyList+0xc0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <prvAddNewTaskToReadyList+0xbc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d802      	bhi.n	8003f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003efc:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <prvAddNewTaskToReadyList+0xbc>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <prvAddNewTaskToReadyList+0xc4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3301      	adds	r3, #1
 8003f08:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <prvAddNewTaskToReadyList+0xc4>)
 8003f0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	2201      	movs	r2, #1
 8003f12:	409a      	lsls	r2, r3
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <prvAddNewTaskToReadyList+0xc8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <prvAddNewTaskToReadyList+0xc8>)
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <prvAddNewTaskToReadyList+0xcc>)
 8003f2c:	441a      	add	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7ff fe0d 	bl	8003b54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f3a:	f000 fd13 	bl	8004964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <prvAddNewTaskToReadyList+0xc0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00e      	beq.n	8003f64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <prvAddNewTaskToReadyList+0xbc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d207      	bcs.n	8003f64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <prvAddNewTaskToReadyList+0xd0>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000548 	.word	0x20000548
 8003f70:	20000448 	.word	0x20000448
 8003f74:	20000554 	.word	0x20000554
 8003f78:	20000564 	.word	0x20000564
 8003f7c:	20000550 	.word	0x20000550
 8003f80:	2000044c 	.word	0x2000044c
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d017      	beq.n	8003fca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f9a:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <vTaskDelay+0x60>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <vTaskDelay+0x30>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	60bb      	str	r3, [r7, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fb8:	f000 f87a 	bl	80040b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fb0a 	bl	80045d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fc4:	f000 f882 	bl	80040cc <xTaskResumeAll>
 8003fc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <vTaskDelay+0x64>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000570 	.word	0x20000570
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ffe:	463a      	mov	r2, r7
 8004000:	1d39      	adds	r1, r7, #4
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc fb42 	bl	8000690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800400c:	6839      	ldr	r1, [r7, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	9202      	str	r2, [sp, #8]
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	2300      	movs	r3, #0
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2300      	movs	r3, #0
 800401c:	460a      	mov	r2, r1
 800401e:	491e      	ldr	r1, [pc, #120]	; (8004098 <vTaskStartScheduler+0xa8>)
 8004020:	481e      	ldr	r0, [pc, #120]	; (800409c <vTaskStartScheduler+0xac>)
 8004022:	f7ff fe1e 	bl	8003c62 <xTaskCreateStatic>
 8004026:	4603      	mov	r3, r0
 8004028:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <vTaskStartScheduler+0xb0>)
 800402a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800402c:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <vTaskStartScheduler+0xb0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e001      	b.n	800403e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d116      	bne.n	8004072 <vTaskStartScheduler+0x82>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	613b      	str	r3, [r7, #16]
}
 8004056:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <vTaskStartScheduler+0xb4>)
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <vTaskStartScheduler+0xb8>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <vTaskStartScheduler+0xbc>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800406c:	f000 fba8 	bl	80047c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004070:	e00e      	b.n	8004090 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d10a      	bne.n	8004090 <vTaskStartScheduler+0xa0>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60fb      	str	r3, [r7, #12]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <vTaskStartScheduler+0x9e>
}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	080059a4 	.word	0x080059a4
 800409c:	0800442d 	.word	0x0800442d
 80040a0:	2000056c 	.word	0x2000056c
 80040a4:	20000568 	.word	0x20000568
 80040a8:	20000554 	.word	0x20000554
 80040ac:	2000054c 	.word	0x2000054c

080040b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <vTaskSuspendAll+0x18>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	4a03      	ldr	r2, [pc, #12]	; (80040c8 <vTaskSuspendAll+0x18>)
 80040bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	20000570 	.word	0x20000570

080040cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040da:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <xTaskResumeAll+0x114>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	603b      	str	r3, [r7, #0]
}
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040f8:	f000 fc04 	bl	8004904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040fc:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <xTaskResumeAll+0x114>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3b01      	subs	r3, #1
 8004102:	4a37      	ldr	r2, [pc, #220]	; (80041e0 <xTaskResumeAll+0x114>)
 8004104:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004106:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <xTaskResumeAll+0x114>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d161      	bne.n	80041d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800410e:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <xTaskResumeAll+0x118>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d05d      	beq.n	80041d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004116:	e02e      	b.n	8004176 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004118:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <xTaskResumeAll+0x11c>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3318      	adds	r3, #24
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fd72 	bl	8003c0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3304      	adds	r3, #4
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fd6d 	bl	8003c0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	2201      	movs	r2, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <xTaskResumeAll+0x120>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4313      	orrs	r3, r2
 8004142:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <xTaskResumeAll+0x120>)
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <xTaskResumeAll+0x124>)
 8004154:	441a      	add	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7ff fcf9 	bl	8003b54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <xTaskResumeAll+0x128>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004170:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <xTaskResumeAll+0x12c>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004176:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <xTaskResumeAll+0x11c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1cc      	bne.n	8004118 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004184:	f000 fa08 	bl	8004598 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <xTaskResumeAll+0x130>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d010      	beq.n	80041b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004194:	f000 f836 	bl	8004204 <xTaskIncrementTick>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800419e:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <xTaskResumeAll+0x12c>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f1      	bne.n	8004194 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <xTaskResumeAll+0x130>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <xTaskResumeAll+0x12c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041be:	2301      	movs	r3, #1
 80041c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041c2:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <xTaskResumeAll+0x134>)
 80041c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041d2:	f000 fbc7 	bl	8004964 <vPortExitCritical>

	return xAlreadyYielded;
 80041d6:	68bb      	ldr	r3, [r7, #8]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000570 	.word	0x20000570
 80041e4:	20000548 	.word	0x20000548
 80041e8:	20000508 	.word	0x20000508
 80041ec:	20000550 	.word	0x20000550
 80041f0:	2000044c 	.word	0x2000044c
 80041f4:	20000448 	.word	0x20000448
 80041f8:	2000055c 	.word	0x2000055c
 80041fc:	20000558 	.word	0x20000558
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800420e:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <xTaskIncrementTick+0x144>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 808e 	bne.w	8004334 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004218:	4b4c      	ldr	r3, [pc, #304]	; (800434c <xTaskIncrementTick+0x148>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004220:	4a4a      	ldr	r2, [pc, #296]	; (800434c <xTaskIncrementTick+0x148>)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d120      	bne.n	800426e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800422c:	4b48      	ldr	r3, [pc, #288]	; (8004350 <xTaskIncrementTick+0x14c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <xTaskIncrementTick+0x48>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	603b      	str	r3, [r7, #0]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <xTaskIncrementTick+0x46>
 800424c:	4b40      	ldr	r3, [pc, #256]	; (8004350 <xTaskIncrementTick+0x14c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b40      	ldr	r3, [pc, #256]	; (8004354 <xTaskIncrementTick+0x150>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a3e      	ldr	r2, [pc, #248]	; (8004350 <xTaskIncrementTick+0x14c>)
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4a3e      	ldr	r2, [pc, #248]	; (8004354 <xTaskIncrementTick+0x150>)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <xTaskIncrementTick+0x154>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	4a3c      	ldr	r2, [pc, #240]	; (8004358 <xTaskIncrementTick+0x154>)
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	f000 f995 	bl	8004598 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800426e:	4b3b      	ldr	r3, [pc, #236]	; (800435c <xTaskIncrementTick+0x158>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d348      	bcc.n	800430a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <xTaskIncrementTick+0x14c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d104      	bne.n	800428c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004282:	4b36      	ldr	r3, [pc, #216]	; (800435c <xTaskIncrementTick+0x158>)
 8004284:	f04f 32ff 	mov.w	r2, #4294967295
 8004288:	601a      	str	r2, [r3, #0]
					break;
 800428a:	e03e      	b.n	800430a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800428c:	4b30      	ldr	r3, [pc, #192]	; (8004350 <xTaskIncrementTick+0x14c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d203      	bcs.n	80042ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042a4:	4a2d      	ldr	r2, [pc, #180]	; (800435c <xTaskIncrementTick+0x158>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042aa:	e02e      	b.n	800430a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fcac 	bl	8003c0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3318      	adds	r3, #24
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fca3 	bl	8003c0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	2201      	movs	r2, #1
 80042ce:	409a      	lsls	r2, r3
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <xTaskIncrementTick+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	4a22      	ldr	r2, [pc, #136]	; (8004360 <xTaskIncrementTick+0x15c>)
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <xTaskIncrementTick+0x160>)
 80042e8:	441a      	add	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f7ff fc2f 	bl	8003b54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <xTaskIncrementTick+0x164>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	429a      	cmp	r2, r3
 8004302:	d3b9      	bcc.n	8004278 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004308:	e7b6      	b.n	8004278 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <xTaskIncrementTick+0x164>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	4914      	ldr	r1, [pc, #80]	; (8004364 <xTaskIncrementTick+0x160>)
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d901      	bls.n	8004326 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004322:	2301      	movs	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <xTaskIncrementTick+0x168>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800432e:	2301      	movs	r3, #1
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e004      	b.n	800433e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <xTaskIncrementTick+0x16c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <xTaskIncrementTick+0x16c>)
 800433c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800433e:	697b      	ldr	r3, [r7, #20]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000570 	.word	0x20000570
 800434c:	2000054c 	.word	0x2000054c
 8004350:	20000500 	.word	0x20000500
 8004354:	20000504 	.word	0x20000504
 8004358:	20000560 	.word	0x20000560
 800435c:	20000568 	.word	0x20000568
 8004360:	20000550 	.word	0x20000550
 8004364:	2000044c 	.word	0x2000044c
 8004368:	20000448 	.word	0x20000448
 800436c:	2000055c 	.word	0x2000055c
 8004370:	20000558 	.word	0x20000558

08004374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <vTaskSwitchContext+0xa4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <vTaskSwitchContext+0xa8>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004388:	e03f      	b.n	800440a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <vTaskSwitchContext+0xa8>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004390:	4b23      	ldr	r3, [pc, #140]	; (8004420 <vTaskSwitchContext+0xac>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800439e:	7afb      	ldrb	r3, [r7, #11]
 80043a0:	f1c3 031f 	rsb	r3, r3, #31
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	491f      	ldr	r1, [pc, #124]	; (8004424 <vTaskSwitchContext+0xb0>)
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	607b      	str	r3, [r7, #4]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <vTaskSwitchContext+0x5a>
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <vTaskSwitchContext+0xb0>)
 80043dc:	4413      	add	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3308      	adds	r3, #8
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d104      	bne.n	8004400 <vTaskSwitchContext+0x8c>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <vTaskSwitchContext+0xb4>)
 8004408:	6013      	str	r3, [r2, #0]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000570 	.word	0x20000570
 800441c:	2000055c 	.word	0x2000055c
 8004420:	20000550 	.word	0x20000550
 8004424:	2000044c 	.word	0x2000044c
 8004428:	20000448 	.word	0x20000448

0800442c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004434:	f000 f852 	bl	80044dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <prvIdleTask+0x28>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d9f9      	bls.n	8004434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <prvIdleTask+0x2c>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004450:	e7f0      	b.n	8004434 <prvIdleTask+0x8>
 8004452:	bf00      	nop
 8004454:	2000044c 	.word	0x2000044c
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	e00c      	b.n	8004482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a12      	ldr	r2, [pc, #72]	; (80044bc <prvInitialiseTaskLists+0x60>)
 8004474:	4413      	add	r3, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fb3f 	bl	8003afa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3301      	adds	r3, #1
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d9ef      	bls.n	8004468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004488:	480d      	ldr	r0, [pc, #52]	; (80044c0 <prvInitialiseTaskLists+0x64>)
 800448a:	f7ff fb36 	bl	8003afa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800448e:	480d      	ldr	r0, [pc, #52]	; (80044c4 <prvInitialiseTaskLists+0x68>)
 8004490:	f7ff fb33 	bl	8003afa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004494:	480c      	ldr	r0, [pc, #48]	; (80044c8 <prvInitialiseTaskLists+0x6c>)
 8004496:	f7ff fb30 	bl	8003afa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800449a:	480c      	ldr	r0, [pc, #48]	; (80044cc <prvInitialiseTaskLists+0x70>)
 800449c:	f7ff fb2d 	bl	8003afa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044a0:	480b      	ldr	r0, [pc, #44]	; (80044d0 <prvInitialiseTaskLists+0x74>)
 80044a2:	f7ff fb2a 	bl	8003afa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <prvInitialiseTaskLists+0x78>)
 80044a8:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <prvInitialiseTaskLists+0x64>)
 80044aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <prvInitialiseTaskLists+0x7c>)
 80044ae:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <prvInitialiseTaskLists+0x68>)
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000044c 	.word	0x2000044c
 80044c0:	200004d8 	.word	0x200004d8
 80044c4:	200004ec 	.word	0x200004ec
 80044c8:	20000508 	.word	0x20000508
 80044cc:	2000051c 	.word	0x2000051c
 80044d0:	20000534 	.word	0x20000534
 80044d4:	20000500 	.word	0x20000500
 80044d8:	20000504 	.word	0x20000504

080044dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e2:	e019      	b.n	8004518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044e4:	f000 fa0e 	bl	8004904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044e8:	4b10      	ldr	r3, [pc, #64]	; (800452c <prvCheckTasksWaitingTermination+0x50>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fb8a 	bl	8003c0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044fa:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <prvCheckTasksWaitingTermination+0x54>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <prvCheckTasksWaitingTermination+0x54>)
 8004502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <prvCheckTasksWaitingTermination+0x58>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3b01      	subs	r3, #1
 800450a:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <prvCheckTasksWaitingTermination+0x58>)
 800450c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800450e:	f000 fa29 	bl	8004964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f810 	bl	8004538 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <prvCheckTasksWaitingTermination+0x58>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e1      	bne.n	80044e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	2000051c 	.word	0x2000051c
 8004530:	20000548 	.word	0x20000548
 8004534:	20000530 	.word	0x20000530

08004538 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004546:	2b00      	cmp	r3, #0
 8004548:	d108      	bne.n	800455c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fb86 	bl	8004c60 <vPortFree>
				vPortFree( pxTCB );
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fb83 	bl	8004c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800455a:	e018      	b.n	800458e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004562:	2b01      	cmp	r3, #1
 8004564:	d103      	bne.n	800456e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fb7a 	bl	8004c60 <vPortFree>
	}
 800456c:	e00f      	b.n	800458e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004574:	2b02      	cmp	r3, #2
 8004576:	d00a      	beq.n	800458e <prvDeleteTCB+0x56>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60fb      	str	r3, [r7, #12]
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <prvDeleteTCB+0x54>
	}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <prvResetNextTaskUnblockTime+0x38>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <prvResetNextTaskUnblockTime+0x3c>)
 80045aa:	f04f 32ff 	mov.w	r2, #4294967295
 80045ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045b0:	e008      	b.n	80045c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <prvResetNextTaskUnblockTime+0x38>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <prvResetNextTaskUnblockTime+0x3c>)
 80045c2:	6013      	str	r3, [r2, #0]
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000500 	.word	0x20000500
 80045d4:	20000568 	.word	0x20000568

080045d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045e2:	4b29      	ldr	r3, [pc, #164]	; (8004688 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fb0d 	bl	8003c0e <uxListRemove>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80045fa:	4b24      	ldr	r3, [pc, #144]	; (800468c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	2201      	movs	r2, #1
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43da      	mvns	r2, r3
 8004608:	4b21      	ldr	r3, [pc, #132]	; (8004690 <prvAddCurrentTaskToDelayedList+0xb8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4013      	ands	r3, r2
 800460e:	4a20      	ldr	r2, [pc, #128]	; (8004690 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004610:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d10a      	bne.n	8004630 <prvAddCurrentTaskToDelayedList+0x58>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	481a      	ldr	r0, [pc, #104]	; (8004694 <prvAddCurrentTaskToDelayedList+0xbc>)
 800462a:	f7ff fa93 	bl	8003b54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800462e:	e026      	b.n	800467e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004638:	4b14      	ldr	r3, [pc, #80]	; (800468c <prvAddCurrentTaskToDelayedList+0xb4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	429a      	cmp	r2, r3
 8004646:	d209      	bcs.n	800465c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <prvAddCurrentTaskToDelayedList+0xc0>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <prvAddCurrentTaskToDelayedList+0xb4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7ff faa1 	bl	8003b9c <vListInsert>
}
 800465a:	e010      	b.n	800467e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <prvAddCurrentTaskToDelayedList+0xc4>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7ff fa97 	bl	8003b9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d202      	bcs.n	800467e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004678:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6013      	str	r3, [r2, #0]
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	2000054c 	.word	0x2000054c
 800468c:	20000448 	.word	0x20000448
 8004690:	20000550 	.word	0x20000550
 8004694:	20000534 	.word	0x20000534
 8004698:	20000504 	.word	0x20000504
 800469c:	20000500 	.word	0x20000500
 80046a0:	20000568 	.word	0x20000568

080046a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3b04      	subs	r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3b04      	subs	r3, #4
 80046c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f023 0201 	bic.w	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3b04      	subs	r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046d4:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <pxPortInitialiseStack+0x64>)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b14      	subs	r3, #20
 80046de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b04      	subs	r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f06f 0202 	mvn.w	r2, #2
 80046f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3b20      	subs	r3, #32
 80046f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	0800470d 	.word	0x0800470d

0800470c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <prvTaskExitError+0x54>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d00a      	beq.n	8004736 <prvTaskExitError+0x2a>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	60fb      	str	r3, [r7, #12]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <prvTaskExitError+0x28>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60bb      	str	r3, [r7, #8]
}
 8004748:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800474a:	bf00      	nop
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0fc      	beq.n	800474c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	2000000c 	.word	0x2000000c
	...

08004770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <pxCurrentTCBConst2>)
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	f380 8809 	msr	PSP, r0
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	4770      	bx	lr
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst2>:
 8004790:	20000448 	.word	0x20000448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <prvPortStartFirstTask+0x24>)
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	6800      	ldr	r0, [r0, #0]
 800479e:	f380 8808 	msr	MSP, r0
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8814 	msr	CONTROL, r0
 80047aa:	b662      	cpsie	i
 80047ac:	b661      	cpsie	f
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	df00      	svc	0
 80047b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ba:	bf00      	nop
 80047bc:	e000ed08 	.word	0xe000ed08

080047c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047c6:	4b46      	ldr	r3, [pc, #280]	; (80048e0 <xPortStartScheduler+0x120>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a46      	ldr	r2, [pc, #280]	; (80048e4 <xPortStartScheduler+0x124>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10a      	bne.n	80047e6 <xPortStartScheduler+0x26>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	613b      	str	r3, [r7, #16]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047e6:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <xPortStartScheduler+0x120>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3f      	ldr	r2, [pc, #252]	; (80048e8 <xPortStartScheduler+0x128>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10a      	bne.n	8004806 <xPortStartScheduler+0x46>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60fb      	str	r3, [r7, #12]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <xPortStartScheduler+0x12c>)
 8004808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	22ff      	movs	r2, #255	; 0xff
 8004816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <xPortStartScheduler+0x130>)
 800482c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800482e:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <xPortStartScheduler+0x134>)
 8004830:	2207      	movs	r2, #7
 8004832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004834:	e009      	b.n	800484a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004836:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <xPortStartScheduler+0x134>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3b01      	subs	r3, #1
 800483c:	4a2d      	ldr	r2, [pc, #180]	; (80048f4 <xPortStartScheduler+0x134>)
 800483e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d0ef      	beq.n	8004836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <xPortStartScheduler+0x134>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1c3 0307 	rsb	r3, r3, #7
 800485e:	2b04      	cmp	r3, #4
 8004860:	d00a      	beq.n	8004878 <xPortStartScheduler+0xb8>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60bb      	str	r3, [r7, #8]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004878:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <xPortStartScheduler+0x134>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <xPortStartScheduler+0x134>)
 8004880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <xPortStartScheduler+0x134>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800488a:	4a1a      	ldr	r2, [pc, #104]	; (80048f4 <xPortStartScheduler+0x134>)
 800488c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004896:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <xPortStartScheduler+0x138>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <xPortStartScheduler+0x138>)
 800489c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <xPortStartScheduler+0x138>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <xPortStartScheduler+0x138>)
 80048a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048ae:	f000 f8dd 	bl	8004a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <xPortStartScheduler+0x13c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048b8:	f000 f8fc 	bl	8004ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048bc:	4b10      	ldr	r3, [pc, #64]	; (8004900 <xPortStartScheduler+0x140>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0f      	ldr	r2, [pc, #60]	; (8004900 <xPortStartScheduler+0x140>)
 80048c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048c8:	f7ff ff66 	bl	8004798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048cc:	f7ff fd52 	bl	8004374 <vTaskSwitchContext>
	prvTaskExitError();
 80048d0:	f7ff ff1c 	bl	800470c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	e000ed00 	.word	0xe000ed00
 80048e4:	410fc271 	.word	0x410fc271
 80048e8:	410fc270 	.word	0x410fc270
 80048ec:	e000e400 	.word	0xe000e400
 80048f0:	20000574 	.word	0x20000574
 80048f4:	20000578 	.word	0x20000578
 80048f8:	e000ed20 	.word	0xe000ed20
 80048fc:	2000000c 	.word	0x2000000c
 8004900:	e000ef34 	.word	0xe000ef34

08004904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	607b      	str	r3, [r7, #4]
}
 800491c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <vPortEnterCritical+0x58>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a0d      	ldr	r2, [pc, #52]	; (800495c <vPortEnterCritical+0x58>)
 8004926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <vPortEnterCritical+0x58>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10f      	bne.n	8004950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortEnterCritical+0x5c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <vPortEnterCritical+0x4c>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <vPortEnterCritical+0x4a>
	}
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	2000000c 	.word	0x2000000c
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <vPortExitCritical+0x50>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <vPortExitCritical+0x24>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	607b      	str	r3, [r7, #4]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <vPortExitCritical+0x50>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3b01      	subs	r3, #1
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <vPortExitCritical+0x50>)
 8004990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <vPortExitCritical+0x50>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <vPortExitCritical+0x42>
 800499a:	2300      	movs	r3, #0
 800499c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000000c 	.word	0x2000000c
	...

080049c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049c0:	f3ef 8009 	mrs	r0, PSP
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <pxCurrentTCBConst>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	f01e 0f10 	tst.w	lr, #16
 80049d0:	bf08      	it	eq
 80049d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049da:	6010      	str	r0, [r2, #0]
 80049dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049e4:	f380 8811 	msr	BASEPRI, r0
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f7ff fcc0 	bl	8004374 <vTaskSwitchContext>
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f380 8811 	msr	BASEPRI, r0
 80049fc:	bc09      	pop	{r0, r3}
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	6808      	ldr	r0, [r1, #0]
 8004a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a06:	f01e 0f10 	tst.w	lr, #16
 8004a0a:	bf08      	it	eq
 8004a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a10:	f380 8809 	msr	PSP, r0
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst>:
 8004a20:	20000448 	.word	0x20000448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	607b      	str	r3, [r7, #4]
}
 8004a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a42:	f7ff fbdf 	bl	8004204 <xTaskIncrementTick>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <SysTick_Handler+0x40>)
 8004a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f383 8811 	msr	BASEPRI, r3
}
 8004a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <vPortSetupTimerInterrupt+0x34>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <vPortSetupTimerInterrupt+0x38>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <vPortSetupTimerInterrupt+0x3c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <vPortSetupTimerInterrupt+0x40>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <vPortSetupTimerInterrupt+0x44>)
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a8e:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <vPortSetupTimerInterrupt+0x34>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e010 	.word	0xe000e010
 8004aa4:	e000e018 	.word	0xe000e018
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	10624dd3 	.word	0x10624dd3
 8004ab0:	e000e014 	.word	0xe000e014

08004ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ac4 <vPortEnableVFP+0x10>
 8004ab8:	6801      	ldr	r1, [r0, #0]
 8004aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004abe:	6001      	str	r1, [r0, #0]
 8004ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ac2:	bf00      	nop
 8004ac4:	e000ed88 	.word	0xe000ed88

08004ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ad4:	f7ff faec 	bl	80040b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ad8:	4b5b      	ldr	r3, [pc, #364]	; (8004c48 <pvPortMalloc+0x180>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ae0:	f000 f920 	bl	8004d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <pvPortMalloc+0x184>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 8093 	bne.w	8004c18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01d      	beq.n	8004b34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004af8:	2208      	movs	r2, #8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d014      	beq.n	8004b34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f023 0307 	bic.w	r3, r3, #7
 8004b10:	3308      	adds	r3, #8
 8004b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <pvPortMalloc+0x6c>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	617b      	str	r3, [r7, #20]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d06e      	beq.n	8004c18 <pvPortMalloc+0x150>
 8004b3a:	4b45      	ldr	r3, [pc, #276]	; (8004c50 <pvPortMalloc+0x188>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d869      	bhi.n	8004c18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b44:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <pvPortMalloc+0x18c>)
 8004b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <pvPortMalloc+0x18c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b4e:	e004      	b.n	8004b5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d903      	bls.n	8004b6c <pvPortMalloc+0xa4>
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f1      	bne.n	8004b50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b6c:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <pvPortMalloc+0x180>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d050      	beq.n	8004c18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad2      	subs	r2, r2, r3
 8004b90:	2308      	movs	r3, #8
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d91f      	bls.n	8004bd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <pvPortMalloc+0xf8>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	613b      	str	r3, [r7, #16]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1ad2      	subs	r2, r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bd2:	69b8      	ldr	r0, [r7, #24]
 8004bd4:	f000 f908 	bl	8004de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <pvPortMalloc+0x188>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <pvPortMalloc+0x188>)
 8004be4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004be6:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <pvPortMalloc+0x188>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <pvPortMalloc+0x190>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d203      	bcs.n	8004bfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <pvPortMalloc+0x188>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <pvPortMalloc+0x190>)
 8004bf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <pvPortMalloc+0x184>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <pvPortMalloc+0x194>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <pvPortMalloc+0x194>)
 8004c16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c18:	f7ff fa58 	bl	80040cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <pvPortMalloc+0x174>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60fb      	str	r3, [r7, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <pvPortMalloc+0x172>
	return pvReturn;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	2000113c 	.word	0x2000113c
 8004c4c:	20001150 	.word	0x20001150
 8004c50:	20001140 	.word	0x20001140
 8004c54:	20001134 	.word	0x20001134
 8004c58:	20001144 	.word	0x20001144
 8004c5c:	20001148 	.word	0x20001148

08004c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d04d      	beq.n	8004d0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c72:	2308      	movs	r3, #8
 8004c74:	425b      	negs	r3, r3
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <vPortFree+0xb8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <vPortFree+0x44>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60fb      	str	r3, [r7, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <vPortFree+0x62>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	60bb      	str	r3, [r7, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <vPortFree+0xb8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01e      	beq.n	8004d0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11a      	bne.n	8004d0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <vPortFree+0xb8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ce8:	f7ff f9e2 	bl	80040b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <vPortFree+0xbc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <vPortFree+0xbc>)
 8004cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cfa:	6938      	ldr	r0, [r7, #16]
 8004cfc:	f000 f874 	bl	8004de8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <vPortFree+0xc0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <vPortFree+0xc0>)
 8004d08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d0a:	f7ff f9df 	bl	80040cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20001150 	.word	0x20001150
 8004d1c:	20001140 	.word	0x20001140
 8004d20:	2000114c 	.word	0x2000114c

08004d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d30:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <prvHeapInit+0xac>)
 8004d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3307      	adds	r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <prvHeapInit+0xac>)
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d70:	2208      	movs	r2, #8
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvHeapInit+0xb4>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <prvHeapInit+0xb8>)
 8004db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <prvHeapInit+0xbc>)
 8004dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <prvHeapInit+0xc0>)
 8004dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	2000057c 	.word	0x2000057c
 8004dd4:	20001134 	.word	0x20001134
 8004dd8:	2000113c 	.word	0x2000113c
 8004ddc:	20001144 	.word	0x20001144
 8004de0:	20001140 	.word	0x20001140
 8004de4:	20001150 	.word	0x20001150

08004de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <prvInsertBlockIntoFreeList+0xac>)
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e002      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x14>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d8f7      	bhi.n	8004df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d108      	bne.n	8004e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	441a      	add	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d118      	bne.n	8004e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d00d      	beq.n	8004e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e008      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e003      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d002      	beq.n	8004e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20001134 	.word	0x20001134
 8004e98:	2000113c 	.word	0x2000113c

08004e9c <std>:
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eaa:	6083      	str	r3, [r0, #8]
 8004eac:	8181      	strh	r1, [r0, #12]
 8004eae:	6643      	str	r3, [r0, #100]	; 0x64
 8004eb0:	81c2      	strh	r2, [r0, #14]
 8004eb2:	6183      	str	r3, [r0, #24]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	2208      	movs	r2, #8
 8004eb8:	305c      	adds	r0, #92	; 0x5c
 8004eba:	f000 fa93 	bl	80053e4 <memset>
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <std+0x58>)
 8004ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <std+0x5c>)
 8004ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <std+0x60>)
 8004ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <std+0x64>)
 8004ecc:	6323      	str	r3, [r4, #48]	; 0x30
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <std+0x68>)
 8004ed0:	6224      	str	r4, [r4, #32]
 8004ed2:	429c      	cmp	r4, r3
 8004ed4:	d006      	beq.n	8004ee4 <std+0x48>
 8004ed6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004eda:	4294      	cmp	r4, r2
 8004edc:	d002      	beq.n	8004ee4 <std+0x48>
 8004ede:	33d0      	adds	r3, #208	; 0xd0
 8004ee0:	429c      	cmp	r4, r3
 8004ee2:	d105      	bne.n	8004ef0 <std+0x54>
 8004ee4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eec:	f000 baf2 	b.w	80054d4 <__retarget_lock_init_recursive>
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	bf00      	nop
 8004ef4:	08005235 	.word	0x08005235
 8004ef8:	08005257 	.word	0x08005257
 8004efc:	0800528f 	.word	0x0800528f
 8004f00:	080052b3 	.word	0x080052b3
 8004f04:	20001154 	.word	0x20001154

08004f08 <stdio_exit_handler>:
 8004f08:	4a02      	ldr	r2, [pc, #8]	; (8004f14 <stdio_exit_handler+0xc>)
 8004f0a:	4903      	ldr	r1, [pc, #12]	; (8004f18 <stdio_exit_handler+0x10>)
 8004f0c:	4803      	ldr	r0, [pc, #12]	; (8004f1c <stdio_exit_handler+0x14>)
 8004f0e:	f000 b869 	b.w	8004fe4 <_fwalk_sglue>
 8004f12:	bf00      	nop
 8004f14:	20000010 	.word	0x20000010
 8004f18:	080057e9 	.word	0x080057e9
 8004f1c:	2000001c 	.word	0x2000001c

08004f20 <cleanup_stdio>:
 8004f20:	6841      	ldr	r1, [r0, #4]
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <cleanup_stdio+0x34>)
 8004f24:	4299      	cmp	r1, r3
 8004f26:	b510      	push	{r4, lr}
 8004f28:	4604      	mov	r4, r0
 8004f2a:	d001      	beq.n	8004f30 <cleanup_stdio+0x10>
 8004f2c:	f000 fc5c 	bl	80057e8 <_fflush_r>
 8004f30:	68a1      	ldr	r1, [r4, #8]
 8004f32:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <cleanup_stdio+0x38>)
 8004f34:	4299      	cmp	r1, r3
 8004f36:	d002      	beq.n	8004f3e <cleanup_stdio+0x1e>
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 fc55 	bl	80057e8 <_fflush_r>
 8004f3e:	68e1      	ldr	r1, [r4, #12]
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <cleanup_stdio+0x3c>)
 8004f42:	4299      	cmp	r1, r3
 8004f44:	d004      	beq.n	8004f50 <cleanup_stdio+0x30>
 8004f46:	4620      	mov	r0, r4
 8004f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f4c:	f000 bc4c 	b.w	80057e8 <_fflush_r>
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	bf00      	nop
 8004f54:	20001154 	.word	0x20001154
 8004f58:	200011bc 	.word	0x200011bc
 8004f5c:	20001224 	.word	0x20001224

08004f60 <global_stdio_init.part.0>:
 8004f60:	b510      	push	{r4, lr}
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <global_stdio_init.part.0+0x30>)
 8004f64:	4c0b      	ldr	r4, [pc, #44]	; (8004f94 <global_stdio_init.part.0+0x34>)
 8004f66:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <global_stdio_init.part.0+0x38>)
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2104      	movs	r1, #4
 8004f70:	f7ff ff94 	bl	8004e9c <std>
 8004f74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f78:	2201      	movs	r2, #1
 8004f7a:	2109      	movs	r1, #9
 8004f7c:	f7ff ff8e 	bl	8004e9c <std>
 8004f80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f84:	2202      	movs	r2, #2
 8004f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f8a:	2112      	movs	r1, #18
 8004f8c:	f7ff bf86 	b.w	8004e9c <std>
 8004f90:	2000128c 	.word	0x2000128c
 8004f94:	20001154 	.word	0x20001154
 8004f98:	08004f09 	.word	0x08004f09

08004f9c <__sfp_lock_acquire>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__sfp_lock_acquire+0x8>)
 8004f9e:	f000 ba9a 	b.w	80054d6 <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	20001295 	.word	0x20001295

08004fa8 <__sfp_lock_release>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sfp_lock_release+0x8>)
 8004faa:	f000 ba95 	b.w	80054d8 <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20001295 	.word	0x20001295

08004fb4 <__sinit>:
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	f7ff fff0 	bl	8004f9c <__sfp_lock_acquire>
 8004fbc:	6a23      	ldr	r3, [r4, #32]
 8004fbe:	b11b      	cbz	r3, 8004fc8 <__sinit+0x14>
 8004fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc4:	f7ff bff0 	b.w	8004fa8 <__sfp_lock_release>
 8004fc8:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <__sinit+0x28>)
 8004fca:	6223      	str	r3, [r4, #32]
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <__sinit+0x2c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f5      	bne.n	8004fc0 <__sinit+0xc>
 8004fd4:	f7ff ffc4 	bl	8004f60 <global_stdio_init.part.0>
 8004fd8:	e7f2      	b.n	8004fc0 <__sinit+0xc>
 8004fda:	bf00      	nop
 8004fdc:	08004f21 	.word	0x08004f21
 8004fe0:	2000128c 	.word	0x2000128c

08004fe4 <_fwalk_sglue>:
 8004fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe8:	4607      	mov	r7, r0
 8004fea:	4688      	mov	r8, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	2600      	movs	r6, #0
 8004ff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ff4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ff8:	d505      	bpl.n	8005006 <_fwalk_sglue+0x22>
 8004ffa:	6824      	ldr	r4, [r4, #0]
 8004ffc:	2c00      	cmp	r4, #0
 8004ffe:	d1f7      	bne.n	8004ff0 <_fwalk_sglue+0xc>
 8005000:	4630      	mov	r0, r6
 8005002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005006:	89ab      	ldrh	r3, [r5, #12]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d907      	bls.n	800501c <_fwalk_sglue+0x38>
 800500c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005010:	3301      	adds	r3, #1
 8005012:	d003      	beq.n	800501c <_fwalk_sglue+0x38>
 8005014:	4629      	mov	r1, r5
 8005016:	4638      	mov	r0, r7
 8005018:	47c0      	blx	r8
 800501a:	4306      	orrs	r6, r0
 800501c:	3568      	adds	r5, #104	; 0x68
 800501e:	e7e9      	b.n	8004ff4 <_fwalk_sglue+0x10>

08005020 <_puts_r>:
 8005020:	6a03      	ldr	r3, [r0, #32]
 8005022:	b570      	push	{r4, r5, r6, lr}
 8005024:	6884      	ldr	r4, [r0, #8]
 8005026:	4605      	mov	r5, r0
 8005028:	460e      	mov	r6, r1
 800502a:	b90b      	cbnz	r3, 8005030 <_puts_r+0x10>
 800502c:	f7ff ffc2 	bl	8004fb4 <__sinit>
 8005030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005032:	07db      	lsls	r3, r3, #31
 8005034:	d405      	bmi.n	8005042 <_puts_r+0x22>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	0598      	lsls	r0, r3, #22
 800503a:	d402      	bmi.n	8005042 <_puts_r+0x22>
 800503c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503e:	f000 fa4a 	bl	80054d6 <__retarget_lock_acquire_recursive>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	0719      	lsls	r1, r3, #28
 8005046:	d513      	bpl.n	8005070 <_puts_r+0x50>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	b18b      	cbz	r3, 8005070 <_puts_r+0x50>
 800504c:	3e01      	subs	r6, #1
 800504e:	68a3      	ldr	r3, [r4, #8]
 8005050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005054:	3b01      	subs	r3, #1
 8005056:	60a3      	str	r3, [r4, #8]
 8005058:	b9e9      	cbnz	r1, 8005096 <_puts_r+0x76>
 800505a:	2b00      	cmp	r3, #0
 800505c:	da2e      	bge.n	80050bc <_puts_r+0x9c>
 800505e:	4622      	mov	r2, r4
 8005060:	210a      	movs	r1, #10
 8005062:	4628      	mov	r0, r5
 8005064:	f000 f929 	bl	80052ba <__swbuf_r>
 8005068:	3001      	adds	r0, #1
 800506a:	d007      	beq.n	800507c <_puts_r+0x5c>
 800506c:	250a      	movs	r5, #10
 800506e:	e007      	b.n	8005080 <_puts_r+0x60>
 8005070:	4621      	mov	r1, r4
 8005072:	4628      	mov	r0, r5
 8005074:	f000 f95e 	bl	8005334 <__swsetup_r>
 8005078:	2800      	cmp	r0, #0
 800507a:	d0e7      	beq.n	800504c <_puts_r+0x2c>
 800507c:	f04f 35ff 	mov.w	r5, #4294967295
 8005080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005082:	07da      	lsls	r2, r3, #31
 8005084:	d405      	bmi.n	8005092 <_puts_r+0x72>
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	059b      	lsls	r3, r3, #22
 800508a:	d402      	bmi.n	8005092 <_puts_r+0x72>
 800508c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800508e:	f000 fa23 	bl	80054d8 <__retarget_lock_release_recursive>
 8005092:	4628      	mov	r0, r5
 8005094:	bd70      	pop	{r4, r5, r6, pc}
 8005096:	2b00      	cmp	r3, #0
 8005098:	da04      	bge.n	80050a4 <_puts_r+0x84>
 800509a:	69a2      	ldr	r2, [r4, #24]
 800509c:	429a      	cmp	r2, r3
 800509e:	dc06      	bgt.n	80050ae <_puts_r+0x8e>
 80050a0:	290a      	cmp	r1, #10
 80050a2:	d004      	beq.n	80050ae <_puts_r+0x8e>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	6022      	str	r2, [r4, #0]
 80050aa:	7019      	strb	r1, [r3, #0]
 80050ac:	e7cf      	b.n	800504e <_puts_r+0x2e>
 80050ae:	4622      	mov	r2, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f902 	bl	80052ba <__swbuf_r>
 80050b6:	3001      	adds	r0, #1
 80050b8:	d1c9      	bne.n	800504e <_puts_r+0x2e>
 80050ba:	e7df      	b.n	800507c <_puts_r+0x5c>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	250a      	movs	r5, #10
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	6022      	str	r2, [r4, #0]
 80050c4:	701d      	strb	r5, [r3, #0]
 80050c6:	e7db      	b.n	8005080 <_puts_r+0x60>

080050c8 <puts>:
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <puts+0xc>)
 80050ca:	4601      	mov	r1, r0
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	f7ff bfa7 	b.w	8005020 <_puts_r>
 80050d2:	bf00      	nop
 80050d4:	20000068 	.word	0x20000068

080050d8 <setvbuf>:
 80050d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050dc:	461d      	mov	r5, r3
 80050de:	4b54      	ldr	r3, [pc, #336]	; (8005230 <setvbuf+0x158>)
 80050e0:	681f      	ldr	r7, [r3, #0]
 80050e2:	4604      	mov	r4, r0
 80050e4:	460e      	mov	r6, r1
 80050e6:	4690      	mov	r8, r2
 80050e8:	b127      	cbz	r7, 80050f4 <setvbuf+0x1c>
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	b913      	cbnz	r3, 80050f4 <setvbuf+0x1c>
 80050ee:	4638      	mov	r0, r7
 80050f0:	f7ff ff60 	bl	8004fb4 <__sinit>
 80050f4:	f1b8 0f02 	cmp.w	r8, #2
 80050f8:	d006      	beq.n	8005108 <setvbuf+0x30>
 80050fa:	f1b8 0f01 	cmp.w	r8, #1
 80050fe:	f200 8094 	bhi.w	800522a <setvbuf+0x152>
 8005102:	2d00      	cmp	r5, #0
 8005104:	f2c0 8091 	blt.w	800522a <setvbuf+0x152>
 8005108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800510a:	07da      	lsls	r2, r3, #31
 800510c:	d405      	bmi.n	800511a <setvbuf+0x42>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	059b      	lsls	r3, r3, #22
 8005112:	d402      	bmi.n	800511a <setvbuf+0x42>
 8005114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005116:	f000 f9de 	bl	80054d6 <__retarget_lock_acquire_recursive>
 800511a:	4621      	mov	r1, r4
 800511c:	4638      	mov	r0, r7
 800511e:	f000 fb63 	bl	80057e8 <_fflush_r>
 8005122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005124:	b141      	cbz	r1, 8005138 <setvbuf+0x60>
 8005126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800512a:	4299      	cmp	r1, r3
 800512c:	d002      	beq.n	8005134 <setvbuf+0x5c>
 800512e:	4638      	mov	r0, r7
 8005130:	f000 f9d4 	bl	80054dc <_free_r>
 8005134:	2300      	movs	r3, #0
 8005136:	6363      	str	r3, [r4, #52]	; 0x34
 8005138:	2300      	movs	r3, #0
 800513a:	61a3      	str	r3, [r4, #24]
 800513c:	6063      	str	r3, [r4, #4]
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	0618      	lsls	r0, r3, #24
 8005142:	d503      	bpl.n	800514c <setvbuf+0x74>
 8005144:	6921      	ldr	r1, [r4, #16]
 8005146:	4638      	mov	r0, r7
 8005148:	f000 f9c8 	bl	80054dc <_free_r>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	f1b8 0f02 	cmp.w	r8, #2
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	d05f      	beq.n	800521e <setvbuf+0x146>
 800515e:	ab01      	add	r3, sp, #4
 8005160:	466a      	mov	r2, sp
 8005162:	4621      	mov	r1, r4
 8005164:	4638      	mov	r0, r7
 8005166:	f000 fb67 	bl	8005838 <__swhatbuf_r>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	4318      	orrs	r0, r3
 800516e:	81a0      	strh	r0, [r4, #12]
 8005170:	bb2d      	cbnz	r5, 80051be <setvbuf+0xe6>
 8005172:	9d00      	ldr	r5, [sp, #0]
 8005174:	4628      	mov	r0, r5
 8005176:	f000 f9fd 	bl	8005574 <malloc>
 800517a:	4606      	mov	r6, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d150      	bne.n	8005222 <setvbuf+0x14a>
 8005180:	f8dd 9000 	ldr.w	r9, [sp]
 8005184:	45a9      	cmp	r9, r5
 8005186:	d13e      	bne.n	8005206 <setvbuf+0x12e>
 8005188:	f04f 35ff 	mov.w	r5, #4294967295
 800518c:	2200      	movs	r2, #0
 800518e:	60a2      	str	r2, [r4, #8]
 8005190:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005194:	6022      	str	r2, [r4, #0]
 8005196:	6122      	str	r2, [r4, #16]
 8005198:	2201      	movs	r2, #1
 800519a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800519e:	6162      	str	r2, [r4, #20]
 80051a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	07d1      	lsls	r1, r2, #31
 80051a8:	81a3      	strh	r3, [r4, #12]
 80051aa:	d404      	bmi.n	80051b6 <setvbuf+0xde>
 80051ac:	059b      	lsls	r3, r3, #22
 80051ae:	d402      	bmi.n	80051b6 <setvbuf+0xde>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f000 f991 	bl	80054d8 <__retarget_lock_release_recursive>
 80051b6:	4628      	mov	r0, r5
 80051b8:	b003      	add	sp, #12
 80051ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051be:	2e00      	cmp	r6, #0
 80051c0:	d0d8      	beq.n	8005174 <setvbuf+0x9c>
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	b913      	cbnz	r3, 80051cc <setvbuf+0xf4>
 80051c6:	4638      	mov	r0, r7
 80051c8:	f7ff fef4 	bl	8004fb4 <__sinit>
 80051cc:	f1b8 0f01 	cmp.w	r8, #1
 80051d0:	bf08      	it	eq
 80051d2:	89a3      	ldrheq	r3, [r4, #12]
 80051d4:	6026      	str	r6, [r4, #0]
 80051d6:	bf04      	itt	eq
 80051d8:	f043 0301 	orreq.w	r3, r3, #1
 80051dc:	81a3      	strheq	r3, [r4, #12]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f013 0208 	ands.w	r2, r3, #8
 80051e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80051e8:	d01d      	beq.n	8005226 <setvbuf+0x14e>
 80051ea:	07da      	lsls	r2, r3, #31
 80051ec:	bf41      	itttt	mi
 80051ee:	2200      	movmi	r2, #0
 80051f0:	426d      	negmi	r5, r5
 80051f2:	60a2      	strmi	r2, [r4, #8]
 80051f4:	61a5      	strmi	r5, [r4, #24]
 80051f6:	bf58      	it	pl
 80051f8:	60a5      	strpl	r5, [r4, #8]
 80051fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80051fc:	f015 0501 	ands.w	r5, r5, #1
 8005200:	d0d4      	beq.n	80051ac <setvbuf+0xd4>
 8005202:	2500      	movs	r5, #0
 8005204:	e7d7      	b.n	80051b6 <setvbuf+0xde>
 8005206:	4648      	mov	r0, r9
 8005208:	f000 f9b4 	bl	8005574 <malloc>
 800520c:	4606      	mov	r6, r0
 800520e:	2800      	cmp	r0, #0
 8005210:	d0ba      	beq.n	8005188 <setvbuf+0xb0>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005218:	81a3      	strh	r3, [r4, #12]
 800521a:	464d      	mov	r5, r9
 800521c:	e7d1      	b.n	80051c2 <setvbuf+0xea>
 800521e:	2500      	movs	r5, #0
 8005220:	e7b4      	b.n	800518c <setvbuf+0xb4>
 8005222:	46a9      	mov	r9, r5
 8005224:	e7f5      	b.n	8005212 <setvbuf+0x13a>
 8005226:	60a2      	str	r2, [r4, #8]
 8005228:	e7e7      	b.n	80051fa <setvbuf+0x122>
 800522a:	f04f 35ff 	mov.w	r5, #4294967295
 800522e:	e7c2      	b.n	80051b6 <setvbuf+0xde>
 8005230:	20000068 	.word	0x20000068

08005234 <__sread>:
 8005234:	b510      	push	{r4, lr}
 8005236:	460c      	mov	r4, r1
 8005238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800523c:	f000 f8fc 	bl	8005438 <_read_r>
 8005240:	2800      	cmp	r0, #0
 8005242:	bfab      	itete	ge
 8005244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005246:	89a3      	ldrhlt	r3, [r4, #12]
 8005248:	181b      	addge	r3, r3, r0
 800524a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800524e:	bfac      	ite	ge
 8005250:	6563      	strge	r3, [r4, #84]	; 0x54
 8005252:	81a3      	strhlt	r3, [r4, #12]
 8005254:	bd10      	pop	{r4, pc}

08005256 <__swrite>:
 8005256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525a:	461f      	mov	r7, r3
 800525c:	898b      	ldrh	r3, [r1, #12]
 800525e:	05db      	lsls	r3, r3, #23
 8005260:	4605      	mov	r5, r0
 8005262:	460c      	mov	r4, r1
 8005264:	4616      	mov	r6, r2
 8005266:	d505      	bpl.n	8005274 <__swrite+0x1e>
 8005268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526c:	2302      	movs	r3, #2
 800526e:	2200      	movs	r2, #0
 8005270:	f000 f8d0 	bl	8005414 <_lseek_r>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800527a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	4632      	mov	r2, r6
 8005282:	463b      	mov	r3, r7
 8005284:	4628      	mov	r0, r5
 8005286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800528a:	f000 b8e7 	b.w	800545c <_write_r>

0800528e <__sseek>:
 800528e:	b510      	push	{r4, lr}
 8005290:	460c      	mov	r4, r1
 8005292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005296:	f000 f8bd 	bl	8005414 <_lseek_r>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	bf15      	itete	ne
 80052a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052aa:	81a3      	strheq	r3, [r4, #12]
 80052ac:	bf18      	it	ne
 80052ae:	81a3      	strhne	r3, [r4, #12]
 80052b0:	bd10      	pop	{r4, pc}

080052b2 <__sclose>:
 80052b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b6:	f000 b89d 	b.w	80053f4 <_close_r>

080052ba <__swbuf_r>:
 80052ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052bc:	460e      	mov	r6, r1
 80052be:	4614      	mov	r4, r2
 80052c0:	4605      	mov	r5, r0
 80052c2:	b118      	cbz	r0, 80052cc <__swbuf_r+0x12>
 80052c4:	6a03      	ldr	r3, [r0, #32]
 80052c6:	b90b      	cbnz	r3, 80052cc <__swbuf_r+0x12>
 80052c8:	f7ff fe74 	bl	8004fb4 <__sinit>
 80052cc:	69a3      	ldr	r3, [r4, #24]
 80052ce:	60a3      	str	r3, [r4, #8]
 80052d0:	89a3      	ldrh	r3, [r4, #12]
 80052d2:	071a      	lsls	r2, r3, #28
 80052d4:	d525      	bpl.n	8005322 <__swbuf_r+0x68>
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	b31b      	cbz	r3, 8005322 <__swbuf_r+0x68>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	6922      	ldr	r2, [r4, #16]
 80052de:	1a98      	subs	r0, r3, r2
 80052e0:	6963      	ldr	r3, [r4, #20]
 80052e2:	b2f6      	uxtb	r6, r6
 80052e4:	4283      	cmp	r3, r0
 80052e6:	4637      	mov	r7, r6
 80052e8:	dc04      	bgt.n	80052f4 <__swbuf_r+0x3a>
 80052ea:	4621      	mov	r1, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 fa7b 	bl	80057e8 <_fflush_r>
 80052f2:	b9e0      	cbnz	r0, 800532e <__swbuf_r+0x74>
 80052f4:	68a3      	ldr	r3, [r4, #8]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	6022      	str	r2, [r4, #0]
 8005300:	701e      	strb	r6, [r3, #0]
 8005302:	6962      	ldr	r2, [r4, #20]
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	429a      	cmp	r2, r3
 8005308:	d004      	beq.n	8005314 <__swbuf_r+0x5a>
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	07db      	lsls	r3, r3, #31
 800530e:	d506      	bpl.n	800531e <__swbuf_r+0x64>
 8005310:	2e0a      	cmp	r6, #10
 8005312:	d104      	bne.n	800531e <__swbuf_r+0x64>
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 fa66 	bl	80057e8 <_fflush_r>
 800531c:	b938      	cbnz	r0, 800532e <__swbuf_r+0x74>
 800531e:	4638      	mov	r0, r7
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005322:	4621      	mov	r1, r4
 8005324:	4628      	mov	r0, r5
 8005326:	f000 f805 	bl	8005334 <__swsetup_r>
 800532a:	2800      	cmp	r0, #0
 800532c:	d0d5      	beq.n	80052da <__swbuf_r+0x20>
 800532e:	f04f 37ff 	mov.w	r7, #4294967295
 8005332:	e7f4      	b.n	800531e <__swbuf_r+0x64>

08005334 <__swsetup_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <__swsetup_r+0xac>)
 8005338:	4605      	mov	r5, r0
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	460c      	mov	r4, r1
 800533e:	b118      	cbz	r0, 8005348 <__swsetup_r+0x14>
 8005340:	6a03      	ldr	r3, [r0, #32]
 8005342:	b90b      	cbnz	r3, 8005348 <__swsetup_r+0x14>
 8005344:	f7ff fe36 	bl	8004fb4 <__sinit>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800534e:	0718      	lsls	r0, r3, #28
 8005350:	d422      	bmi.n	8005398 <__swsetup_r+0x64>
 8005352:	06d9      	lsls	r1, r3, #27
 8005354:	d407      	bmi.n	8005366 <__swsetup_r+0x32>
 8005356:	2309      	movs	r3, #9
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e034      	b.n	80053d0 <__swsetup_r+0x9c>
 8005366:	0758      	lsls	r0, r3, #29
 8005368:	d512      	bpl.n	8005390 <__swsetup_r+0x5c>
 800536a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800536c:	b141      	cbz	r1, 8005380 <__swsetup_r+0x4c>
 800536e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005372:	4299      	cmp	r1, r3
 8005374:	d002      	beq.n	800537c <__swsetup_r+0x48>
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f8b0 	bl	80054dc <_free_r>
 800537c:	2300      	movs	r3, #0
 800537e:	6363      	str	r3, [r4, #52]	; 0x34
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	2300      	movs	r3, #0
 800538a:	6063      	str	r3, [r4, #4]
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f043 0308 	orr.w	r3, r3, #8
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	b94b      	cbnz	r3, 80053b0 <__swsetup_r+0x7c>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a6:	d003      	beq.n	80053b0 <__swsetup_r+0x7c>
 80053a8:	4621      	mov	r1, r4
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 fa6a 	bl	8005884 <__smakebuf_r>
 80053b0:	89a0      	ldrh	r0, [r4, #12]
 80053b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053b6:	f010 0301 	ands.w	r3, r0, #1
 80053ba:	d00a      	beq.n	80053d2 <__swsetup_r+0x9e>
 80053bc:	2300      	movs	r3, #0
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	6963      	ldr	r3, [r4, #20]
 80053c2:	425b      	negs	r3, r3
 80053c4:	61a3      	str	r3, [r4, #24]
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	b943      	cbnz	r3, 80053dc <__swsetup_r+0xa8>
 80053ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053ce:	d1c4      	bne.n	800535a <__swsetup_r+0x26>
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
 80053d2:	0781      	lsls	r1, r0, #30
 80053d4:	bf58      	it	pl
 80053d6:	6963      	ldrpl	r3, [r4, #20]
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	e7f4      	b.n	80053c6 <__swsetup_r+0x92>
 80053dc:	2000      	movs	r0, #0
 80053de:	e7f7      	b.n	80053d0 <__swsetup_r+0x9c>
 80053e0:	20000068 	.word	0x20000068

080053e4 <memset>:
 80053e4:	4402      	add	r2, r0
 80053e6:	4603      	mov	r3, r0
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d100      	bne.n	80053ee <memset+0xa>
 80053ec:	4770      	bx	lr
 80053ee:	f803 1b01 	strb.w	r1, [r3], #1
 80053f2:	e7f9      	b.n	80053e8 <memset+0x4>

080053f4 <_close_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4d06      	ldr	r5, [pc, #24]	; (8005410 <_close_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f7fc f9dc 	bl	80017bc <_close>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_close_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_close_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20001290 	.word	0x20001290

08005414 <_lseek_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d07      	ldr	r5, [pc, #28]	; (8005434 <_lseek_r+0x20>)
 8005418:	4604      	mov	r4, r0
 800541a:	4608      	mov	r0, r1
 800541c:	4611      	mov	r1, r2
 800541e:	2200      	movs	r2, #0
 8005420:	602a      	str	r2, [r5, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	f7fc f9e1 	bl	80017ea <_lseek>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d102      	bne.n	8005432 <_lseek_r+0x1e>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	b103      	cbz	r3, 8005432 <_lseek_r+0x1e>
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	20001290 	.word	0x20001290

08005438 <_read_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d07      	ldr	r5, [pc, #28]	; (8005458 <_read_r+0x20>)
 800543c:	4604      	mov	r4, r0
 800543e:	4608      	mov	r0, r1
 8005440:	4611      	mov	r1, r2
 8005442:	2200      	movs	r2, #0
 8005444:	602a      	str	r2, [r5, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	f7fc f9e0 	bl	800180c <_read>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d102      	bne.n	8005456 <_read_r+0x1e>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	b103      	cbz	r3, 8005456 <_read_r+0x1e>
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	20001290 	.word	0x20001290

0800545c <_write_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4d07      	ldr	r5, [pc, #28]	; (800547c <_write_r+0x20>)
 8005460:	4604      	mov	r4, r0
 8005462:	4608      	mov	r0, r1
 8005464:	4611      	mov	r1, r2
 8005466:	2200      	movs	r2, #0
 8005468:	602a      	str	r2, [r5, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	f7fc f97a 	bl	8001764 <_write>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_write_r+0x1e>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_write_r+0x1e>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	20001290 	.word	0x20001290

08005480 <__errno>:
 8005480:	4b01      	ldr	r3, [pc, #4]	; (8005488 <__errno+0x8>)
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000068 	.word	0x20000068

0800548c <__libc_init_array>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	4d0d      	ldr	r5, [pc, #52]	; (80054c4 <__libc_init_array+0x38>)
 8005490:	4c0d      	ldr	r4, [pc, #52]	; (80054c8 <__libc_init_array+0x3c>)
 8005492:	1b64      	subs	r4, r4, r5
 8005494:	10a4      	asrs	r4, r4, #2
 8005496:	2600      	movs	r6, #0
 8005498:	42a6      	cmp	r6, r4
 800549a:	d109      	bne.n	80054b0 <__libc_init_array+0x24>
 800549c:	4d0b      	ldr	r5, [pc, #44]	; (80054cc <__libc_init_array+0x40>)
 800549e:	4c0c      	ldr	r4, [pc, #48]	; (80054d0 <__libc_init_array+0x44>)
 80054a0:	f000 fa5e 	bl	8005960 <_init>
 80054a4:	1b64      	subs	r4, r4, r5
 80054a6:	10a4      	asrs	r4, r4, #2
 80054a8:	2600      	movs	r6, #0
 80054aa:	42a6      	cmp	r6, r4
 80054ac:	d105      	bne.n	80054ba <__libc_init_array+0x2e>
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b4:	4798      	blx	r3
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7ee      	b.n	8005498 <__libc_init_array+0xc>
 80054ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80054be:	4798      	blx	r3
 80054c0:	3601      	adds	r6, #1
 80054c2:	e7f2      	b.n	80054aa <__libc_init_array+0x1e>
 80054c4:	080059fc 	.word	0x080059fc
 80054c8:	080059fc 	.word	0x080059fc
 80054cc:	080059fc 	.word	0x080059fc
 80054d0:	08005a00 	.word	0x08005a00

080054d4 <__retarget_lock_init_recursive>:
 80054d4:	4770      	bx	lr

080054d6 <__retarget_lock_acquire_recursive>:
 80054d6:	4770      	bx	lr

080054d8 <__retarget_lock_release_recursive>:
 80054d8:	4770      	bx	lr
	...

080054dc <_free_r>:
 80054dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054de:	2900      	cmp	r1, #0
 80054e0:	d044      	beq.n	800556c <_free_r+0x90>
 80054e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e6:	9001      	str	r0, [sp, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f1a1 0404 	sub.w	r4, r1, #4
 80054ee:	bfb8      	it	lt
 80054f0:	18e4      	addlt	r4, r4, r3
 80054f2:	f000 f8e7 	bl	80056c4 <__malloc_lock>
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <_free_r+0x94>)
 80054f8:	9801      	ldr	r0, [sp, #4]
 80054fa:	6813      	ldr	r3, [r2, #0]
 80054fc:	b933      	cbnz	r3, 800550c <_free_r+0x30>
 80054fe:	6063      	str	r3, [r4, #4]
 8005500:	6014      	str	r4, [r2, #0]
 8005502:	b003      	add	sp, #12
 8005504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005508:	f000 b8e2 	b.w	80056d0 <__malloc_unlock>
 800550c:	42a3      	cmp	r3, r4
 800550e:	d908      	bls.n	8005522 <_free_r+0x46>
 8005510:	6825      	ldr	r5, [r4, #0]
 8005512:	1961      	adds	r1, r4, r5
 8005514:	428b      	cmp	r3, r1
 8005516:	bf01      	itttt	eq
 8005518:	6819      	ldreq	r1, [r3, #0]
 800551a:	685b      	ldreq	r3, [r3, #4]
 800551c:	1949      	addeq	r1, r1, r5
 800551e:	6021      	streq	r1, [r4, #0]
 8005520:	e7ed      	b.n	80054fe <_free_r+0x22>
 8005522:	461a      	mov	r2, r3
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	b10b      	cbz	r3, 800552c <_free_r+0x50>
 8005528:	42a3      	cmp	r3, r4
 800552a:	d9fa      	bls.n	8005522 <_free_r+0x46>
 800552c:	6811      	ldr	r1, [r2, #0]
 800552e:	1855      	adds	r5, r2, r1
 8005530:	42a5      	cmp	r5, r4
 8005532:	d10b      	bne.n	800554c <_free_r+0x70>
 8005534:	6824      	ldr	r4, [r4, #0]
 8005536:	4421      	add	r1, r4
 8005538:	1854      	adds	r4, r2, r1
 800553a:	42a3      	cmp	r3, r4
 800553c:	6011      	str	r1, [r2, #0]
 800553e:	d1e0      	bne.n	8005502 <_free_r+0x26>
 8005540:	681c      	ldr	r4, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	6053      	str	r3, [r2, #4]
 8005546:	440c      	add	r4, r1
 8005548:	6014      	str	r4, [r2, #0]
 800554a:	e7da      	b.n	8005502 <_free_r+0x26>
 800554c:	d902      	bls.n	8005554 <_free_r+0x78>
 800554e:	230c      	movs	r3, #12
 8005550:	6003      	str	r3, [r0, #0]
 8005552:	e7d6      	b.n	8005502 <_free_r+0x26>
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	1961      	adds	r1, r4, r5
 8005558:	428b      	cmp	r3, r1
 800555a:	bf04      	itt	eq
 800555c:	6819      	ldreq	r1, [r3, #0]
 800555e:	685b      	ldreq	r3, [r3, #4]
 8005560:	6063      	str	r3, [r4, #4]
 8005562:	bf04      	itt	eq
 8005564:	1949      	addeq	r1, r1, r5
 8005566:	6021      	streq	r1, [r4, #0]
 8005568:	6054      	str	r4, [r2, #4]
 800556a:	e7ca      	b.n	8005502 <_free_r+0x26>
 800556c:	b003      	add	sp, #12
 800556e:	bd30      	pop	{r4, r5, pc}
 8005570:	20001298 	.word	0x20001298

08005574 <malloc>:
 8005574:	4b02      	ldr	r3, [pc, #8]	; (8005580 <malloc+0xc>)
 8005576:	4601      	mov	r1, r0
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	f000 b823 	b.w	80055c4 <_malloc_r>
 800557e:	bf00      	nop
 8005580:	20000068 	.word	0x20000068

08005584 <sbrk_aligned>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	4e0e      	ldr	r6, [pc, #56]	; (80055c0 <sbrk_aligned+0x3c>)
 8005588:	460c      	mov	r4, r1
 800558a:	6831      	ldr	r1, [r6, #0]
 800558c:	4605      	mov	r5, r0
 800558e:	b911      	cbnz	r1, 8005596 <sbrk_aligned+0x12>
 8005590:	f000 f9d6 	bl	8005940 <_sbrk_r>
 8005594:	6030      	str	r0, [r6, #0]
 8005596:	4621      	mov	r1, r4
 8005598:	4628      	mov	r0, r5
 800559a:	f000 f9d1 	bl	8005940 <_sbrk_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	d00a      	beq.n	80055b8 <sbrk_aligned+0x34>
 80055a2:	1cc4      	adds	r4, r0, #3
 80055a4:	f024 0403 	bic.w	r4, r4, #3
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d007      	beq.n	80055bc <sbrk_aligned+0x38>
 80055ac:	1a21      	subs	r1, r4, r0
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 f9c6 	bl	8005940 <_sbrk_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d101      	bne.n	80055bc <sbrk_aligned+0x38>
 80055b8:	f04f 34ff 	mov.w	r4, #4294967295
 80055bc:	4620      	mov	r0, r4
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	2000129c 	.word	0x2000129c

080055c4 <_malloc_r>:
 80055c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c8:	1ccd      	adds	r5, r1, #3
 80055ca:	f025 0503 	bic.w	r5, r5, #3
 80055ce:	3508      	adds	r5, #8
 80055d0:	2d0c      	cmp	r5, #12
 80055d2:	bf38      	it	cc
 80055d4:	250c      	movcc	r5, #12
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	4607      	mov	r7, r0
 80055da:	db01      	blt.n	80055e0 <_malloc_r+0x1c>
 80055dc:	42a9      	cmp	r1, r5
 80055de:	d905      	bls.n	80055ec <_malloc_r+0x28>
 80055e0:	230c      	movs	r3, #12
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	2600      	movs	r6, #0
 80055e6:	4630      	mov	r0, r6
 80055e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056c0 <_malloc_r+0xfc>
 80055f0:	f000 f868 	bl	80056c4 <__malloc_lock>
 80055f4:	f8d8 3000 	ldr.w	r3, [r8]
 80055f8:	461c      	mov	r4, r3
 80055fa:	bb5c      	cbnz	r4, 8005654 <_malloc_r+0x90>
 80055fc:	4629      	mov	r1, r5
 80055fe:	4638      	mov	r0, r7
 8005600:	f7ff ffc0 	bl	8005584 <sbrk_aligned>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	4604      	mov	r4, r0
 8005608:	d155      	bne.n	80056b6 <_malloc_r+0xf2>
 800560a:	f8d8 4000 	ldr.w	r4, [r8]
 800560e:	4626      	mov	r6, r4
 8005610:	2e00      	cmp	r6, #0
 8005612:	d145      	bne.n	80056a0 <_malloc_r+0xdc>
 8005614:	2c00      	cmp	r4, #0
 8005616:	d048      	beq.n	80056aa <_malloc_r+0xe6>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	4631      	mov	r1, r6
 800561c:	4638      	mov	r0, r7
 800561e:	eb04 0903 	add.w	r9, r4, r3
 8005622:	f000 f98d 	bl	8005940 <_sbrk_r>
 8005626:	4581      	cmp	r9, r0
 8005628:	d13f      	bne.n	80056aa <_malloc_r+0xe6>
 800562a:	6821      	ldr	r1, [r4, #0]
 800562c:	1a6d      	subs	r5, r5, r1
 800562e:	4629      	mov	r1, r5
 8005630:	4638      	mov	r0, r7
 8005632:	f7ff ffa7 	bl	8005584 <sbrk_aligned>
 8005636:	3001      	adds	r0, #1
 8005638:	d037      	beq.n	80056aa <_malloc_r+0xe6>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	442b      	add	r3, r5
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	f8d8 3000 	ldr.w	r3, [r8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d038      	beq.n	80056ba <_malloc_r+0xf6>
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	42a2      	cmp	r2, r4
 800564c:	d12b      	bne.n	80056a6 <_malloc_r+0xe2>
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	e00f      	b.n	8005674 <_malloc_r+0xb0>
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	1b52      	subs	r2, r2, r5
 8005658:	d41f      	bmi.n	800569a <_malloc_r+0xd6>
 800565a:	2a0b      	cmp	r2, #11
 800565c:	d917      	bls.n	800568e <_malloc_r+0xca>
 800565e:	1961      	adds	r1, r4, r5
 8005660:	42a3      	cmp	r3, r4
 8005662:	6025      	str	r5, [r4, #0]
 8005664:	bf18      	it	ne
 8005666:	6059      	strne	r1, [r3, #4]
 8005668:	6863      	ldr	r3, [r4, #4]
 800566a:	bf08      	it	eq
 800566c:	f8c8 1000 	streq.w	r1, [r8]
 8005670:	5162      	str	r2, [r4, r5]
 8005672:	604b      	str	r3, [r1, #4]
 8005674:	4638      	mov	r0, r7
 8005676:	f104 060b 	add.w	r6, r4, #11
 800567a:	f000 f829 	bl	80056d0 <__malloc_unlock>
 800567e:	f026 0607 	bic.w	r6, r6, #7
 8005682:	1d23      	adds	r3, r4, #4
 8005684:	1af2      	subs	r2, r6, r3
 8005686:	d0ae      	beq.n	80055e6 <_malloc_r+0x22>
 8005688:	1b9b      	subs	r3, r3, r6
 800568a:	50a3      	str	r3, [r4, r2]
 800568c:	e7ab      	b.n	80055e6 <_malloc_r+0x22>
 800568e:	42a3      	cmp	r3, r4
 8005690:	6862      	ldr	r2, [r4, #4]
 8005692:	d1dd      	bne.n	8005650 <_malloc_r+0x8c>
 8005694:	f8c8 2000 	str.w	r2, [r8]
 8005698:	e7ec      	b.n	8005674 <_malloc_r+0xb0>
 800569a:	4623      	mov	r3, r4
 800569c:	6864      	ldr	r4, [r4, #4]
 800569e:	e7ac      	b.n	80055fa <_malloc_r+0x36>
 80056a0:	4634      	mov	r4, r6
 80056a2:	6876      	ldr	r6, [r6, #4]
 80056a4:	e7b4      	b.n	8005610 <_malloc_r+0x4c>
 80056a6:	4613      	mov	r3, r2
 80056a8:	e7cc      	b.n	8005644 <_malloc_r+0x80>
 80056aa:	230c      	movs	r3, #12
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	4638      	mov	r0, r7
 80056b0:	f000 f80e 	bl	80056d0 <__malloc_unlock>
 80056b4:	e797      	b.n	80055e6 <_malloc_r+0x22>
 80056b6:	6025      	str	r5, [r4, #0]
 80056b8:	e7dc      	b.n	8005674 <_malloc_r+0xb0>
 80056ba:	605b      	str	r3, [r3, #4]
 80056bc:	deff      	udf	#255	; 0xff
 80056be:	bf00      	nop
 80056c0:	20001298 	.word	0x20001298

080056c4 <__malloc_lock>:
 80056c4:	4801      	ldr	r0, [pc, #4]	; (80056cc <__malloc_lock+0x8>)
 80056c6:	f7ff bf06 	b.w	80054d6 <__retarget_lock_acquire_recursive>
 80056ca:	bf00      	nop
 80056cc:	20001294 	.word	0x20001294

080056d0 <__malloc_unlock>:
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <__malloc_unlock+0x8>)
 80056d2:	f7ff bf01 	b.w	80054d8 <__retarget_lock_release_recursive>
 80056d6:	bf00      	nop
 80056d8:	20001294 	.word	0x20001294

080056dc <__sflush_r>:
 80056dc:	898a      	ldrh	r2, [r1, #12]
 80056de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e2:	4605      	mov	r5, r0
 80056e4:	0710      	lsls	r0, r2, #28
 80056e6:	460c      	mov	r4, r1
 80056e8:	d458      	bmi.n	800579c <__sflush_r+0xc0>
 80056ea:	684b      	ldr	r3, [r1, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dc05      	bgt.n	80056fc <__sflush_r+0x20>
 80056f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	dc02      	bgt.n	80056fc <__sflush_r+0x20>
 80056f6:	2000      	movs	r0, #0
 80056f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056fe:	2e00      	cmp	r6, #0
 8005700:	d0f9      	beq.n	80056f6 <__sflush_r+0x1a>
 8005702:	2300      	movs	r3, #0
 8005704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005708:	682f      	ldr	r7, [r5, #0]
 800570a:	6a21      	ldr	r1, [r4, #32]
 800570c:	602b      	str	r3, [r5, #0]
 800570e:	d032      	beq.n	8005776 <__sflush_r+0x9a>
 8005710:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	075a      	lsls	r2, r3, #29
 8005716:	d505      	bpl.n	8005724 <__sflush_r+0x48>
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	1ac0      	subs	r0, r0, r3
 800571c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800571e:	b10b      	cbz	r3, 8005724 <__sflush_r+0x48>
 8005720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005722:	1ac0      	subs	r0, r0, r3
 8005724:	2300      	movs	r3, #0
 8005726:	4602      	mov	r2, r0
 8005728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800572a:	6a21      	ldr	r1, [r4, #32]
 800572c:	4628      	mov	r0, r5
 800572e:	47b0      	blx	r6
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	d106      	bne.n	8005744 <__sflush_r+0x68>
 8005736:	6829      	ldr	r1, [r5, #0]
 8005738:	291d      	cmp	r1, #29
 800573a:	d82b      	bhi.n	8005794 <__sflush_r+0xb8>
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <__sflush_r+0x108>)
 800573e:	410a      	asrs	r2, r1
 8005740:	07d6      	lsls	r6, r2, #31
 8005742:	d427      	bmi.n	8005794 <__sflush_r+0xb8>
 8005744:	2200      	movs	r2, #0
 8005746:	6062      	str	r2, [r4, #4]
 8005748:	04d9      	lsls	r1, r3, #19
 800574a:	6922      	ldr	r2, [r4, #16]
 800574c:	6022      	str	r2, [r4, #0]
 800574e:	d504      	bpl.n	800575a <__sflush_r+0x7e>
 8005750:	1c42      	adds	r2, r0, #1
 8005752:	d101      	bne.n	8005758 <__sflush_r+0x7c>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	b903      	cbnz	r3, 800575a <__sflush_r+0x7e>
 8005758:	6560      	str	r0, [r4, #84]	; 0x54
 800575a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800575c:	602f      	str	r7, [r5, #0]
 800575e:	2900      	cmp	r1, #0
 8005760:	d0c9      	beq.n	80056f6 <__sflush_r+0x1a>
 8005762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005766:	4299      	cmp	r1, r3
 8005768:	d002      	beq.n	8005770 <__sflush_r+0x94>
 800576a:	4628      	mov	r0, r5
 800576c:	f7ff feb6 	bl	80054dc <_free_r>
 8005770:	2000      	movs	r0, #0
 8005772:	6360      	str	r0, [r4, #52]	; 0x34
 8005774:	e7c0      	b.n	80056f8 <__sflush_r+0x1c>
 8005776:	2301      	movs	r3, #1
 8005778:	4628      	mov	r0, r5
 800577a:	47b0      	blx	r6
 800577c:	1c41      	adds	r1, r0, #1
 800577e:	d1c8      	bne.n	8005712 <__sflush_r+0x36>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0c5      	beq.n	8005712 <__sflush_r+0x36>
 8005786:	2b1d      	cmp	r3, #29
 8005788:	d001      	beq.n	800578e <__sflush_r+0xb2>
 800578a:	2b16      	cmp	r3, #22
 800578c:	d101      	bne.n	8005792 <__sflush_r+0xb6>
 800578e:	602f      	str	r7, [r5, #0]
 8005790:	e7b1      	b.n	80056f6 <__sflush_r+0x1a>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	e7ad      	b.n	80056f8 <__sflush_r+0x1c>
 800579c:	690f      	ldr	r7, [r1, #16]
 800579e:	2f00      	cmp	r7, #0
 80057a0:	d0a9      	beq.n	80056f6 <__sflush_r+0x1a>
 80057a2:	0793      	lsls	r3, r2, #30
 80057a4:	680e      	ldr	r6, [r1, #0]
 80057a6:	bf08      	it	eq
 80057a8:	694b      	ldreq	r3, [r1, #20]
 80057aa:	600f      	str	r7, [r1, #0]
 80057ac:	bf18      	it	ne
 80057ae:	2300      	movne	r3, #0
 80057b0:	eba6 0807 	sub.w	r8, r6, r7
 80057b4:	608b      	str	r3, [r1, #8]
 80057b6:	f1b8 0f00 	cmp.w	r8, #0
 80057ba:	dd9c      	ble.n	80056f6 <__sflush_r+0x1a>
 80057bc:	6a21      	ldr	r1, [r4, #32]
 80057be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057c0:	4643      	mov	r3, r8
 80057c2:	463a      	mov	r2, r7
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b0      	blx	r6
 80057c8:	2800      	cmp	r0, #0
 80057ca:	dc06      	bgt.n	80057da <__sflush_r+0xfe>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	e78e      	b.n	80056f8 <__sflush_r+0x1c>
 80057da:	4407      	add	r7, r0
 80057dc:	eba8 0800 	sub.w	r8, r8, r0
 80057e0:	e7e9      	b.n	80057b6 <__sflush_r+0xda>
 80057e2:	bf00      	nop
 80057e4:	dfbffffe 	.word	0xdfbffffe

080057e8 <_fflush_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	4605      	mov	r5, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	b913      	cbnz	r3, 80057f8 <_fflush_r+0x10>
 80057f2:	2500      	movs	r5, #0
 80057f4:	4628      	mov	r0, r5
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	b118      	cbz	r0, 8005802 <_fflush_r+0x1a>
 80057fa:	6a03      	ldr	r3, [r0, #32]
 80057fc:	b90b      	cbnz	r3, 8005802 <_fflush_r+0x1a>
 80057fe:	f7ff fbd9 	bl	8004fb4 <__sinit>
 8005802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f3      	beq.n	80057f2 <_fflush_r+0xa>
 800580a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800580c:	07d0      	lsls	r0, r2, #31
 800580e:	d404      	bmi.n	800581a <_fflush_r+0x32>
 8005810:	0599      	lsls	r1, r3, #22
 8005812:	d402      	bmi.n	800581a <_fflush_r+0x32>
 8005814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005816:	f7ff fe5e 	bl	80054d6 <__retarget_lock_acquire_recursive>
 800581a:	4628      	mov	r0, r5
 800581c:	4621      	mov	r1, r4
 800581e:	f7ff ff5d 	bl	80056dc <__sflush_r>
 8005822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005824:	07da      	lsls	r2, r3, #31
 8005826:	4605      	mov	r5, r0
 8005828:	d4e4      	bmi.n	80057f4 <_fflush_r+0xc>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	059b      	lsls	r3, r3, #22
 800582e:	d4e1      	bmi.n	80057f4 <_fflush_r+0xc>
 8005830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005832:	f7ff fe51 	bl	80054d8 <__retarget_lock_release_recursive>
 8005836:	e7dd      	b.n	80057f4 <_fflush_r+0xc>

08005838 <__swhatbuf_r>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	460c      	mov	r4, r1
 800583c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005840:	2900      	cmp	r1, #0
 8005842:	b096      	sub	sp, #88	; 0x58
 8005844:	4615      	mov	r5, r2
 8005846:	461e      	mov	r6, r3
 8005848:	da0d      	bge.n	8005866 <__swhatbuf_r+0x2e>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005850:	f04f 0100 	mov.w	r1, #0
 8005854:	bf0c      	ite	eq
 8005856:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800585a:	2340      	movne	r3, #64	; 0x40
 800585c:	2000      	movs	r0, #0
 800585e:	6031      	str	r1, [r6, #0]
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	b016      	add	sp, #88	; 0x58
 8005864:	bd70      	pop	{r4, r5, r6, pc}
 8005866:	466a      	mov	r2, sp
 8005868:	f000 f848 	bl	80058fc <_fstat_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	dbec      	blt.n	800584a <__swhatbuf_r+0x12>
 8005870:	9901      	ldr	r1, [sp, #4]
 8005872:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005876:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800587a:	4259      	negs	r1, r3
 800587c:	4159      	adcs	r1, r3
 800587e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005882:	e7eb      	b.n	800585c <__swhatbuf_r+0x24>

08005884 <__smakebuf_r>:
 8005884:	898b      	ldrh	r3, [r1, #12]
 8005886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005888:	079d      	lsls	r5, r3, #30
 800588a:	4606      	mov	r6, r0
 800588c:	460c      	mov	r4, r1
 800588e:	d507      	bpl.n	80058a0 <__smakebuf_r+0x1c>
 8005890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	6123      	str	r3, [r4, #16]
 8005898:	2301      	movs	r3, #1
 800589a:	6163      	str	r3, [r4, #20]
 800589c:	b002      	add	sp, #8
 800589e:	bd70      	pop	{r4, r5, r6, pc}
 80058a0:	ab01      	add	r3, sp, #4
 80058a2:	466a      	mov	r2, sp
 80058a4:	f7ff ffc8 	bl	8005838 <__swhatbuf_r>
 80058a8:	9900      	ldr	r1, [sp, #0]
 80058aa:	4605      	mov	r5, r0
 80058ac:	4630      	mov	r0, r6
 80058ae:	f7ff fe89 	bl	80055c4 <_malloc_r>
 80058b2:	b948      	cbnz	r0, 80058c8 <__smakebuf_r+0x44>
 80058b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b8:	059a      	lsls	r2, r3, #22
 80058ba:	d4ef      	bmi.n	800589c <__smakebuf_r+0x18>
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	f043 0302 	orr.w	r3, r3, #2
 80058c4:	81a3      	strh	r3, [r4, #12]
 80058c6:	e7e3      	b.n	8005890 <__smakebuf_r+0xc>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	6020      	str	r0, [r4, #0]
 80058cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	9b00      	ldr	r3, [sp, #0]
 80058d4:	6163      	str	r3, [r4, #20]
 80058d6:	9b01      	ldr	r3, [sp, #4]
 80058d8:	6120      	str	r0, [r4, #16]
 80058da:	b15b      	cbz	r3, 80058f4 <__smakebuf_r+0x70>
 80058dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058e0:	4630      	mov	r0, r6
 80058e2:	f000 f81d 	bl	8005920 <_isatty_r>
 80058e6:	b128      	cbz	r0, 80058f4 <__smakebuf_r+0x70>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	431d      	orrs	r5, r3
 80058f8:	81a5      	strh	r5, [r4, #12]
 80058fa:	e7cf      	b.n	800589c <__smakebuf_r+0x18>

080058fc <_fstat_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4d07      	ldr	r5, [pc, #28]	; (800591c <_fstat_r+0x20>)
 8005900:	2300      	movs	r3, #0
 8005902:	4604      	mov	r4, r0
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	f7fb ffa7 	bl	800185c <_fstat>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d102      	bne.n	8005918 <_fstat_r+0x1c>
 8005912:	682b      	ldr	r3, [r5, #0]
 8005914:	b103      	cbz	r3, 8005918 <_fstat_r+0x1c>
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	bd38      	pop	{r3, r4, r5, pc}
 800591a:	bf00      	nop
 800591c:	20001290 	.word	0x20001290

08005920 <_isatty_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4d06      	ldr	r5, [pc, #24]	; (800593c <_isatty_r+0x1c>)
 8005924:	2300      	movs	r3, #0
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	f7fb ff04 	bl	8001738 <_isatty>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_isatty_r+0x1a>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b103      	cbz	r3, 800593a <_isatty_r+0x1a>
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	20001290 	.word	0x20001290

08005940 <_sbrk_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4d06      	ldr	r5, [pc, #24]	; (800595c <_sbrk_r+0x1c>)
 8005944:	2300      	movs	r3, #0
 8005946:	4604      	mov	r4, r0
 8005948:	4608      	mov	r0, r1
 800594a:	602b      	str	r3, [r5, #0]
 800594c:	f7fc f874 	bl	8001a38 <_sbrk>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_sbrk_r+0x1a>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_sbrk_r+0x1a>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	20001290 	.word	0x20001290

08005960 <_init>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr

0800596c <_fini>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr
