
TEST_I2C_LL_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005898  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab0  08005ab0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab8  08005ab8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  2000006c  08005b2c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012a0  08005b2c  000212a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001851c  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c48  00000000  00000000  000385fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0003c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001116  00000000  00000000  0003d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002638b  00000000  00000000  0003e9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a493  00000000  00000000  00064d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfd4d  00000000  00000000  0007f1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062f4  00000000  00000000  0015ef1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00165210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a10 	.word	0x08005a10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005a10 	.word	0x08005a10

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <__NVIC_GetPriorityGrouping+0x18>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	f003 0307 	and.w	r3, r3, #7
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0b      	blt.n	8000512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <__NVIC_EnableIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	; (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000578:	b480      	push	{r7}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	f1c3 0307 	rsb	r3, r3, #7
 8000592:	2b04      	cmp	r3, #4
 8000594:	bf28      	it	cs
 8000596:	2304      	movcs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3304      	adds	r3, #4
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d902      	bls.n	80005a8 <NVIC_EncodePriority+0x30>
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3b03      	subs	r3, #3
 80005a6:	e000      	b.n	80005aa <NVIC_EncodePriority+0x32>
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43da      	mvns	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	401a      	ands	r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43d9      	mvns	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	4313      	orrs	r3, r2
         );
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3724      	adds	r7, #36	; 0x24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <LL_DMA_EnableIT_TC+0x40>)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4413      	add	r3, r2
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4908      	ldr	r1, [pc, #32]	; (8000620 <LL_DMA_EnableIT_TC+0x40>)
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	440a      	add	r2, r1
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	4611      	mov	r1, r2
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	440a      	add	r2, r1
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6013      	str	r3, [r2, #0]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	08005a60 	.word	0x08005a60

08000624 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800062e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000630:	4907      	ldr	r1, [pc, #28]	; (8000650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4313      	orrs	r3, r2
 8000636:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800063a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4013      	ands	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000

08000654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ffe3 	bl	8000624 <LL_AHB1_GRP1_EnableClock>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 800065e:	2106      	movs	r1, #6
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <MX_DMA_Init+0x58>)
 8000662:	f7ff ffbd 	bl	80005e0 <LL_DMA_EnableIT_TC>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000666:	f7ff ff31 	bl	80004cc <__NVIC_GetPriorityGrouping>
 800066a:	4603      	mov	r3, r0
 800066c:	2200      	movs	r2, #0
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff81 	bl	8000578 <NVIC_EncodePriority>
 8000676:	4603      	mov	r3, r0
 8000678:	4619      	mov	r1, r3
 800067a:	2010      	movs	r0, #16
 800067c:	f7ff ff52 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000680:	2010      	movs	r0, #16
 8000682:	f7ff ff31 	bl	80004e8 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000686:	f7ff ff21 	bl	80004cc <__NVIC_GetPriorityGrouping>
 800068a:	4603      	mov	r3, r0
 800068c:	2200      	movs	r2, #0
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff71 	bl	8000578 <NVIC_EncodePriority>
 8000696:	4603      	mov	r3, r0
 8000698:	4619      	mov	r1, r3
 800069a:	2011      	movs	r0, #17
 800069c:	f7ff ff42 	bl	8000524 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006a0:	2011      	movs	r0, #17
 80006a2:	f7ff ff21 	bl	80004e8 <__NVIC_EnableIRQ>

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020000 	.word	0x40020000

080006b0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	4013      	ands	r3, r2
 80006c6:	041a      	lsls	r2, r3, #16
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	43d9      	mvns	r1, r3
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	400b      	ands	r3, r1
 80006d0:	431a      	orrs	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	619a      	str	r2, [r3, #24]
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <vApplicationGetIdleTaskMemory+0x2c>)
 80006f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <vApplicationGetIdleTaskMemory+0x30>)
 80006fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	2000008c 	.word	0x2000008c
 8000714:	200000e0 	.word	0x200000e0

08000718 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_FREERTOS_Init+0x30>)
 8000720:	1d3c      	adds	r4, r7, #4
 8000722:	461d      	mov	r5, r3
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f003 f9dc 	bl	8003af2 <osThreadCreate>
 800073a:	4603      	mov	r3, r0
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <MX_FREERTOS_Init+0x34>)
 800073e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bdb0      	pop	{r4, r5, r7, pc}
 8000748:	08005a34 	.word	0x08005a34
 800074c:	20000088 	.word	0x20000088

08000750 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af02      	add	r7, sp, #8
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	//char buf[100];
	uint8_t rx_buffer[RX_BUFFER_SIZE];
    uint8_t addr= 0;
 8000758:	2300      	movs	r3, #0
 800075a:	75bb      	strb	r3, [r7, #22]
    for(uint8_t i=5; i>0; i--)
 800075c:	2305      	movs	r3, #5
 800075e:	75fb      	strb	r3, [r7, #23]
 8000760:	e00a      	b.n	8000778 <StartDefaultTask+0x28>
    {
      LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000762:	2108      	movs	r1, #8
 8000764:	481c      	ldr	r0, [pc, #112]	; (80007d8 <StartDefaultTask+0x88>)
 8000766:	f7ff ffa3 	bl	80006b0 <LL_GPIO_TogglePin>
	  osDelay(1000);
 800076a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076e:	f003 fa0c 	bl	8003b8a <osDelay>
    for(uint8_t i=5; i>0; i--)
 8000772:	7dfb      	ldrb	r3, [r7, #23]
 8000774:	3b01      	subs	r3, #1
 8000776:	75fb      	strb	r3, [r7, #23]
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f1      	bne.n	8000762 <StartDefaultTask+0x12>
    }
    //printf("\r\nHello");
    uint8_t *result = i2cdevReadRegSeq_DMA(I2C1, 0x76, 0xD0, rx_buffer, RX_BUFFER_SIZE, NULL);
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	9200      	str	r2, [sp, #0]
 800078a:	22d0      	movs	r2, #208	; 0xd0
 800078c:	2176      	movs	r1, #118	; 0x76
 800078e:	4813      	ldr	r0, [pc, #76]	; (80007dc <StartDefaultTask+0x8c>)
 8000790:	f000 fd00 	bl	8001194 <i2cdevReadRegSeq_DMA>
 8000794:	6138      	str	r0, [r7, #16]
    //addr=i2cdevReadReg8(I2C1, 0x76, 0xD0);
    //printf("\r\n BMP280 ADDR=%d",addr);
    //i2cdevReadReg_Mul(I2C1, 0x76, 0xD0, 1, rx_buffer);
    //printf("\r\n %d%d%d%d%d",rx_buffer[0],rx_buffer[1],rx_buffer[2],rx_buffer[3],rx_buffer[4]);
    if(*result == 0x58){
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b58      	cmp	r3, #88	; 0x58
 800079c:	d107      	bne.n	80007ae <StartDefaultTask+0x5e>
    	while(1){

    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800079e:	2108      	movs	r1, #8
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <StartDefaultTask+0x88>)
 80007a2:	f7ff ff85 	bl	80006b0 <LL_GPIO_TogglePin>
    		osDelay(80);
 80007a6:	2050      	movs	r0, #80	; 0x50
 80007a8:	f003 f9ef 	bl	8003b8a <osDelay>
    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80007ac:	e7f7      	b.n	800079e <StartDefaultTask+0x4e>
    	}
    }
    else if (addr ==0x00){
 80007ae:	7dbb      	ldrb	r3, [r7, #22]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d108      	bne.n	80007c6 <StartDefaultTask+0x76>
    	while(1){

    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80007b4:	2108      	movs	r1, #8
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <StartDefaultTask+0x88>)
 80007b8:	f7ff ff7a 	bl	80006b0 <LL_GPIO_TogglePin>
    		osDelay(1000);
 80007bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c0:	f003 f9e3 	bl	8003b8a <osDelay>
    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80007c4:	e7f6      	b.n	80007b4 <StartDefaultTask+0x64>
    	}
    }
    else{
    	while(1){

    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80007c6:	2108      	movs	r1, #8
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <StartDefaultTask+0x88>)
 80007ca:	f7ff ff71 	bl	80006b0 <LL_GPIO_TogglePin>
    	    osDelay(2);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f003 f9db 	bl	8003b8a <osDelay>
    		LL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80007d4:	e7f7      	b.n	80007c6 <StartDefaultTask+0x76>
 80007d6:	bf00      	nop
 80007d8:	48000400 	.word	0x48000400
 80007dc:	40005400 	.word	0x40005400

080007e0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000

08000810 <LL_GPIO_ResetOutputPin>:
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
 8000840:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000842:	2004      	movs	r0, #4
 8000844:	f7ff ffcc 	bl	80007e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff ffc9 	bl	80007e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800084e:	2002      	movs	r0, #2
 8000850:	f7ff ffc6 	bl	80007e0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8000854:	2108      	movs	r1, #8
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0x58>)
 8000858:	f7ff ffda 	bl	8000810 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 800085c:	2308      	movs	r3, #8
 800085e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000860:	2301      	movs	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_GPIO_Init+0x58>)
 8000876:	f002 ffbf 	bl	80037f8 <LL_GPIO_Init>

}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	48000400 	.word	0x48000400

08000888 <__NVIC_GetPriorityGrouping>:
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_GetPriorityGrouping+0x18>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	f003 0307 	and.w	r3, r3, #7
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_EnableIRQ>:
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db0b      	blt.n	80008ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 021f 	and.w	r2, r3, #31
 80008bc:	4907      	ldr	r1, [pc, #28]	; (80008dc <__NVIC_EnableIRQ+0x38>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	2001      	movs	r0, #1
 80008c6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_SetPriority>:
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <LL_DMA_SetDataTransferDirection>:
{
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <LL_DMA_SetDataTransferDirection+0x4c>)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	4413      	add	r3, r2
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c0:	f023 0310 	bic.w	r3, r3, #16
 80009c4:	4908      	ldr	r1, [pc, #32]	; (80009e8 <LL_DMA_SetDataTransferDirection+0x4c>)
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	440a      	add	r2, r1
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	4611      	mov	r1, r2
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	440a      	add	r2, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	600b      	str	r3, [r1, #0]
}
 80009da:	bf00      	nop
 80009dc:	371c      	adds	r7, #28
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	08005a68 	.word	0x08005a68

080009ec <LL_DMA_SetMode>:
{
 80009ec:	b480      	push	{r7}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <LL_DMA_SetMode+0x48>)
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	4413      	add	r3, r2
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f023 0220 	bic.w	r2, r3, #32
 8000a10:	4908      	ldr	r1, [pc, #32]	; (8000a34 <LL_DMA_SetMode+0x48>)
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	440b      	add	r3, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	440b      	add	r3, r1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	600b      	str	r3, [r1, #0]
}
 8000a26:	bf00      	nop
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	08005a68 	.word	0x08005a68

08000a38 <LL_DMA_SetPeriphIncMode>:
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LL_DMA_SetPeriphIncMode+0x48>)
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	4413      	add	r3, r2
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a5c:	4908      	ldr	r1, [pc, #32]	; (8000a80 <LL_DMA_SetPeriphIncMode+0x48>)
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	440b      	add	r3, r1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	440b      	add	r3, r1
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	600b      	str	r3, [r1, #0]
}
 8000a72:	bf00      	nop
 8000a74:	371c      	adds	r7, #28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	08005a68 	.word	0x08005a68

08000a84 <LL_DMA_SetMemoryIncMode>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <LL_DMA_SetMemoryIncMode+0x48>)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000aa8:	4908      	ldr	r1, [pc, #32]	; (8000acc <LL_DMA_SetMemoryIncMode+0x48>)
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	440b      	add	r3, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	440b      	add	r3, r1
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	371c      	adds	r7, #28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	08005a68 	.word	0x08005a68

08000ad0 <LL_DMA_SetPeriphSize>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LL_DMA_SetPeriphSize+0x48>)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	4413      	add	r3, r2
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000af4:	4908      	ldr	r1, [pc, #32]	; (8000b18 <LL_DMA_SetPeriphSize+0x48>)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	440b      	add	r3, r1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	440b      	add	r3, r1
 8000b02:	4619      	mov	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	371c      	adds	r7, #28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	08005a68 	.word	0x08005a68

08000b1c <LL_DMA_SetMemorySize>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <LL_DMA_SetMemorySize+0x48>)
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000b40:	4908      	ldr	r1, [pc, #32]	; (8000b64 <LL_DMA_SetMemorySize+0x48>)
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	440b      	add	r3, r1
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	440b      	add	r3, r1
 8000b4e:	4619      	mov	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
}
 8000b56:	bf00      	nop
 8000b58:	371c      	adds	r7, #28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	08005a68 	.word	0x08005a68

08000b68 <LL_DMA_SetChannelPriorityLevel>:
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000b8c:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	440b      	add	r3, r1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	440b      	add	r3, r1
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	600b      	str	r3, [r1, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	371c      	adds	r7, #28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	08005a68 	.word	0x08005a68

08000bb4 <LL_DMA_SetPeriphRequest>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	33a8      	adds	r3, #168	; 0xa8
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	210f      	movs	r1, #15
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	210f      	movs	r1, #15
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	e003      	b.n	8000bfe <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	fab3 f383 	clz	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	408b      	lsls	r3, r1
 8000c04:	68f9      	ldr	r1, [r7, #12]
 8000c06:	31a8      	adds	r1, #168	; 0xa8
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	600b      	str	r3, [r1, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	3724      	adds	r7, #36	; 0x24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_I2C_EnableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_EnableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c6c:	f023 0306 	bic.w	r3, r3, #6
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	60da      	str	r2, [r3, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60da      	str	r2, [r3, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	605a      	str	r2, [r3, #4]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	0e1a      	lsrs	r2, r3, #24
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <LL_RCC_SetI2CClockSource+0x4c>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	0c1b      	lsrs	r3, r3, #16
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	401a      	ands	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	b2d9      	uxtb	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	f003 031f 	and.w	r3, r3, #31
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	431a      	orrs	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40021088 	.word	0x40021088

08000d18 <LL_AHB2_GRP1_EnableClock>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4013      	ands	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000

08000d78 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000da2:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8000da6:	f7ff ff8f 	bl	8000cc8 <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff ffb4 	bl	8000d18 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000db0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f002 fd11 	bl	80037f8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000dd6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000dda:	f7ff ffb5 	bl	8000d48 <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_3);
 8000dde:	2203      	movs	r2, #3
 8000de0:	2105      	movs	r1, #5
 8000de2:	484c      	ldr	r0, [pc, #304]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000de4:	f7ff fee6 	bl	8000bb4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000de8:	2210      	movs	r2, #16
 8000dea:	2105      	movs	r1, #5
 8000dec:	4849      	ldr	r0, [pc, #292]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000dee:	f7ff fdd5 	bl	800099c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_HIGH);
 8000df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df6:	2105      	movs	r1, #5
 8000df8:	4846      	ldr	r0, [pc, #280]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000dfa:	f7ff feb5 	bl	8000b68 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	4844      	ldr	r0, [pc, #272]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e04:	f7ff fdf2 	bl	80009ec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	4841      	ldr	r0, [pc, #260]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e0e:	f7ff fe13 	bl	8000a38 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	2105      	movs	r1, #5
 8000e16:	483f      	ldr	r0, [pc, #252]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e18:	f7ff fe34 	bl	8000a84 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2105      	movs	r1, #5
 8000e20:	483c      	ldr	r0, [pc, #240]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e22:	f7ff fe55 	bl	8000ad0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2105      	movs	r1, #5
 8000e2a:	483a      	ldr	r0, [pc, #232]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e2c:	f7ff fe76 	bl	8000b1c <LL_DMA_SetMemorySize>

  /* I2C1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_3);
 8000e30:	2203      	movs	r2, #3
 8000e32:	2106      	movs	r1, #6
 8000e34:	4837      	ldr	r0, [pc, #220]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e36:	f7ff febd 	bl	8000bb4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2106      	movs	r1, #6
 8000e3e:	4835      	ldr	r0, [pc, #212]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e40:	f7ff fdac 	bl	800099c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_HIGH);
 8000e44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e48:	2106      	movs	r1, #6
 8000e4a:	4832      	ldr	r0, [pc, #200]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e4c:	f7ff fe8c 	bl	8000b68 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2106      	movs	r1, #6
 8000e54:	482f      	ldr	r0, [pc, #188]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e56:	f7ff fdc9 	bl	80009ec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2106      	movs	r1, #6
 8000e5e:	482d      	ldr	r0, [pc, #180]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e60:	f7ff fdea 	bl	8000a38 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	2106      	movs	r1, #6
 8000e68:	482a      	ldr	r0, [pc, #168]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e6a:	f7ff fe0b 	bl	8000a84 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2106      	movs	r1, #6
 8000e72:	4828      	ldr	r0, [pc, #160]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e74:	f7ff fe2c 	bl	8000ad0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2106      	movs	r1, #6
 8000e7c:	4825      	ldr	r0, [pc, #148]	; (8000f14 <MX_I2C1_Init+0x19c>)
 8000e7e:	f7ff fe4d 	bl	8000b1c <LL_DMA_SetMemorySize>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000e82:	f7ff fd01 	bl	8000888 <__NVIC_GetPriorityGrouping>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fd51 	bl	8000934 <NVIC_EncodePriority>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4619      	mov	r1, r3
 8000e96:	201f      	movs	r0, #31
 8000e98:	f7ff fd22 	bl	80008e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e9c:	201f      	movs	r0, #31
 8000e9e:	f7ff fd01 	bl	80008a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000ea2:	f7ff fcf1 	bl	8000888 <__NVIC_GetPriorityGrouping>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2105      	movs	r1, #5
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fd41 	bl	8000934 <NVIC_EncodePriority>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2020      	movs	r0, #32
 8000eb8:	f7ff fd12 	bl	80008e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ebc:	2020      	movs	r0, #32
 8000ebe:	f7ff fcf1 	bl	80008a4 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000ec2:	4815      	ldr	r0, [pc, #84]	; (8000f18 <MX_I2C1_Init+0x1a0>)
 8000ec4:	f7ff fef0 	bl	8000ca8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <MX_I2C1_Init+0x1a0>)
 8000eca:	f7ff fedd 	bl	8000c88 <LL_I2C_DisableOwnAddress2>
  LL_I2C_EnableGeneralCall(I2C1);
 8000ece:	4812      	ldr	r0, [pc, #72]	; (8000f18 <MX_I2C1_Init+0x1a0>)
 8000ed0:	f7ff feb2 	bl	8000c38 <LL_I2C_EnableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000ed4:	4810      	ldr	r0, [pc, #64]	; (8000f18 <MX_I2C1_Init+0x1a0>)
 8000ed6:	f7ff fe9f 	bl	8000c18 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00707CBB;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_I2C1_Init+0x1a4>)
 8000ee0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_I2C1_Init+0x1a0>)
 8000efe:	f002 fd8c 	bl	8003a1a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_I2C1_Init+0x1a0>)
 8000f08:	f7ff fea6 	bl	8000c58 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3738      	adds	r7, #56	; 0x38
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	00707cbb 	.word	0x00707cbb

08000f20 <LL_I2C_EnableDMAReq_RX>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_I2C_DMA_GetRegAddr>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  if (Direction == LL_I2C_DMA_REG_DATA_TRANSMIT)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <LL_I2C_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(I2Cx->TXDR);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3328      	adds	r3, #40	; 0x28
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e002      	b.n	8000f5e <LL_I2C_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(I2Cx->RXDR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3324      	adds	r3, #36	; 0x24
 8000f5c:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_I2C_IsActiveFlag_TXE>:
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <LL_I2C_IsActiveFlag_TXE+0x18>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_I2C_IsActiveFlag_TC>:
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d101      	bne.n	8000faa <LL_I2C_IsActiveFlag_TC+0x18>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_I2C_IsActiveFlag_TC+0x1a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_I2C_IsActiveFlag_BUSY>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fcc:	d101      	bne.n	8000fd2 <LL_I2C_IsActiveFlag_BUSY+0x1a>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_I2C_ClearFlag_STOP>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	f043 0220 	orr.w	r2, r3, #32
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	61da      	str	r2, [r3, #28]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_I2C_ClearFlag_TXE>:
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	0d5b      	lsrs	r3, r3, #21
 8001032:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <LL_I2C_HandleTransfer+0x48>)
 8001038:	430b      	orrs	r3, r1
 800103a:	43db      	mvns	r3, r3
 800103c:	401a      	ands	r2, r3
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4319      	orrs	r1, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	041b      	lsls	r3, r3, #16
 8001048:	4319      	orrs	r1, r3
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4319      	orrs	r1, r3
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	430b      	orrs	r3, r1
 8001052:	431a      	orrs	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	03ff7bff 	.word	0x03ff7bff

08001068 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <LL_DMA_EnableChannel>:
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001096:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <LL_DMA_EnableChannel+0x40>)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <LL_DMA_EnableChannel+0x40>)
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	440a      	add	r2, r1
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	4611      	mov	r1, r2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	440a      	add	r2, r1
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6013      	str	r3, [r2, #0]
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	08005a70 	.word	0x08005a70

080010cc <LL_DMA_SetDataLength>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LL_DMA_SetDataLength+0x48>)
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	4413      	add	r3, r2
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	0c1b      	lsrs	r3, r3, #16
 80010ee:	041b      	lsls	r3, r3, #16
 80010f0:	4908      	ldr	r1, [pc, #32]	; (8001114 <LL_DMA_SetDataLength+0x48>)
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	440a      	add	r2, r1
 80010f6:	7812      	ldrb	r2, [r2, #0]
 80010f8:	4611      	mov	r1, r2
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	440a      	add	r2, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4313      	orrs	r3, r2
 8001104:	604b      	str	r3, [r1, #4]
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	08005a70 	.word	0x08005a70

08001118 <LL_DMA_ConfigAddresses>:
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	2b10      	cmp	r3, #16
 800112e:	d114      	bne.n	800115a <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <LL_DMA_ConfigAddresses+0x78>)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	4413      	add	r3, r2
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <LL_DMA_ConfigAddresses+0x78>)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	461a      	mov	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	6093      	str	r3, [r2, #8]
}
 8001158:	e013      	b.n	8001182 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 800115a:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <LL_DMA_ConfigAddresses+0x78>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	4413      	add	r3, r2
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <LL_DMA_ConfigAddresses+0x78>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4413      	add	r3, r2
 800117c:	461a      	mov	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	60d3      	str	r3, [r2, #12]
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	08005a70 	.word	0x08005a70

08001194 <i2cdevReadRegSeq_DMA>:

}


uint8_t *i2cdevReadRegSeq_DMA(I2C_TypeDef *I2Cx, uint8_t SlaveAddr_IC, uint8_t target_reg, uint8_t *rx_buffer, uint16_t size, DMA_Callback callback)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	72fb      	strb	r3, [r7, #11]
 80011a2:	4613      	mov	r3, r2
 80011a4:	72bb      	strb	r3, [r7, #10]
	//Address process
	SlaveAddr_IC = SlaveAddr_IC<<1;
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	72fb      	strb	r3, [r7, #11]

	//I2C wait for : BUS BUSY
	uint32_t counter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 80011b0:	e00b      	b.n	80011ca <i2cdevReadRegSeq_DMA+0x36>
		counter++;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
		if( counter == 25000 ) { //150ms
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80011be:	4293      	cmp	r3, r2
 80011c0:	d103      	bne.n	80011ca <i2cdevReadRegSeq_DMA+0x36>
			Error_Handler();
 80011c2:	f000 fac9 	bl	8001758 <Error_Handler>
			return NULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e068      	b.n	800129c <i2cdevReadRegSeq_DMA+0x108>
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff fef4 	bl	8000fb8 <LL_I2C_IsActiveFlag_BUSY>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d0ed      	beq.n	80011b2 <i2cdevReadRegSeq_DMA+0x1e>
		}
	}

	//Write the TARGET REGISTER to the I2C slave
	LL_I2C_HandleTransfer(I2Cx , SlaveAddr_IC , LL_I2C_ADDRSLAVE_7BIT , 1 , LL_I2C_MODE_SOFTEND , LL_I2C_GENERATE_START_WRITE); //LL_I2C_GENERATE_START_READ
 80011d6:	7af9      	ldrb	r1, [r7, #11]
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <i2cdevReadRegSeq_DMA+0x110>)
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2200      	movs	r2, #0
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f7ff ff19 	bl	800101c <LL_I2C_HandleTransfer>

	//I2C wait for : TX REG BUSY
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 80011ea:	bf00      	nop
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff febd 	bl	8000f6c <LL_I2C_IsActiveFlag_TXE>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f9      	beq.n	80011ec <i2cdevReadRegSeq_DMA+0x58>

	LL_I2C_TransmitData8(I2Cx, target_reg);
 80011f8:	7abb      	ldrb	r3, [r7, #10]
 80011fa:	4619      	mov	r1, r3
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7ff ff33 	bl	8001068 <LL_I2C_TransmitData8>

	//I2C wait for : TX REG BUSY AND CLEAR
	counter = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 8001206:	e00e      	b.n	8001226 <i2cdevReadRegSeq_DMA+0x92>
		counter++;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
		if( counter == 25000){ //150ms
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001214:	4293      	cmp	r3, r2
 8001216:	d106      	bne.n	8001226 <i2cdevReadRegSeq_DMA+0x92>
			LL_I2C_ClearFlag_TXE(I2Cx);
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff fef1 	bl	8001000 <LL_I2C_ClearFlag_TXE>
			Error_Handler();
 800121e:	f000 fa9b 	bl	8001758 <Error_Handler>
			return NULL;
 8001222:	2300      	movs	r3, #0
 8001224:	e03a      	b.n	800129c <i2cdevReadRegSeq_DMA+0x108>
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff fea0 	bl	8000f6c <LL_I2C_IsActiveFlag_TXE>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0ea      	beq.n	8001208 <i2cdevReadRegSeq_DMA+0x74>
		}
	}

	//I2C wait for : TX COMPLETE
	while(LL_I2C_IsActiveFlag_TC(I2Cx)==RESET);
 8001232:	bf00      	nop
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff feac 	bl	8000f92 <LL_I2C_IsActiveFlag_TC>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f9      	beq.n	8001234 <i2cdevReadRegSeq_DMA+0xa0>

	LL_I2C_ClearFlag_STOP(I2Cx);
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fecd 	bl	8000fe0 <LL_I2C_ClearFlag_STOP>

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, size ,LL_I2C_MODE_AUTOEND ,LL_I2C_GENERATE_START_READ);
 8001246:	7af9      	ldrb	r1, [r7, #11]
 8001248:	8c3b      	ldrh	r3, [r7, #32]
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <i2cdevReadRegSeq_DMA+0x114>)
 800124c:	9201      	str	r2, [sp, #4]
 800124e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001252:	9200      	str	r2, [sp, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fee0 	bl	800101c <LL_I2C_HandleTransfer>

	//I2C DMA Transfer
	LL_DMA_ConfigAddresses(DMA1,
 800125c:	2101      	movs	r1, #1
 800125e:	4813      	ldr	r0, [pc, #76]	; (80012ac <i2cdevReadRegSeq_DMA+0x118>)
 8001260:	f7ff fe6e 	bl	8000f40 <LL_I2C_DMA_GetRegAddr>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2100      	movs	r1, #0
 800126a:	9100      	str	r1, [sp, #0]
 800126c:	2106      	movs	r1, #6
 800126e:	4810      	ldr	r0, [pc, #64]	; (80012b0 <i2cdevReadRegSeq_DMA+0x11c>)
 8001270:	f7ff ff52 	bl	8001118 <LL_DMA_ConfigAddresses>
						   LL_DMA_CHANNEL_7,
						   LL_I2C_DMA_GetRegAddr(I2C1,LL_I2C_DMA_REG_DATA_RECEIVE),
						   (uint32_t)rx_buffer,
						   LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, size);
 8001274:	8c3b      	ldrh	r3, [r7, #32]
 8001276:	461a      	mov	r2, r3
 8001278:	2106      	movs	r1, #6
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <i2cdevReadRegSeq_DMA+0x11c>)
 800127c:	f7ff ff26 	bl	80010cc <LL_DMA_SetDataLength>
    LL_I2C_EnableDMAReq_RX(I2C1);
 8001280:	480a      	ldr	r0, [pc, #40]	; (80012ac <i2cdevReadRegSeq_DMA+0x118>)
 8001282:	f7ff fe4d 	bl	8000f20 <LL_I2C_EnableDMAReq_RX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001286:	2106      	movs	r1, #6
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <i2cdevReadRegSeq_DMA+0x11c>)
 800128a:	f7ff fefd 	bl	8001088 <LL_DMA_EnableChannel>
    //Debug problem :	TBD
    osDelay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f002 fc7b 	bl	8003b8a <osDelay>
    //TBD: double check if need Stop clear here.
    LL_I2C_ClearFlag_STOP(I2Cx);
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f7ff fea3 	bl	8000fe0 <LL_I2C_ClearFlag_STOP>

    return rx_buffer;
 800129a:	687b      	ldr	r3, [r7, #4]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	80002000 	.word	0x80002000
 80012a8:	80002400 	.word	0x80002400
 80012ac:	40005400 	.word	0x40005400
 80012b0:	40020000 	.word	0x40020000

080012b4 <I2C_DMA_TransferComplete_Callback>:

void I2C_DMA_TransferComplete_Callback(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    printf("DMA_Cb\r\n");
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <I2C_DMA_TransferComplete_Callback+0x10>)
 80012ba:	f003 ff5d 	bl	8005178 <puts>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08005a50 	.word	0x08005a50

080012c8 <LL_RCC_LSE_Enable>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <LL_RCC_LSE_Enable+0x20>)
 80012ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <LL_RCC_LSE_Enable+0x20>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <LL_RCC_LSE_SetDriveCapability>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80012f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fa:	f023 0218 	bic.w	r2, r3, #24
 80012fe:	4905      	ldr	r1, [pc, #20]	; (8001314 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000

08001318 <LL_RCC_LSE_IsReady>:
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <LL_RCC_LSE_IsReady+0x24>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	d101      	bne.n	800132e <LL_RCC_LSE_IsReady+0x16>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <LL_RCC_LSE_IsReady+0x18>
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <LL_RCC_MSI_Enable>:
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <LL_RCC_MSI_Enable+0x1c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <LL_RCC_MSI_Enable+0x1c>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000

08001360 <LL_RCC_MSI_IsReady>:
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <LL_RCC_MSI_IsReady+0x20>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b02      	cmp	r3, #2
 800136e:	d101      	bne.n	8001374 <LL_RCC_MSI_IsReady+0x14>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <LL_RCC_MSI_IsReady+0x16>
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000

08001384 <LL_RCC_MSI_EnablePLLMode>:
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <LL_RCC_MSI_EnableRangeSelection>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <LL_RCC_MSI_SetRange>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <LL_RCC_MSI_SetRange+0x24>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	4904      	ldr	r1, [pc, #16]	; (80013e8 <LL_RCC_MSI_SetRange+0x24>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000

080013ec <LL_RCC_MSI_SetCalibTrimming>:
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	4904      	ldr	r1, [pc, #16]	; (8001414 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <LL_RCC_SetSysClkSource>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <LL_RCC_SetSysClkSource+0x24>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 0203 	bic.w	r2, r3, #3
 8001428:	4904      	ldr	r1, [pc, #16]	; (800143c <LL_RCC_SetSysClkSource+0x24>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000

08001440 <LL_RCC_GetSysClkSource>:
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <LL_RCC_GetSysClkSource+0x18>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 030c 	and.w	r3, r3, #12
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <LL_RCC_SetAHBPrescaler>:
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <LL_RCC_SetAHBPrescaler+0x24>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146c:	4904      	ldr	r1, [pc, #16]	; (8001480 <LL_RCC_SetAHBPrescaler+0x24>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000

08001484 <LL_RCC_SetAPB1Prescaler>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4313      	orrs	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000

080014ac <LL_RCC_SetAPB2Prescaler>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014bc:	4904      	ldr	r1, [pc, #16]	; (80014d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000

080014d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <LL_RCC_PLL_Enable+0x1c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <LL_RCC_PLL_Enable+0x1c>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <LL_RCC_PLL_IsReady+0x24>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001504:	d101      	bne.n	800150a <LL_RCC_PLL_IsReady+0x16>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_RCC_PLL_IsReady+0x18>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001530:	4013      	ands	r3, r2
 8001532:	68f9      	ldr	r1, [r7, #12]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	0212      	lsls	r2, r2, #8
 800153c:	4311      	orrs	r1, r2
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	4904      	ldr	r1, [pc, #16]	; (8001554 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001544:	4313      	orrs	r3, r2
 8001546:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000
 8001558:	f9ff808c 	.word	0xf9ff808c

0800155c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <LL_FLASH_SetLatency+0x24>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 0207 	bic.w	r2, r3, #7
 800158c:	4904      	ldr	r1, [pc, #16]	; (80015a0 <LL_FLASH_SetLatency+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40022000 	.word	0x40022000

080015a4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <LL_FLASH_GetLatency+0x18>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000

080015c0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80015d0:	4904      	ldr	r1, [pc, #16]	; (80015e4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40007000 	.word	0x40007000

080015e8 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <LL_PWR_EnableBkUpAccess+0x1c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <LL_PWR_EnableBkUpAccess+0x1c>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40007000 	.word	0x40007000

08001608 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001618:	d101      	bne.n	800161e <LL_PWR_IsActiveFlag_VOS+0x16>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_PWR_IsActiveFlag_VOS+0x18>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40007000 	.word	0x40007000

08001630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09a      	sub	sp, #104	; 0x68
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001636:	f000 fbd4 	bl	8001de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163a:	f000 f815 	bl	8001668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163e:	f7ff f8f5 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 8001642:	f7ff f807 	bl	8000654 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001646:	f000 fae5 	bl	8001c14 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800164a:	f7ff fb95 	bl	8000d78 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800164e:	f000 fab1 	bl	8001bb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <main+0x34>)
 8001654:	f000 f886 	bl	8001764 <RetargetInit>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001658:	f7ff f85e 	bl	8000718 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800165c:	f002 fa42 	bl	8003ae4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001660:	e7fe      	b.n	8001660 <main+0x30>
 8001662:	bf00      	nop
 8001664:	200003bc 	.word	0x200003bc

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 800166c:	2004      	movs	r0, #4
 800166e:	f7ff ff85 	bl	800157c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001672:	bf00      	nop
 8001674:	f7ff ff96 	bl	80015a4 <LL_FLASH_GetLatency>
 8001678:	4603      	mov	r3, r0
 800167a:	2b04      	cmp	r3, #4
 800167c:	d1fa      	bne.n	8001674 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800167e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001682:	f7ff ff9d 	bl	80015c0 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8001686:	bf00      	nop
 8001688:	f7ff ffbe 	bl	8001608 <LL_PWR_IsActiveFlag_VOS>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1fa      	bne.n	8001688 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8001692:	f7ff fe55 	bl	8001340 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001696:	bf00      	nop
 8001698:	f7ff fe62 	bl	8001360 <LL_RCC_MSI_IsReady>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d1fa      	bne.n	8001698 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 80016a2:	f7ff fe7f 	bl	80013a4 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 80016a6:	2060      	movs	r0, #96	; 0x60
 80016a8:	f7ff fe8c 	bl	80013c4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fe9d 	bl	80013ec <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 80016b2:	f7ff ff99 	bl	80015e8 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fe18 	bl	80012ec <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 80016bc:	f7ff fe04 	bl	80012c8 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 80016c0:	bf00      	nop
 80016c2:	f7ff fe29 	bl	8001318 <LL_RCC_LSE_IsReady>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d1fa      	bne.n	80016c2 <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 80016cc:	f7ff fe5a 	bl	8001384 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 80016d0:	2300      	movs	r3, #0
 80016d2:	2228      	movs	r2, #40	; 0x28
 80016d4:	2100      	movs	r1, #0
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff ff20 	bl	800151c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80016dc:	f7ff ff3e 	bl	800155c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80016e0:	f7ff fef8 	bl	80014d4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80016e4:	bf00      	nop
 80016e6:	f7ff ff05 	bl	80014f4 <LL_RCC_PLL_IsReady>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d1fa      	bne.n	80016e6 <SystemClock_Config+0x7e>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f7ff fe91 	bl	8001418 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80016f6:	bf00      	nop
 80016f8:	f7ff fea2 	bl	8001440 <LL_RCC_GetSysClkSource>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d1fa      	bne.n	80016f8 <SystemClock_Config+0x90>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff feaa 	bl	800145c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff febb 	bl	8001484 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fecc 	bl	80014ac <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <SystemClock_Config+0xc8>)
 8001716:	f002 f9bd 	bl	8003a94 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800171a:	200f      	movs	r0, #15
 800171c:	f000 f910 	bl	8001940 <HAL_InitTick>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001726:	f000 f817 	bl	8001758 <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	04c4b400 	.word	0x04c4b400

08001734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001746:	f000 fb65 	bl	8001e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40012c00 	.word	0x40012c00

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>
	...

08001764 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <RetargetInit+0x28>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <RetargetInit+0x2c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6898      	ldr	r0, [r3, #8]
 8001778:	2300      	movs	r3, #0
 800177a:	2202      	movs	r2, #2
 800177c:	2100      	movs	r1, #0
 800177e:	f003 fd03 	bl	8005188 <setvbuf>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200002e0 	.word	0x200002e0
 8001790:	20000068 	.word	0x20000068

08001794 <_isatty>:

int _isatty(int fd) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db04      	blt.n	80017ac <_isatty+0x18>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	dc01      	bgt.n	80017ac <_isatty+0x18>
    return 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e005      	b.n	80017b8 <_isatty+0x24>

  errno = EBADF;
 80017ac:	f003 fec0 	bl	8005530 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2209      	movs	r2, #9
 80017b4:	601a      	str	r2, [r3, #0]
  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_write>:

int _write(int fd, char* ptr, int len) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d002      	beq.n	80017d8 <_write+0x18>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d111      	bne.n	80017fc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <_write+0x54>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	f001 f927 	bl	8002a38 <HAL_UART_Transmit>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <_write+0x38>
      return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	e008      	b.n	800180a <_write+0x4a>
    else
      return EIO;
 80017f8:	2305      	movs	r3, #5
 80017fa:	e006      	b.n	800180a <_write+0x4a>
  }
  errno = EBADF;
 80017fc:	f003 fe98 	bl	8005530 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	2209      	movs	r2, #9
 8001804:	601a      	str	r2, [r3, #0]
  return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002e0 	.word	0x200002e0

08001818 <_close>:

int _close(int fd) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db04      	blt.n	8001830 <_close+0x18>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b02      	cmp	r3, #2
 800182a:	dc01      	bgt.n	8001830 <_close+0x18>
    return 0;
 800182c:	2300      	movs	r3, #0
 800182e:	e006      	b.n	800183e <_close+0x26>

  errno = EBADF;
 8001830:	f003 fe7e 	bl	8005530 <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	2209      	movs	r2, #9
 8001838:	601a      	str	r2, [r3, #0]
  return -1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001852:	f003 fe6d 	bl	8005530 <__errno>
 8001856:	4603      	mov	r3, r0
 8001858:	2209      	movs	r2, #9
 800185a:	601a      	str	r2, [r3, #0]
  return -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_read>:

int _read(int fd, char* ptr, int len) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d110      	bne.n	800189c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <_read+0x4c>)
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	2201      	movs	r2, #1
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	f001 f961 	bl	8002b4c <HAL_UART_Receive>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <_read+0x30>
      return 1;
 8001894:	2301      	movs	r3, #1
 8001896:	e008      	b.n	80018aa <_read+0x42>
    else
      return EIO;
 8001898:	2305      	movs	r3, #5
 800189a:	e006      	b.n	80018aa <_read+0x42>
  }
  errno = EBADF;
 800189c:	f003 fe48 	bl	8005530 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2209      	movs	r2, #9
 80018a4:	601a      	str	r2, [r3, #0]
  return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200002e0 	.word	0x200002e0

080018b8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db08      	blt.n	80018da <_fstat+0x22>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	dc05      	bgt.n	80018da <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d4:	605a      	str	r2, [r3, #4]
    return 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e005      	b.n	80018e6 <_fstat+0x2e>
  }

  errno = EBADF;
 80018da:	f003 fe29 	bl	8005530 <__errno>
 80018de:	4603      	mov	r3, r0
 80018e0:	2209      	movs	r2, #9
 80018e2:	601a      	str	r2, [r3, #0]
  return 0;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_MspInit+0x4c>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_MspInit+0x4c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6613      	str	r3, [r2, #96]	; 0x60
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_MspInit+0x4c>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_MspInit+0x4c>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_MspInit+0x4c>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6593      	str	r3, [r2, #88]	; 0x58
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_MspInit+0x4c>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	210f      	movs	r1, #15
 800192a:	f06f 0001 	mvn.w	r0, #1
 800192e:	f000 fb49 	bl	8001fc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_InitTick+0xc8>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	4a2d      	ldr	r2, [pc, #180]	; (8001a08 <HAL_InitTick+0xc8>)
 8001954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001958:	6613      	str	r3, [r2, #96]	; 0x60
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_InitTick+0xc8>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001966:	f107 020c 	add.w	r2, r7, #12
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fd7f 	bl	8002474 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001976:	f000 fd67 	bl	8002448 <HAL_RCC_GetPCLK2Freq>
 800197a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	4a23      	ldr	r2, [pc, #140]	; (8001a0c <HAL_InitTick+0xcc>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	0c9b      	lsrs	r3, r3, #18
 8001986:	3b01      	subs	r3, #1
 8001988:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_InitTick+0xd0>)
 800198c:	4a21      	ldr	r2, [pc, #132]	; (8001a14 <HAL_InitTick+0xd4>)
 800198e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_InitTick+0xd0>)
 8001992:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001996:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_InitTick+0xd0>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_InitTick+0xd0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_InitTick+0xd0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_InitTick+0xd0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80019b0:	4817      	ldr	r0, [pc, #92]	; (8001a10 <HAL_InitTick+0xd0>)
 80019b2:	f000 fd91 	bl	80024d8 <HAL_TIM_Base_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80019bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11b      	bne.n	80019fc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80019c4:	4812      	ldr	r0, [pc, #72]	; (8001a10 <HAL_InitTick+0xd0>)
 80019c6:	f000 fde9 	bl	800259c <HAL_TIM_Base_Start_IT>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d111      	bne.n	80019fc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019d8:	2019      	movs	r0, #25
 80019da:	f000 fb0f 	bl	8001ffc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d808      	bhi.n	80019f6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	2019      	movs	r0, #25
 80019ea:	f000 faeb 	bl	8001fc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_InitTick+0xd8>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e002      	b.n	80019fc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3730      	adds	r7, #48	; 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	431bde83 	.word	0x431bde83
 8001a10:	200002e4 	.word	0x200002e4
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	20000004 	.word	0x20000004

08001a1c <LL_DMA_IsActiveFlag_TC7>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a30:	d101      	bne.n	8001a36 <LL_DMA_IsActiveFlag_TC7+0x1a>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_DMA_IsActiveFlag_TC7+0x1c>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_DMA_ClearFlag_TC7>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a52:	605a      	str	r2, [r3, #4]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	//Judge TX complete
	    if (LL_DMA_IsActiveFlag_TC7(DMA1))
 8001aa0:	4806      	ldr	r0, [pc, #24]	; (8001abc <DMA1_Channel7_IRQHandler+0x20>)
 8001aa2:	f7ff ffbb 	bl	8001a1c <LL_DMA_IsActiveFlag_TC7>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <DMA1_Channel7_IRQHandler+0x1a>
	    {
	        // Clear TX complete
	        LL_DMA_ClearFlag_TC7(DMA1);
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <DMA1_Channel7_IRQHandler+0x20>)
 8001aae:	f7ff ffc9 	bl	8001a44 <LL_DMA_ClearFlag_TC7>

	        // callback
	        I2C_DMA_TransferComplete_Callback();
 8001ab2:	f7ff fbff 	bl	80012b4 <I2C_DMA_TransferComplete_Callback>
	    }
	}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40020000 	.word	0x40020000

08001ac0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ac6:	f000 fdbd 	bl	8002644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002e4 	.word	0x200002e4

08001ad4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */

  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f003 fd06 	bl	8005530 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20010000 	.word	0x20010000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	20000330 	.word	0x20000330
 8001b58:	200012a0 	.word	0x200012a0

08001b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <LL_RCC_SetUSARTClockSource>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <LL_RCC_SetUSARTClockSource+0x30>)
 8001b8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0c1b      	lsrs	r3, r3, #16
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4905      	ldr	r1, [pc, #20]	; (8001bb0 <LL_RCC_SetUSARTClockSource+0x30>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bba:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <MX_USART1_UART_Init+0x5c>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_USART1_UART_Init+0x58>)
 8001bf8:	f000 fed0 	bl	800299c <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c02:	f7ff fda9 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000334 	.word	0x20000334
 8001c10:	40013800 	.word	0x40013800

08001c14 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <MX_USART2_UART_Init+0x5c>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USART2_UART_Init+0x58>)
 8001c58:	f000 fea0 	bl	800299c <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c62:	f7ff fd79 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200003bc 	.word	0x200003bc
 8001c70:	40004400 	.word	0x40004400

08001c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a3b      	ldr	r2, [pc, #236]	; (8001d80 <HAL_UART_MspInit+0x10c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d12c      	bne.n	8001cf0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8001c96:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001c9a:	f7ff ff71 	bl	8001b80 <LL_RCC_SetUSARTClockSource>

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	4a38      	ldr	r2, [pc, #224]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8001caa:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cce:	23c0      	movs	r3, #192	; 0xc0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4827      	ldr	r0, [pc, #156]	; (8001d88 <HAL_UART_MspInit+0x114>)
 8001cea:	f000 f995 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cee:	e043      	b.n	8001d78 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_UART_MspInit+0x118>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d13e      	bne.n	8001d78 <HAL_UART_MspInit+0x104>
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001cfa:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001cfe:	f7ff ff3f 	bl	8001b80 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_UART_MspInit+0x110>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d32:	2304      	movs	r3, #4
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d42:	2307      	movs	r3, #7
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d50:	f000 f962 	bl	8002018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001d66:	2303      	movs	r3, #3
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f000 f950 	bl	8002018 <HAL_GPIO_Init>
}
 8001d78:	bf00      	nop
 8001d7a:	3730      	adds	r7, #48	; 0x30
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	40004400 	.word	0x40004400

08001d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d94:	f7ff fee2 	bl	8001b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d9a:	490d      	ldr	r1, [pc, #52]	; (8001dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <LoopForever+0xe>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db0:	4c0a      	ldr	r4, [pc, #40]	; (8001ddc <LoopForever+0x16>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f003 fbbd 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc2:	f7ff fc35 	bl	8001630 <main>

08001dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001dd4:	08005ac0 	.word	0x08005ac0
  ldr r2, =_sbss
 8001dd8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001ddc:	200012a0 	.word	0x200012a0

08001de0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_IRQHandler>

08001de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f8de 	bl	8001fae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df2:	200f      	movs	r0, #15
 8001df4:	f7ff fda4 	bl	8001940 <HAL_InitTick>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	e001      	b.n	8001e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e04:	f7ff fd74 	bl	80018f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e08:	79fb      	ldrb	r3, [r7, #7]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000008 	.word	0x20000008
 8001e38:	20000444 	.word	0x20000444

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000444 	.word	0x20000444

08001e54 <__NVIC_SetPriorityGrouping>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff4c 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd6:	f7ff ff61 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8001fda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7ff ffb1 	bl	8001f48 <NVIC_EncodePriority>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff80 	bl	8001ef4 <__NVIC_SetPriority>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff54 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e148      	b.n	80022ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 813a 	beq.w	80022b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d005      	beq.n	8002058 <HAL_GPIO_Init+0x40>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d130      	bne.n	80020ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800208e:	2201      	movs	r2, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 0201 	and.w	r2, r3, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d017      	beq.n	80020f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d123      	bne.n	800214a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	6939      	ldr	r1, [r7, #16]
 8002146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0203 	and.w	r2, r3, #3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8094 	beq.w	80022b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_GPIO_Init+0x2c0>)
 800218e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <HAL_GPIO_Init+0x2c0>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6613      	str	r3, [r2, #96]	; 0x60
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_GPIO_Init+0x2c0>)
 800219a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a4:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <HAL_GPIO_Init+0x2c4>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ce:	d00d      	beq.n	80021ec <HAL_GPIO_Init+0x1d4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a43      	ldr	r2, [pc, #268]	; (80022e0 <HAL_GPIO_Init+0x2c8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d007      	beq.n	80021e8 <HAL_GPIO_Init+0x1d0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <HAL_GPIO_Init+0x2cc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_GPIO_Init+0x1cc>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1d6>
 80021e4:	2307      	movs	r3, #7
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1d6>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1d6>
 80021ec:	2300      	movs	r3, #0
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021fe:	4937      	ldr	r1, [pc, #220]	; (80022dc <HAL_GPIO_Init+0x2c4>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002230:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800225a:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002284:	4a18      	ldr	r2, [pc, #96]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f aeaf 	bne.w	8002028 <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	48000800 	.word	0x48000800
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fa:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x34>
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d121      	bne.n	800235e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d11e      	bne.n	800235e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e005      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002348:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10d      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d102      	bne.n	800236a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	e004      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d101      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_RCC_GetSysClockFreq+0x114>)
 8002372:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d134      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0xa6>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d003      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0xac>
 8002390:	e005      	b.n	800239e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002394:	617b      	str	r3, [r7, #20]
      break;
 8002396:	e005      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCC_GetSysClockFreq+0x114>)
 800239a:	617b      	str	r3, [r7, #20]
      break;
 800239c:	e002      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	617b      	str	r3, [r7, #20]
      break;
 80023a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	3301      	adds	r3, #1
 80023b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	fb03 f202 	mul.w	r2, r3, r2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	0e5b      	lsrs	r3, r3, #25
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	3301      	adds	r3, #1
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023e4:	69bb      	ldr	r3, [r7, #24]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08005a80 	.word	0x08005a80
 80023fc:	00f42400 	.word	0x00f42400
 8002400:	007a1200 	.word	0x007a1200

08002404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_RCC_GetHCLKFreq+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000000 	.word	0x20000000

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002420:	f7ff fff0 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4904      	ldr	r1, [pc, #16]	; (8002444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	08005a78 	.word	0x08005a78

08002448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800244c:	f7ff ffda 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0adb      	lsrs	r3, r3, #11
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4904      	ldr	r1, [pc, #16]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	08005a78 	.word	0x08005a78

08002474 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	220f      	movs	r2, #15
 8002482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0203 	and.w	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_RCC_GetClockConfig+0x5c>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_GetClockConfig+0x5c>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <HAL_RCC_GetClockConfig+0x60>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0207 	and.w	r2, r3, #7
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	601a      	str	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e049      	b.n	800257e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f841 	bl	8002586 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f000 f9be 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d001      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e03b      	b.n	800262c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_TIM_Base_Start_IT+0x9c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_TIM_Base_Start_IT+0x4e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025de:	d004      	beq.n	80025ea <HAL_TIM_Base_Start_IT+0x4e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a15      	ldr	r2, [pc, #84]	; (800263c <HAL_TIM_Base_Start_IT+0xa0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d115      	bne.n	8002616 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_TIM_Base_Start_IT+0xa4>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d015      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x8c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d011      	beq.n	8002628 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002614:	e008      	b.n	8002628 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e000      	b.n	800262a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002628:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40014000 	.word	0x40014000
 8002640:	00010007 	.word	0x00010007

08002644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d020      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01b      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0202 	mvn.w	r2, #2
 8002678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8e4 	bl	800285c <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8d6 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f8e7 	bl	8002870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d020      	beq.n	80026f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01b      	beq.n	80026f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0204 	mvn.w	r2, #4
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8be 	bl	800285c <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8b0 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f8c1 	bl	8002870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d020      	beq.n	8002740 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01b      	beq.n	8002740 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0208 	mvn.w	r2, #8
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2204      	movs	r2, #4
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f898 	bl	800285c <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f88a 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f89b 	bl	8002870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d020      	beq.n	800278c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0210 	mvn.w	r2, #16
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2208      	movs	r2, #8
 8002762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f872 	bl	800285c <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f864 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f875 	bl	8002870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0201 	mvn.w	r2, #1
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe ffc2 	bl	8001734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8d0 	bl	8002974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00c      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8c8 	bl	8002988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f834 	bl	8002884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0220 	mvn.w	r2, #32
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f890 	bl	8002960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <TIM_Base_SetConfig+0xbc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x20>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d108      	bne.n	80028ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <TIM_Base_SetConfig+0xbc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00b      	beq.n	80028ea <TIM_Base_SetConfig+0x52>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d007      	beq.n	80028ea <TIM_Base_SetConfig+0x52>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <TIM_Base_SetConfig+0xc0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d003      	beq.n	80028ea <TIM_Base_SetConfig+0x52>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <TIM_Base_SetConfig+0xc4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d108      	bne.n	80028fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <TIM_Base_SetConfig+0xbc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_Base_SetConfig+0xa0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <TIM_Base_SetConfig+0xc0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_Base_SetConfig+0xa0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <TIM_Base_SetConfig+0xc4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d103      	bne.n	8002940 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	615a      	str	r2, [r3, #20]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40014000 	.word	0x40014000
 800295c:	40014400 	.word	0x40014400

08002960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e040      	b.n	8002a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff f958 	bl	8001c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fba8 	bl	8003138 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f979 	bl	8002ce0 <UART_SetConfig>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e01b      	b.n	8002a30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fc27 	bl	800327c <UART_CheckIdleState>
 8002a2e:	4603      	mov	r3, r0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d178      	bne.n	8002b42 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_UART_Transmit+0x24>
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e071      	b.n	8002b44 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2221      	movs	r2, #33	; 0x21
 8002a6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a6e:	f7ff f9e5 	bl	8001e3c <HAL_GetTick>
 8002a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8c:	d108      	bne.n	8002aa0 <HAL_UART_Transmit+0x68>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d104      	bne.n	8002aa0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	e003      	b.n	8002aa8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002aa8:	e030      	b.n	8002b0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fc89 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e03c      	b.n	8002b44 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	881a      	ldrh	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002adc:	b292      	uxth	r2, r2
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	e008      	b.n	8002afa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b292      	uxth	r2, r2
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1c8      	bne.n	8002aaa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2140      	movs	r1, #64	; 0x40
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fc52 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e005      	b.n	8002b44 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	f040 80b6 	bne.w	8002cd4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_UART_Receive+0x28>
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0ae      	b.n	8002cd6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2222      	movs	r2, #34	; 0x22
 8002b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b8e:	f7ff f955 	bl	8001e3c <HAL_GetTick>
 8002b92:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	d10e      	bne.n	8002bcc <HAL_UART_Receive+0x80>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_UART_Receive+0x76>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bc0:	e02d      	b.n	8002c1e <HAL_UART_Receive+0xd2>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	22ff      	movs	r2, #255	; 0xff
 8002bc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bca:	e028      	b.n	8002c1e <HAL_UART_Receive+0xd2>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10d      	bne.n	8002bf0 <HAL_UART_Receive+0xa4>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <HAL_UART_Receive+0x9a>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	22ff      	movs	r2, #255	; 0xff
 8002be0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002be4:	e01b      	b.n	8002c1e <HAL_UART_Receive+0xd2>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	227f      	movs	r2, #127	; 0x7f
 8002bea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bee:	e016      	b.n	8002c1e <HAL_UART_Receive+0xd2>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf8:	d10d      	bne.n	8002c16 <HAL_UART_Receive+0xca>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <HAL_UART_Receive+0xc0>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	227f      	movs	r2, #127	; 0x7f
 8002c06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c0a:	e008      	b.n	8002c1e <HAL_UART_Receive+0xd2>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	223f      	movs	r2, #63	; 0x3f
 8002c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c14:	e003      	b.n	8002c1e <HAL_UART_Receive+0xd2>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c24:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	d108      	bne.n	8002c42 <HAL_UART_Receive+0xf6>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e003      	b.n	8002c4a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c4a:	e037      	b.n	8002cbc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2120      	movs	r1, #32
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fbb8 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e033      	b.n	8002cd6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10c      	bne.n	8002c8e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	8a7b      	ldrh	r3, [r7, #18]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	3302      	adds	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	e00d      	b.n	8002caa <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	8a7b      	ldrh	r3, [r7, #18]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1c1      	bne.n	8002c4c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
  }
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce4:	b08a      	sub	sp, #40	; 0x28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4bb4      	ldr	r3, [pc, #720]	; (8002fe0 <UART_SetConfig+0x300>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4aa9      	ldr	r2, [pc, #676]	; (8002fe4 <UART_SetConfig+0x304>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4aa0      	ldr	r2, [pc, #640]	; (8002fe8 <UART_SetConfig+0x308>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d126      	bne.n	8002db8 <UART_SetConfig+0xd8>
 8002d6a:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <UART_SetConfig+0x30c>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d81b      	bhi.n	8002db0 <UART_SetConfig+0xd0>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <UART_SetConfig+0xa0>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da1 	.word	0x08002da1
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002da9 	.word	0x08002da9
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d96:	e080      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9e:	e07c      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da6:	e078      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dae:	e074      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e070      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a8c      	ldr	r2, [pc, #560]	; (8002ff0 <UART_SetConfig+0x310>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d138      	bne.n	8002e34 <UART_SetConfig+0x154>
 8002dc2:	4b8a      	ldr	r3, [pc, #552]	; (8002fec <UART_SetConfig+0x30c>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	d82d      	bhi.n	8002e2c <UART_SetConfig+0x14c>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <UART_SetConfig+0xf8>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002e0d 	.word	0x08002e0d
 8002ddc:	08002e2d 	.word	0x08002e2d
 8002de0:	08002e2d 	.word	0x08002e2d
 8002de4:	08002e2d 	.word	0x08002e2d
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002e2d 	.word	0x08002e2d
 8002df0:	08002e2d 	.word	0x08002e2d
 8002df4:	08002e2d 	.word	0x08002e2d
 8002df8:	08002e15 	.word	0x08002e15
 8002dfc:	08002e2d 	.word	0x08002e2d
 8002e00:	08002e2d 	.word	0x08002e2d
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e25 	.word	0x08002e25
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e12:	e042      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e14:	2302      	movs	r3, #2
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1a:	e03e      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e22:	e03a      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e24:	2308      	movs	r3, #8
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2a:	e036      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e32:	e032      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6a      	ldr	r2, [pc, #424]	; (8002fe4 <UART_SetConfig+0x304>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d12a      	bne.n	8002e94 <UART_SetConfig+0x1b4>
 8002e3e:	4b6b      	ldr	r3, [pc, #428]	; (8002fec <UART_SetConfig+0x30c>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e4c:	d01a      	beq.n	8002e84 <UART_SetConfig+0x1a4>
 8002e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e52:	d81b      	bhi.n	8002e8c <UART_SetConfig+0x1ac>
 8002e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e58:	d00c      	beq.n	8002e74 <UART_SetConfig+0x194>
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5e:	d815      	bhi.n	8002e8c <UART_SetConfig+0x1ac>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <UART_SetConfig+0x18c>
 8002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e68:	d008      	beq.n	8002e7c <UART_SetConfig+0x19c>
 8002e6a:	e00f      	b.n	8002e8c <UART_SetConfig+0x1ac>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e72:	e012      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e74:	2302      	movs	r3, #2
 8002e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e7a:	e00e      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e82:	e00a      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e84:	2308      	movs	r3, #8
 8002e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8a:	e006      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e92:	e002      	b.n	8002e9a <UART_SetConfig+0x1ba>
 8002e94:	2310      	movs	r3, #16
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a51      	ldr	r2, [pc, #324]	; (8002fe4 <UART_SetConfig+0x304>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d17a      	bne.n	8002f9a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d824      	bhi.n	8002ef6 <UART_SetConfig+0x216>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <UART_SetConfig+0x1d4>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ed9 	.word	0x08002ed9
 8002eb8:	08002ef7 	.word	0x08002ef7
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ef7 	.word	0x08002ef7
 8002ec4:	08002ee7 	.word	0x08002ee7
 8002ec8:	08002ef7 	.word	0x08002ef7
 8002ecc:	08002ef7 	.word	0x08002ef7
 8002ed0:	08002ef7 	.word	0x08002ef7
 8002ed4:	08002eef 	.word	0x08002eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed8:	f7ff faa0 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 8002edc:	61f8      	str	r0, [r7, #28]
        break;
 8002ede:	e010      	b.n	8002f02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee0:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <UART_SetConfig+0x314>)
 8002ee2:	61fb      	str	r3, [r7, #28]
        break;
 8002ee4:	e00d      	b.n	8002f02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee6:	f7ff fa01 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8002eea:	61f8      	str	r0, [r7, #28]
        break;
 8002eec:	e009      	b.n	8002f02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef2:	61fb      	str	r3, [r7, #28]
        break;
 8002ef4:	e005      	b.n	8002f02 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8107 	beq.w	8003118 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d305      	bcc.n	8002f26 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d903      	bls.n	8002f2e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f2c:	e0f4      	b.n	8003118 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2200      	movs	r2, #0
 8002f32:	461c      	mov	r4, r3
 8002f34:	4615      	mov	r5, r2
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	022b      	lsls	r3, r5, #8
 8002f40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f44:	0222      	lsls	r2, r4, #8
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	6849      	ldr	r1, [r1, #4]
 8002f4a:	0849      	lsrs	r1, r1, #1
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	4688      	mov	r8, r1
 8002f50:	4681      	mov	r9, r0
 8002f52:	eb12 0a08 	adds.w	sl, r2, r8
 8002f56:	eb43 0b09 	adc.w	fp, r3, r9
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f68:	4650      	mov	r0, sl
 8002f6a:	4659      	mov	r1, fp
 8002f6c:	f7fd f930 	bl	80001d0 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7e:	d308      	bcc.n	8002f92 <UART_SetConfig+0x2b2>
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f86:	d204      	bcs.n	8002f92 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	e0c2      	b.n	8003118 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f98:	e0be      	b.n	8003118 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa2:	d16a      	bne.n	800307a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d834      	bhi.n	8003016 <UART_SetConfig+0x336>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <UART_SetConfig+0x2d4>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002ff9 	.word	0x08002ff9
 8002fbc:	08003001 	.word	0x08003001
 8002fc0:	08003017 	.word	0x08003017
 8002fc4:	08003007 	.word	0x08003007
 8002fc8:	08003017 	.word	0x08003017
 8002fcc:	08003017 	.word	0x08003017
 8002fd0:	08003017 	.word	0x08003017
 8002fd4:	0800300f 	.word	0x0800300f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7ff fa20 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 8002fdc:	61f8      	str	r0, [r7, #28]
        break;
 8002fde:	e020      	b.n	8003022 <UART_SetConfig+0x342>
 8002fe0:	efff69f3 	.word	0xefff69f3
 8002fe4:	40008000 	.word	0x40008000
 8002fe8:	40013800 	.word	0x40013800
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40004400 	.word	0x40004400
 8002ff4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff8:	f7ff fa26 	bl	8002448 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	61f8      	str	r0, [r7, #28]
        break;
 8002ffe:	e010      	b.n	8003022 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <UART_SetConfig+0x454>)
 8003002:	61fb      	str	r3, [r7, #28]
        break;
 8003004:	e00d      	b.n	8003022 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7ff f971 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 800300a:	61f8      	str	r0, [r7, #28]
        break;
 800300c:	e009      	b.n	8003022 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003012:	61fb      	str	r3, [r7, #28]
        break;
 8003014:	e005      	b.n	8003022 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d077      	beq.n	8003118 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005a      	lsls	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b0f      	cmp	r3, #15
 8003042:	d916      	bls.n	8003072 <UART_SetConfig+0x392>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d212      	bcs.n	8003072 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f023 030f 	bic.w	r3, r3, #15
 8003054:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	b29b      	uxth	r3, r3
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	b29a      	uxth	r2, r3
 8003062:	8afb      	ldrh	r3, [r7, #22]
 8003064:	4313      	orrs	r3, r2
 8003066:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	8afa      	ldrh	r2, [r7, #22]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	e052      	b.n	8003118 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003078:	e04e      	b.n	8003118 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800307a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800307e:	2b08      	cmp	r3, #8
 8003080:	d827      	bhi.n	80030d2 <UART_SetConfig+0x3f2>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x3a8>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030b5 	.word	0x080030b5
 8003090:	080030bd 	.word	0x080030bd
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030c3 	.word	0x080030c3
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030d3 	.word	0x080030d3
 80030a4:	080030d3 	.word	0x080030d3
 80030a8:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7ff f9b6 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 80030b0:	61f8      	str	r0, [r7, #28]
        break;
 80030b2:	e014      	b.n	80030de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7ff f9c8 	bl	8002448 <HAL_RCC_GetPCLK2Freq>
 80030b8:	61f8      	str	r0, [r7, #28]
        break;
 80030ba:	e010      	b.n	80030de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <UART_SetConfig+0x454>)
 80030be:	61fb      	str	r3, [r7, #28]
        break;
 80030c0:	e00d      	b.n	80030de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7ff f913 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80030c6:	61f8      	str	r0, [r7, #28]
        break;
 80030c8:	e009      	b.n	80030de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	61fb      	str	r3, [r7, #28]
        break;
 80030d0:	e005      	b.n	80030de <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030dc:	bf00      	nop
    }

    if (pclk != 0U)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d019      	beq.n	8003118 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	085a      	lsrs	r2, r3, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	441a      	add	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b0f      	cmp	r3, #15
 80030fc:	d909      	bls.n	8003112 <UART_SetConfig+0x432>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d205      	bcs.n	8003112 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e002      	b.n	8003118 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003124:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	00f42400 	.word	0x00f42400

08003138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01a      	beq.n	800324e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003236:	d10a      	bne.n	800324e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b098      	sub	sp, #96	; 0x60
 8003280:	af02      	add	r7, sp, #8
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800328c:	f7fe fdd6 	bl	8001e3c <HAL_GetTick>
 8003290:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d12e      	bne.n	80032fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a8:	2200      	movs	r2, #0
 80032aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f88c 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d021      	beq.n	80032fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
 80032da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e6      	bne.n	80032ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e062      	b.n	80033c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b04      	cmp	r3, #4
 800330a:	d149      	bne.n	80033a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003314:	2200      	movs	r2, #0
 8003316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f856 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d03c      	beq.n	80033a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	623b      	str	r3, [r7, #32]
   return(result);
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003344:	633b      	str	r3, [r7, #48]	; 0x30
 8003346:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800334a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e6      	bne.n	8003326 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3308      	adds	r3, #8
 800335e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	60fb      	str	r3, [r7, #12]
   return(result);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3308      	adds	r3, #8
 8003376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003378:	61fa      	str	r2, [r7, #28]
 800337a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	69b9      	ldr	r1, [r7, #24]
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	617b      	str	r3, [r7, #20]
   return(result);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e5      	bne.n	8003358 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e011      	b.n	80033c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3758      	adds	r7, #88	; 0x58
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033dc:	e049      	b.n	8003472 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d045      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe fd29 	bl	8001e3c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <UART_WaitOnFlagUntilTimeout+0x30>
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e048      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d031      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d110      	bne.n	800343e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2208      	movs	r2, #8
 8003422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f838 	bl	800349a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2208      	movs	r2, #8
 800342e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e029      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344c:	d111      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f81e 	bl	800349a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e00f      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d0a6      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800349a:	b480      	push	{r7}
 800349c:	b095      	sub	sp, #84	; 0x54
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
 80034c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e6      	bne.n	80034a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3308      	adds	r3, #8
 80034da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3308      	adds	r3, #8
 80034f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e5      	bne.n	80034d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	2b01      	cmp	r3, #1
 800350e:	d118      	bne.n	8003542 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	60bb      	str	r3, [r7, #8]
   return(result);
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 0310 	bic.w	r3, r3, #16
 8003524:	647b      	str	r3, [r7, #68]	; 0x44
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6979      	ldr	r1, [r7, #20]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	613b      	str	r3, [r7, #16]
   return(result);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e6      	bne.n	8003510 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003556:	bf00      	nop
 8003558:	3754      	adds	r7, #84	; 0x54
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <LL_GPIO_SetPinMode>:
{
 8003562:	b480      	push	{r7}
 8003564:	b08b      	sub	sp, #44	; 0x2c
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	613b      	str	r3, [r7, #16]
  return result;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003588:	2320      	movs	r3, #32
 800358a:	e003      	b.n	8003594 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	2103      	movs	r1, #3
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	401a      	ands	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	61fb      	str	r3, [r7, #28]
  return result;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80035b6:	2320      	movs	r3, #32
 80035b8:	e003      	b.n	80035c2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]
}
 80035d0:	bf00      	nop
 80035d2:	372c      	adds	r7, #44	; 0x2c
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_GPIO_SetPinOutputType>:
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	401a      	ands	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_GPIO_SetPinSpeed>:
{
 800360c:	b480      	push	{r7}
 800360e:	b08b      	sub	sp, #44	; 0x2c
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	613b      	str	r3, [r7, #16]
  return result;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003632:	2320      	movs	r3, #32
 8003634:	e003      	b.n	800363e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	2103      	movs	r1, #3
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	61fb      	str	r3, [r7, #28]
  return result;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003660:	2320      	movs	r3, #32
 8003662:	e003      	b.n	800366c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	fa01 f303 	lsl.w	r3, r1, r3
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	609a      	str	r2, [r3, #8]
}
 800367a:	bf00      	nop
 800367c:	372c      	adds	r7, #44	; 0x2c
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <LL_GPIO_SetPinPull>:
{
 8003686:	b480      	push	{r7}
 8003688:	b08b      	sub	sp, #44	; 0x2c
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	613b      	str	r3, [r7, #16]
  return result;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e003      	b.n	80036b8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2103      	movs	r1, #3
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	401a      	ands	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	61fb      	str	r3, [r7, #28]
  return result;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80036da:	2320      	movs	r3, #32
 80036dc:	e003      	b.n	80036e6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	431a      	orrs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	60da      	str	r2, [r3, #12]
}
 80036f4:	bf00      	nop
 80036f6:	372c      	adds	r7, #44	; 0x2c
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_GPIO_SetAFPin_0_7>:
{
 8003700:	b480      	push	{r7}
 8003702:	b08b      	sub	sp, #44	; 0x2c
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	613b      	str	r3, [r7, #16]
  return result;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003726:	2320      	movs	r3, #32
 8003728:	e003      	b.n	8003732 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	210f      	movs	r1, #15
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	401a      	ands	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	61fb      	str	r3, [r7, #28]
  return result;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e003      	b.n	8003760 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	372c      	adds	r7, #44	; 0x2c
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <LL_GPIO_SetAFPin_8_15>:
{
 800377a:	b480      	push	{r7}
 800377c:	b08b      	sub	sp, #44	; 0x2c
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	613b      	str	r3, [r7, #16]
  return result;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e003      	b.n	80037ae <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	210f      	movs	r1, #15
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	401a      	ands	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	61fb      	str	r3, [r7, #28]
  return result;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80037d2:	2320      	movs	r3, #32
 80037d4:	e003      	b.n	80037de <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80037ec:	bf00      	nop
 80037ee:	372c      	adds	r7, #44	; 0x2c
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	60fb      	str	r3, [r7, #12]
  return result;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <LL_GPIO_Init+0x26>
    return 32U;
 800381a:	2320      	movs	r3, #32
 800381c:	e003      	b.n	8003826 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003828:	e048      	b.n	80038bc <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	2101      	movs	r1, #1
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03a      	beq.n	80038b6 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d003      	beq.n	8003850 <LL_GPIO_Init+0x58>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d10e      	bne.n	800386e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	461a      	mov	r2, r3
 8003856:	69b9      	ldr	r1, [r7, #24]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fed7 	bl	800360c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	461a      	mov	r2, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff feb7 	bl	80035dc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	461a      	mov	r2, r3
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff05 	bl	8003686 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d111      	bne.n	80038a8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2bff      	cmp	r3, #255	; 0xff
 8003888:	d807      	bhi.n	800389a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	461a      	mov	r2, r3
 8003890:	69b9      	ldr	r1, [r7, #24]
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff34 	bl	8003700 <LL_GPIO_SetAFPin_0_7>
 8003898:	e006      	b.n	80038a8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	461a      	mov	r2, r3
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff69 	bl	800377a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	461a      	mov	r2, r3
 80038ae:	69b9      	ldr	r1, [r7, #24]
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fe56 	bl	8003562 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1af      	bne.n	800382a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <LL_I2C_Enable>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	601a      	str	r2, [r3, #0]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_I2C_Disable>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 0201 	bic.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	601a      	str	r2, [r3, #0]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_I2C_ConfigFilters>:
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0219      	lsls	r1, r3, #8
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	430b      	orrs	r3, r1
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_I2C_SetOwnAddress1>:
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003956:	f023 0307 	bic.w	r3, r3, #7
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	430a      	orrs	r2, r1
 8003960:	431a      	orrs	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_I2C_EnableOwnAddress1>:
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	609a      	str	r2, [r3, #8]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_I2C_DisableOwnAddress1>:
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_I2C_SetTiming>:
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	611a      	str	r2, [r3, #16]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <LL_I2C_SetMode>:
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_I2C_AcknowledgeNextData>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff65 	bl	80038f4 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6899      	ldr	r1, [r3, #8]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff6d 	bl	8003914 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ffb6 	bl	80039b2 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff44 	bl	80038d4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ffa0 	bl	8003992 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6919      	ldr	r1, [r3, #16]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff70 	bl	8003942 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff81 	bl	8003972 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ffa9 	bl	80039ce <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ffb6 	bl	80039f4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <LL_SetSystemCoreClock+0x1c>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6013      	str	r3, [r2, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000000 	.word	0x20000000

08003ab4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ac6:	2b84      	cmp	r3, #132	; 0x84
 8003ac8:	d005      	beq.n	8003ad6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003aca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3303      	adds	r3, #3
 8003ad4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ae8:	f000 fade 	bl	80040a8 <vTaskStartScheduler>
  
  return osOK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af4:	b089      	sub	sp, #36	; 0x24
 8003af6:	af04      	add	r7, sp, #16
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <osThreadCreate+0x54>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01c      	beq.n	8003b46 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685c      	ldr	r4, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691e      	ldr	r6, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ffc8 	bl	8003ab4 <makeFreeRtosPriority>
 8003b24:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b2e:	9202      	str	r2, [sp, #8]
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	9100      	str	r1, [sp, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4632      	mov	r2, r6
 8003b38:	4629      	mov	r1, r5
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f000 f8ed 	bl	8003d1a <xTaskCreateStatic>
 8003b40:	4603      	mov	r3, r0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e01c      	b.n	8003b80 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685c      	ldr	r4, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b52:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ffaa 	bl	8003ab4 <makeFreeRtosPriority>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f107 030c 	add.w	r3, r7, #12
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	9200      	str	r2, [sp, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	4629      	mov	r1, r5
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 f92f 	bl	8003dd4 <xTaskCreate>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d001      	beq.n	8003b80 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b80:	68fb      	ldr	r3, [r7, #12]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b8a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <osDelay+0x16>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	e000      	b.n	8003ba2 <osDelay+0x18>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fa4c 	bl	8004040 <vTaskDelay>
  
  return osOK;
 8003ba8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f103 0208 	add.w	r2, r3, #8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f103 0208 	add.w	r2, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f103 0208 	add.w	r2, r3, #8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d103      	bne.n	8003c74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e00c      	b.n	8003c8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3308      	adds	r3, #8
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	e002      	b.n	8003c82 <vListInsert+0x2e>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d2f6      	bcs.n	8003c7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6892      	ldr	r2, [r2, #8]
 8003cdc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6852      	ldr	r2, [r2, #4]
 8003ce6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d103      	bne.n	8003cfa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1e5a      	subs	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b08e      	sub	sp, #56	; 0x38
 8003d1e:	af04      	add	r7, sp, #16
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	61fb      	str	r3, [r7, #28]
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d60:	2354      	movs	r3, #84	; 0x54
 8003d62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b54      	cmp	r3, #84	; 0x54
 8003d68:	d00a      	beq.n	8003d80 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	61bb      	str	r3, [r7, #24]
}
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01e      	beq.n	8003dc6 <xTaskCreateStatic+0xac>
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01b      	beq.n	8003dc6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003da0:	2300      	movs	r3, #0
 8003da2:	9303      	str	r3, [sp, #12]
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f850 	bl	8003e5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dc0:	f000 f8d4 	bl	8003f6c <prvAddNewTaskToReadyList>
 8003dc4:	e001      	b.n	8003dca <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dca:	697b      	ldr	r3, [r7, #20]
	}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3728      	adds	r7, #40	; 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	; 0x30
 8003dd8:	af04      	add	r7, sp, #16
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fec5 	bl	8004b78 <pvPortMalloc>
 8003dee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00e      	beq.n	8003e14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003df6:	2054      	movs	r0, #84	; 0x54
 8003df8:	f000 febe 	bl	8004b78 <pvPortMalloc>
 8003dfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
 8003e0a:	e005      	b.n	8003e18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e0c:	6978      	ldr	r0, [r7, #20]
 8003e0e:	f000 ff7f 	bl	8004d10 <vPortFree>
 8003e12:	e001      	b.n	8003e18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d017      	beq.n	8003e4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9303      	str	r3, [sp, #12]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	9302      	str	r3, [sp, #8]
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f80e 	bl	8003e5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e42:	69f8      	ldr	r0, [r7, #28]
 8003e44:	f000 f892 	bl	8003f6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e002      	b.n	8003e54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e54:	69bb      	ldr	r3, [r7, #24]
	}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b088      	sub	sp, #32
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e76:	3b01      	subs	r3, #1
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f023 0307 	bic.w	r3, r3, #7
 8003e84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	617b      	str	r3, [r7, #20]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01f      	beq.n	8003eec <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	e012      	b.n	8003ed8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	7819      	ldrb	r1, [r3, #0]
 8003eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3334      	adds	r3, #52	; 0x34
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d006      	beq.n	8003ee0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	d9e9      	bls.n	8003eb2 <prvInitialiseNewTask+0x54>
 8003ede:	e000      	b.n	8003ee2 <prvInitialiseNewTask+0x84>
			{
				break;
 8003ee0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eea:	e003      	b.n	8003ef4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d901      	bls.n	8003efe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003efa:	2306      	movs	r3, #6
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f02:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	3304      	adds	r3, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fe6c 	bl	8003bf2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	3318      	adds	r3, #24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fe67 	bl	8003bf2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	f1c3 0207 	rsb	r2, r3, #7
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	69b8      	ldr	r0, [r7, #24]
 8003f4e:	f000 fc05 	bl	800475c <pxPortInitialiseStack>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f64:	bf00      	nop
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f74:	f000 fd1e 	bl	80049b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <prvAddNewTaskToReadyList+0xb8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4a29      	ldr	r2, [pc, #164]	; (8004024 <prvAddNewTaskToReadyList+0xb8>)
 8003f80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <prvAddNewTaskToReadyList+0xbc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f8a:	4a27      	ldr	r2, [pc, #156]	; (8004028 <prvAddNewTaskToReadyList+0xbc>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <prvAddNewTaskToReadyList+0xb8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d110      	bne.n	8003fba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f98:	f000 fabc 	bl	8004514 <prvInitialiseTaskLists>
 8003f9c:	e00d      	b.n	8003fba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f9e:	4b23      	ldr	r3, [pc, #140]	; (800402c <prvAddNewTaskToReadyList+0xc0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <prvAddNewTaskToReadyList+0xbc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d802      	bhi.n	8003fba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fb4:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <prvAddNewTaskToReadyList+0xbc>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fba:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <prvAddNewTaskToReadyList+0xc4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <prvAddNewTaskToReadyList+0xc4>)
 8003fc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <prvAddNewTaskToReadyList+0xc8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	4a18      	ldr	r2, [pc, #96]	; (8004034 <prvAddNewTaskToReadyList+0xc8>)
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4a15      	ldr	r2, [pc, #84]	; (8004038 <prvAddNewTaskToReadyList+0xcc>)
 8003fe4:	441a      	add	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7ff fe0d 	bl	8003c0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ff2:	f000 fd0f 	bl	8004a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <prvAddNewTaskToReadyList+0xc0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <prvAddNewTaskToReadyList+0xbc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	429a      	cmp	r2, r3
 800400a:	d207      	bcs.n	800401c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <prvAddNewTaskToReadyList+0xd0>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000548 	.word	0x20000548
 8004028:	20000448 	.word	0x20000448
 800402c:	20000554 	.word	0x20000554
 8004030:	20000564 	.word	0x20000564
 8004034:	20000550 	.word	0x20000550
 8004038:	2000044c 	.word	0x2000044c
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d017      	beq.n	8004082 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <vTaskDelay+0x60>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <vTaskDelay+0x30>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60bb      	str	r3, [r7, #8]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004070:	f000 f87a 	bl	8004168 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004074:	2100      	movs	r1, #0
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fb0a 	bl	8004690 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800407c:	f000 f882 	bl	8004184 <xTaskResumeAll>
 8004080:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <vTaskDelay+0x64>)
 800408a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000570 	.word	0x20000570
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040b6:	463a      	mov	r2, r7
 80040b8:	1d39      	adds	r1, r7, #4
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc fb10 	bl	80006e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040c4:	6839      	ldr	r1, [r7, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	9202      	str	r2, [sp, #8]
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	2300      	movs	r3, #0
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2300      	movs	r3, #0
 80040d4:	460a      	mov	r2, r1
 80040d6:	491e      	ldr	r1, [pc, #120]	; (8004150 <vTaskStartScheduler+0xa8>)
 80040d8:	481e      	ldr	r0, [pc, #120]	; (8004154 <vTaskStartScheduler+0xac>)
 80040da:	f7ff fe1e 	bl	8003d1a <xTaskCreateStatic>
 80040de:	4603      	mov	r3, r0
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <vTaskStartScheduler+0xb0>)
 80040e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <vTaskStartScheduler+0xb0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e001      	b.n	80040f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d116      	bne.n	800412a <vTaskStartScheduler+0x82>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	613b      	str	r3, [r7, #16]
}
 800410e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <vTaskStartScheduler+0xb4>)
 8004112:	f04f 32ff 	mov.w	r2, #4294967295
 8004116:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <vTaskStartScheduler+0xb8>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800411e:	4b11      	ldr	r3, [pc, #68]	; (8004164 <vTaskStartScheduler+0xbc>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004124:	f000 fba4 	bl	8004870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004128:	e00e      	b.n	8004148 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d10a      	bne.n	8004148 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	60fb      	str	r3, [r7, #12]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <vTaskStartScheduler+0x9e>
}
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	08005a58 	.word	0x08005a58
 8004154:	080044e5 	.word	0x080044e5
 8004158:	2000056c 	.word	0x2000056c
 800415c:	20000568 	.word	0x20000568
 8004160:	20000554 	.word	0x20000554
 8004164:	2000054c 	.word	0x2000054c

08004168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <vTaskSuspendAll+0x18>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	4a03      	ldr	r2, [pc, #12]	; (8004180 <vTaskSuspendAll+0x18>)
 8004174:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	20000570 	.word	0x20000570

08004184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <xTaskResumeAll+0x114>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	603b      	str	r3, [r7, #0]
}
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041b0:	f000 fc00 	bl	80049b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041b4:	4b38      	ldr	r3, [pc, #224]	; (8004298 <xTaskResumeAll+0x114>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	4a37      	ldr	r2, [pc, #220]	; (8004298 <xTaskResumeAll+0x114>)
 80041bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041be:	4b36      	ldr	r3, [pc, #216]	; (8004298 <xTaskResumeAll+0x114>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d161      	bne.n	800428a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041c6:	4b35      	ldr	r3, [pc, #212]	; (800429c <xTaskResumeAll+0x118>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d05d      	beq.n	800428a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ce:	e02e      	b.n	800422e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d0:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <xTaskResumeAll+0x11c>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3318      	adds	r3, #24
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fd72 	bl	8003cc6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fd6d 	bl	8003cc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	2201      	movs	r2, #1
 80041f2:	409a      	lsls	r2, r3
 80041f4:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <xTaskResumeAll+0x120>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <xTaskResumeAll+0x120>)
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4a27      	ldr	r2, [pc, #156]	; (80042a8 <xTaskResumeAll+0x124>)
 800420c:	441a      	add	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7ff fcf9 	bl	8003c0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	4b23      	ldr	r3, [pc, #140]	; (80042ac <xTaskResumeAll+0x128>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004228:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <xTaskResumeAll+0x12c>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <xTaskResumeAll+0x11c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1cc      	bne.n	80041d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800423c:	f000 fa08 	bl	8004650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004240:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <xTaskResumeAll+0x130>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d010      	beq.n	800426e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800424c:	f000 f836 	bl	80042bc <xTaskIncrementTick>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004256:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <xTaskResumeAll+0x12c>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f1      	bne.n	800424c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <xTaskResumeAll+0x130>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <xTaskResumeAll+0x12c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <xTaskResumeAll+0x134>)
 800427c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800428a:	f000 fbc3 	bl	8004a14 <vPortExitCritical>

	return xAlreadyYielded;
 800428e:	68bb      	ldr	r3, [r7, #8]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000570 	.word	0x20000570
 800429c:	20000548 	.word	0x20000548
 80042a0:	20000508 	.word	0x20000508
 80042a4:	20000550 	.word	0x20000550
 80042a8:	2000044c 	.word	0x2000044c
 80042ac:	20000448 	.word	0x20000448
 80042b0:	2000055c 	.word	0x2000055c
 80042b4:	20000558 	.word	0x20000558
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c6:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <xTaskIncrementTick+0x144>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 808e 	bne.w	80043ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042d0:	4b4c      	ldr	r3, [pc, #304]	; (8004404 <xTaskIncrementTick+0x148>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042d8:	4a4a      	ldr	r2, [pc, #296]	; (8004404 <xTaskIncrementTick+0x148>)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d120      	bne.n	8004326 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042e4:	4b48      	ldr	r3, [pc, #288]	; (8004408 <xTaskIncrementTick+0x14c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <xTaskIncrementTick+0x48>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	603b      	str	r3, [r7, #0]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <xTaskIncrementTick+0x46>
 8004304:	4b40      	ldr	r3, [pc, #256]	; (8004408 <xTaskIncrementTick+0x14c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	4b40      	ldr	r3, [pc, #256]	; (800440c <xTaskIncrementTick+0x150>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3e      	ldr	r2, [pc, #248]	; (8004408 <xTaskIncrementTick+0x14c>)
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4a3e      	ldr	r2, [pc, #248]	; (800440c <xTaskIncrementTick+0x150>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <xTaskIncrementTick+0x154>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <xTaskIncrementTick+0x154>)
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	f000 f995 	bl	8004650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004326:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <xTaskIncrementTick+0x158>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	429a      	cmp	r2, r3
 800432e:	d348      	bcc.n	80043c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <xTaskIncrementTick+0x14c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <xTaskIncrementTick+0x158>)
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	601a      	str	r2, [r3, #0]
					break;
 8004342:	e03e      	b.n	80043c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004344:	4b30      	ldr	r3, [pc, #192]	; (8004408 <xTaskIncrementTick+0x14c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d203      	bcs.n	8004364 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800435c:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <xTaskIncrementTick+0x158>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004362:	e02e      	b.n	80043c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3304      	adds	r3, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fcac 	bl	8003cc6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3318      	adds	r3, #24
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fca3 	bl	8003cc6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	2201      	movs	r2, #1
 8004386:	409a      	lsls	r2, r3
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <xTaskIncrementTick+0x15c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4313      	orrs	r3, r2
 800438e:	4a22      	ldr	r2, [pc, #136]	; (8004418 <xTaskIncrementTick+0x15c>)
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4a1f      	ldr	r2, [pc, #124]	; (800441c <xTaskIncrementTick+0x160>)
 80043a0:	441a      	add	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7ff fc2f 	bl	8003c0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <xTaskIncrementTick+0x164>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3b9      	bcc.n	8004330 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043c0:	e7b6      	b.n	8004330 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043c2:	4b17      	ldr	r3, [pc, #92]	; (8004420 <xTaskIncrementTick+0x164>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	4914      	ldr	r1, [pc, #80]	; (800441c <xTaskIncrementTick+0x160>)
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d901      	bls.n	80043de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80043da:	2301      	movs	r3, #1
 80043dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <xTaskIncrementTick+0x168>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80043e6:	2301      	movs	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e004      	b.n	80043f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <xTaskIncrementTick+0x16c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <xTaskIncrementTick+0x16c>)
 80043f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043f6:	697b      	ldr	r3, [r7, #20]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000570 	.word	0x20000570
 8004404:	2000054c 	.word	0x2000054c
 8004408:	20000500 	.word	0x20000500
 800440c:	20000504 	.word	0x20000504
 8004410:	20000560 	.word	0x20000560
 8004414:	20000568 	.word	0x20000568
 8004418:	20000550 	.word	0x20000550
 800441c:	2000044c 	.word	0x2000044c
 8004420:	20000448 	.word	0x20000448
 8004424:	2000055c 	.word	0x2000055c
 8004428:	20000558 	.word	0x20000558

0800442c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004432:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <vTaskSwitchContext+0xa4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <vTaskSwitchContext+0xa8>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004440:	e03f      	b.n	80044c2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004442:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <vTaskSwitchContext+0xa8>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004448:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <vTaskSwitchContext+0xac>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	fab3 f383 	clz	r3, r3
 8004454:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	f1c3 031f 	rsb	r3, r3, #31
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	491f      	ldr	r1, [pc, #124]	; (80044dc <vTaskSwitchContext+0xb0>)
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	607b      	str	r3, [r7, #4]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <vTaskSwitchContext+0x5a>
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a12      	ldr	r2, [pc, #72]	; (80044dc <vTaskSwitchContext+0xb0>)
 8004494:	4413      	add	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3308      	adds	r3, #8
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d104      	bne.n	80044b8 <vTaskSwitchContext+0x8c>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <vTaskSwitchContext+0xb4>)
 80044c0:	6013      	str	r3, [r2, #0]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000570 	.word	0x20000570
 80044d4:	2000055c 	.word	0x2000055c
 80044d8:	20000550 	.word	0x20000550
 80044dc:	2000044c 	.word	0x2000044c
 80044e0:	20000448 	.word	0x20000448

080044e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044ec:	f000 f852 	bl	8004594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <prvIdleTask+0x28>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d9f9      	bls.n	80044ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <prvIdleTask+0x2c>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004508:	e7f0      	b.n	80044ec <prvIdleTask+0x8>
 800450a:	bf00      	nop
 800450c:	2000044c 	.word	0x2000044c
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	e00c      	b.n	800453a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4a12      	ldr	r2, [pc, #72]	; (8004574 <prvInitialiseTaskLists+0x60>)
 800452c:	4413      	add	r3, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fb3f 	bl	8003bb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3301      	adds	r3, #1
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b06      	cmp	r3, #6
 800453e:	d9ef      	bls.n	8004520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004540:	480d      	ldr	r0, [pc, #52]	; (8004578 <prvInitialiseTaskLists+0x64>)
 8004542:	f7ff fb36 	bl	8003bb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004546:	480d      	ldr	r0, [pc, #52]	; (800457c <prvInitialiseTaskLists+0x68>)
 8004548:	f7ff fb33 	bl	8003bb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800454c:	480c      	ldr	r0, [pc, #48]	; (8004580 <prvInitialiseTaskLists+0x6c>)
 800454e:	f7ff fb30 	bl	8003bb2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004552:	480c      	ldr	r0, [pc, #48]	; (8004584 <prvInitialiseTaskLists+0x70>)
 8004554:	f7ff fb2d 	bl	8003bb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004558:	480b      	ldr	r0, [pc, #44]	; (8004588 <prvInitialiseTaskLists+0x74>)
 800455a:	f7ff fb2a 	bl	8003bb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <prvInitialiseTaskLists+0x78>)
 8004560:	4a05      	ldr	r2, [pc, #20]	; (8004578 <prvInitialiseTaskLists+0x64>)
 8004562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <prvInitialiseTaskLists+0x7c>)
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <prvInitialiseTaskLists+0x68>)
 8004568:	601a      	str	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2000044c 	.word	0x2000044c
 8004578:	200004d8 	.word	0x200004d8
 800457c:	200004ec 	.word	0x200004ec
 8004580:	20000508 	.word	0x20000508
 8004584:	2000051c 	.word	0x2000051c
 8004588:	20000534 	.word	0x20000534
 800458c:	20000500 	.word	0x20000500
 8004590:	20000504 	.word	0x20000504

08004594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800459a:	e019      	b.n	80045d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800459c:	f000 fa0a 	bl	80049b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <prvCheckTasksWaitingTermination+0x50>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fb8a 	bl	8003cc6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <prvCheckTasksWaitingTermination+0x54>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <prvCheckTasksWaitingTermination+0x54>)
 80045ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <prvCheckTasksWaitingTermination+0x58>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <prvCheckTasksWaitingTermination+0x58>)
 80045c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045c6:	f000 fa25 	bl	8004a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f810 	bl	80045f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <prvCheckTasksWaitingTermination+0x58>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e1      	bne.n	800459c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	2000051c 	.word	0x2000051c
 80045e8:	20000548 	.word	0x20000548
 80045ec:	20000530 	.word	0x20000530

080045f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d108      	bne.n	8004614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb82 	bl	8004d10 <vPortFree>
				vPortFree( pxTCB );
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fb7f 	bl	8004d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004612:	e018      	b.n	8004646 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461a:	2b01      	cmp	r3, #1
 800461c:	d103      	bne.n	8004626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fb76 	bl	8004d10 <vPortFree>
	}
 8004624:	e00f      	b.n	8004646 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800462c:	2b02      	cmp	r3, #2
 800462e:	d00a      	beq.n	8004646 <prvDeleteTCB+0x56>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	60fb      	str	r3, [r7, #12]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <prvDeleteTCB+0x54>
	}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004656:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <prvResetNextTaskUnblockTime+0x38>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <prvResetNextTaskUnblockTime+0x3c>)
 8004662:	f04f 32ff 	mov.w	r2, #4294967295
 8004666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004668:	e008      	b.n	800467c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <prvResetNextTaskUnblockTime+0x38>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <prvResetNextTaskUnblockTime+0x3c>)
 800467a:	6013      	str	r3, [r2, #0]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	20000500 	.word	0x20000500
 800468c:	20000568 	.word	0x20000568

08004690 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800469a:	4b29      	ldr	r3, [pc, #164]	; (8004740 <prvAddCurrentTaskToDelayedList+0xb0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fb0d 	bl	8003cc6 <uxListRemove>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	2201      	movs	r2, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43da      	mvns	r2, r3
 80046c0:	4b21      	ldr	r3, [pc, #132]	; (8004748 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4013      	ands	r3, r2
 80046c6:	4a20      	ldr	r2, [pc, #128]	; (8004748 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d10a      	bne.n	80046e8 <prvAddCurrentTaskToDelayedList+0x58>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d8:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	481a      	ldr	r0, [pc, #104]	; (800474c <prvAddCurrentTaskToDelayedList+0xbc>)
 80046e2:	f7ff fa93 	bl	8003c0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046e6:	e026      	b.n	8004736 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046f0:	4b14      	ldr	r3, [pc, #80]	; (8004744 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d209      	bcs.n	8004714 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004700:	4b13      	ldr	r3, [pc, #76]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7ff faa1 	bl	8003c54 <vListInsert>
}
 8004712:	e010      	b.n	8004736 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <prvAddCurrentTaskToDelayedList+0xb4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3304      	adds	r3, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f7ff fa97 	bl	8003c54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	d202      	bcs.n	8004736 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004730:	4a09      	ldr	r2, [pc, #36]	; (8004758 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6013      	str	r3, [r2, #0]
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000054c 	.word	0x2000054c
 8004744:	20000448 	.word	0x20000448
 8004748:	20000550 	.word	0x20000550
 800474c:	20000534 	.word	0x20000534
 8004750:	20000504 	.word	0x20000504
 8004754:	20000500 	.word	0x20000500
 8004758:	20000568 	.word	0x20000568

0800475c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b04      	subs	r3, #4
 800476c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b04      	subs	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3b04      	subs	r3, #4
 800478a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800478c:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <pxPortInitialiseStack+0x64>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3b14      	subs	r3, #20
 8004796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3b04      	subs	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f06f 0202 	mvn.w	r2, #2
 80047aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b20      	subs	r3, #32
 80047b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047b2:	68fb      	ldr	r3, [r7, #12]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	080047c5 	.word	0x080047c5

080047c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <prvTaskExitError+0x54>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d00a      	beq.n	80047ee <prvTaskExitError+0x2a>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <prvTaskExitError+0x28>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60bb      	str	r3, [r7, #8]
}
 8004800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004802:	bf00      	nop
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0fc      	beq.n	8004804 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	2000000c 	.word	0x2000000c
 800481c:	00000000 	.word	0x00000000

08004820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <pxCurrentTCBConst2>)
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	6808      	ldr	r0, [r1, #0]
 8004826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	f380 8809 	msr	PSP, r0
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f380 8811 	msr	BASEPRI, r0
 800483a:	4770      	bx	lr
 800483c:	f3af 8000 	nop.w

08004840 <pxCurrentTCBConst2>:
 8004840:	20000448 	.word	0x20000448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop

08004848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004848:	4808      	ldr	r0, [pc, #32]	; (800486c <prvPortStartFirstTask+0x24>)
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f380 8808 	msr	MSP, r0
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8814 	msr	CONTROL, r0
 800485a:	b662      	cpsie	i
 800485c:	b661      	cpsie	f
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	df00      	svc	0
 8004868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800486a:	bf00      	nop
 800486c:	e000ed08 	.word	0xe000ed08

08004870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <xPortStartScheduler+0x120>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a46      	ldr	r2, [pc, #280]	; (8004994 <xPortStartScheduler+0x124>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10a      	bne.n	8004896 <xPortStartScheduler+0x26>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	613b      	str	r3, [r7, #16]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004896:	4b3e      	ldr	r3, [pc, #248]	; (8004990 <xPortStartScheduler+0x120>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <xPortStartScheduler+0x128>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10a      	bne.n	80048b6 <xPortStartScheduler+0x46>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	60fb      	str	r3, [r7, #12]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048b6:	4b39      	ldr	r3, [pc, #228]	; (800499c <xPortStartScheduler+0x12c>)
 80048b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	22ff      	movs	r2, #255	; 0xff
 80048c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <xPortStartScheduler+0x130>)
 80048dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <xPortStartScheduler+0x134>)
 80048e0:	2207      	movs	r2, #7
 80048e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048e4:	e009      	b.n	80048fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80048e6:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <xPortStartScheduler+0x134>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <xPortStartScheduler+0x134>)
 80048ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d0ef      	beq.n	80048e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004906:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <xPortStartScheduler+0x134>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1c3 0307 	rsb	r3, r3, #7
 800490e:	2b04      	cmp	r3, #4
 8004910:	d00a      	beq.n	8004928 <xPortStartScheduler+0xb8>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004928:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <xPortStartScheduler+0x134>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <xPortStartScheduler+0x134>)
 8004930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <xPortStartScheduler+0x134>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800493a:	4a1a      	ldr	r2, [pc, #104]	; (80049a4 <xPortStartScheduler+0x134>)
 800493c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <xPortStartScheduler+0x138>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <xPortStartScheduler+0x138>)
 800494c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <xPortStartScheduler+0x138>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <xPortStartScheduler+0x138>)
 8004958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800495c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800495e:	f000 f8dd 	bl	8004b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <xPortStartScheduler+0x13c>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004968:	f000 f8fc 	bl	8004b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <xPortStartScheduler+0x140>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <xPortStartScheduler+0x140>)
 8004972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004978:	f7ff ff66 	bl	8004848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800497c:	f7ff fd56 	bl	800442c <vTaskSwitchContext>
	prvTaskExitError();
 8004980:	f7ff ff20 	bl	80047c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00
 8004994:	410fc271 	.word	0x410fc271
 8004998:	410fc270 	.word	0x410fc270
 800499c:	e000e400 	.word	0xe000e400
 80049a0:	20000574 	.word	0x20000574
 80049a4:	20000578 	.word	0x20000578
 80049a8:	e000ed20 	.word	0xe000ed20
 80049ac:	2000000c 	.word	0x2000000c
 80049b0:	e000ef34 	.word	0xe000ef34

080049b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	607b      	str	r3, [r7, #4]
}
 80049cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <vPortEnterCritical+0x58>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <vPortEnterCritical+0x58>)
 80049d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <vPortEnterCritical+0x58>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d10f      	bne.n	8004a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <vPortEnterCritical+0x5c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	603b      	str	r3, [r7, #0]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <vPortEnterCritical+0x4a>
	}
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	2000000c 	.word	0x2000000c
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <vPortExitCritical+0x50>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <vPortExitCritical+0x24>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	607b      	str	r3, [r7, #4]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <vPortExitCritical+0x50>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <vPortExitCritical+0x50>)
 8004a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <vPortExitCritical+0x50>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d105      	bne.n	8004a56 <vPortExitCritical+0x42>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c
	...

08004a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a70:	f3ef 8009 	mrs	r0, PSP
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <pxCurrentTCBConst>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f01e 0f10 	tst.w	lr, #16
 8004a80:	bf08      	it	eq
 8004a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a94:	f380 8811 	msr	BASEPRI, r0
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f7ff fcc4 	bl	800442c <vTaskSwitchContext>
 8004aa4:	f04f 0000 	mov.w	r0, #0
 8004aa8:	f380 8811 	msr	BASEPRI, r0
 8004aac:	bc09      	pop	{r0, r3}
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	6808      	ldr	r0, [r1, #0]
 8004ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab6:	f01e 0f10 	tst.w	lr, #16
 8004aba:	bf08      	it	eq
 8004abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ac0:	f380 8809 	msr	PSP, r0
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst>:
 8004ad0:	20000448 	.word	0x20000448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	607b      	str	r3, [r7, #4]
}
 8004af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004af2:	f7ff fbe3 	bl	80042bc <xTaskIncrementTick>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <SysTick_Handler+0x40>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	2300      	movs	r3, #0
 8004b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f383 8811 	msr	BASEPRI, r3
}
 8004b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <vPortSetupTimerInterrupt+0x34>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <vPortSetupTimerInterrupt+0x38>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <vPortSetupTimerInterrupt+0x3c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <vPortSetupTimerInterrupt+0x40>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <vPortSetupTimerInterrupt+0x44>)
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b3e:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <vPortSetupTimerInterrupt+0x34>)
 8004b40:	2207      	movs	r2, #7
 8004b42:	601a      	str	r2, [r3, #0]
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	e000e010 	.word	0xe000e010
 8004b54:	e000e018 	.word	0xe000e018
 8004b58:	20000000 	.word	0x20000000
 8004b5c:	10624dd3 	.word	0x10624dd3
 8004b60:	e000e014 	.word	0xe000e014

08004b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b74 <vPortEnableVFP+0x10>
 8004b68:	6801      	ldr	r1, [r0, #0]
 8004b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b6e:	6001      	str	r1, [r0, #0]
 8004b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b72:	bf00      	nop
 8004b74:	e000ed88 	.word	0xe000ed88

08004b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b84:	f7ff faf0 	bl	8004168 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b88:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <pvPortMalloc+0x180>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b90:	f000 f920 	bl	8004dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b94:	4b59      	ldr	r3, [pc, #356]	; (8004cfc <pvPortMalloc+0x184>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 8093 	bne.w	8004cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01d      	beq.n	8004be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ba8:	2208      	movs	r2, #8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d014      	beq.n	8004be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f023 0307 	bic.w	r3, r3, #7
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <pvPortMalloc+0x6c>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	617b      	str	r3, [r7, #20]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d06e      	beq.n	8004cc8 <pvPortMalloc+0x150>
 8004bea:	4b45      	ldr	r3, [pc, #276]	; (8004d00 <pvPortMalloc+0x188>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d869      	bhi.n	8004cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004bf4:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <pvPortMalloc+0x18c>)
 8004bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bf8:	4b42      	ldr	r3, [pc, #264]	; (8004d04 <pvPortMalloc+0x18c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bfe:	e004      	b.n	8004c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d903      	bls.n	8004c1c <pvPortMalloc+0xa4>
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f1      	bne.n	8004c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <pvPortMalloc+0x180>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d050      	beq.n	8004cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	4413      	add	r3, r2
 8004c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	1ad2      	subs	r2, r2, r3
 8004c40:	2308      	movs	r3, #8
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d91f      	bls.n	8004c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <pvPortMalloc+0xf8>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	613b      	str	r3, [r7, #16]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1ad2      	subs	r2, r2, r3
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c82:	69b8      	ldr	r0, [r7, #24]
 8004c84:	f000 f908 	bl	8004e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <pvPortMalloc+0x188>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <pvPortMalloc+0x188>)
 8004c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <pvPortMalloc+0x188>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <pvPortMalloc+0x190>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d203      	bcs.n	8004caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <pvPortMalloc+0x188>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <pvPortMalloc+0x190>)
 8004ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <pvPortMalloc+0x184>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cbe:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <pvPortMalloc+0x194>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <pvPortMalloc+0x194>)
 8004cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cc8:	f7ff fa5c 	bl	8004184 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <pvPortMalloc+0x174>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60fb      	str	r3, [r7, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <pvPortMalloc+0x172>
	return pvReturn;
 8004cec:	69fb      	ldr	r3, [r7, #28]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3728      	adds	r7, #40	; 0x28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	2000113c 	.word	0x2000113c
 8004cfc:	20001150 	.word	0x20001150
 8004d00:	20001140 	.word	0x20001140
 8004d04:	20001134 	.word	0x20001134
 8004d08:	20001144 	.word	0x20001144
 8004d0c:	20001148 	.word	0x20001148

08004d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d04d      	beq.n	8004dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d22:	2308      	movs	r3, #8
 8004d24:	425b      	negs	r3, r3
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4413      	add	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <vPortFree+0xb8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <vPortFree+0x44>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60fb      	str	r3, [r7, #12]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <vPortFree+0x62>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	60bb      	str	r3, [r7, #8]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <vPortFree+0xb8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01e      	beq.n	8004dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11a      	bne.n	8004dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <vPortFree+0xb8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	401a      	ands	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d98:	f7ff f9e6 	bl	8004168 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <vPortFree+0xbc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4413      	add	r3, r2
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <vPortFree+0xbc>)
 8004da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004daa:	6938      	ldr	r0, [r7, #16]
 8004dac:	f000 f874 	bl	8004e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <vPortFree+0xc0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	4a06      	ldr	r2, [pc, #24]	; (8004dd0 <vPortFree+0xc0>)
 8004db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dba:	f7ff f9e3 	bl	8004184 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dbe:	bf00      	nop
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20001150 	.word	0x20001150
 8004dcc:	20001140 	.word	0x20001140
 8004dd0:	2000114c 	.word	0x2000114c

08004dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <prvHeapInit+0xac>)
 8004de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00c      	beq.n	8004e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3307      	adds	r3, #7
 8004df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0307 	bic.w	r3, r3, #7
 8004dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <prvHeapInit+0xac>)
 8004e04:	4413      	add	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <prvHeapInit+0xb0>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <prvHeapInit+0xb0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e20:	2208      	movs	r2, #8
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <prvHeapInit+0xb4>)
 8004e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <prvHeapInit+0xb4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <prvHeapInit+0xb4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	1ad2      	subs	r2, r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <prvHeapInit+0xb4>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <prvHeapInit+0xb8>)
 8004e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <prvHeapInit+0xbc>)
 8004e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <prvHeapInit+0xc0>)
 8004e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e72:	601a      	str	r2, [r3, #0]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	2000057c 	.word	0x2000057c
 8004e84:	20001134 	.word	0x20001134
 8004e88:	2000113c 	.word	0x2000113c
 8004e8c:	20001144 	.word	0x20001144
 8004e90:	20001140 	.word	0x20001140
 8004e94:	20001150 	.word	0x20001150

08004e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ea0:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <prvInsertBlockIntoFreeList+0xac>)
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e002      	b.n	8004eac <prvInsertBlockIntoFreeList+0x14>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d8f7      	bhi.n	8004ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d108      	bne.n	8004eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	441a      	add	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d118      	bne.n	8004f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <prvInsertBlockIntoFreeList+0xb0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d00d      	beq.n	8004f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e008      	b.n	8004f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <prvInsertBlockIntoFreeList+0xb0>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e003      	b.n	8004f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d002      	beq.n	8004f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20001134 	.word	0x20001134
 8004f48:	2000113c 	.word	0x2000113c

08004f4c <std>:
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	b510      	push	{r4, lr}
 8004f50:	4604      	mov	r4, r0
 8004f52:	e9c0 3300 	strd	r3, r3, [r0]
 8004f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f5a:	6083      	str	r3, [r0, #8]
 8004f5c:	8181      	strh	r1, [r0, #12]
 8004f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f60:	81c2      	strh	r2, [r0, #14]
 8004f62:	6183      	str	r3, [r0, #24]
 8004f64:	4619      	mov	r1, r3
 8004f66:	2208      	movs	r2, #8
 8004f68:	305c      	adds	r0, #92	; 0x5c
 8004f6a:	f000 fa93 	bl	8005494 <memset>
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <std+0x58>)
 8004f70:	6263      	str	r3, [r4, #36]	; 0x24
 8004f72:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <std+0x5c>)
 8004f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <std+0x60>)
 8004f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <std+0x64>)
 8004f7c:	6323      	str	r3, [r4, #48]	; 0x30
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <std+0x68>)
 8004f80:	6224      	str	r4, [r4, #32]
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d006      	beq.n	8004f94 <std+0x48>
 8004f86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f8a:	4294      	cmp	r4, r2
 8004f8c:	d002      	beq.n	8004f94 <std+0x48>
 8004f8e:	33d0      	adds	r3, #208	; 0xd0
 8004f90:	429c      	cmp	r4, r3
 8004f92:	d105      	bne.n	8004fa0 <std+0x54>
 8004f94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9c:	f000 baf2 	b.w	8005584 <__retarget_lock_init_recursive>
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	bf00      	nop
 8004fa4:	080052e5 	.word	0x080052e5
 8004fa8:	08005307 	.word	0x08005307
 8004fac:	0800533f 	.word	0x0800533f
 8004fb0:	08005363 	.word	0x08005363
 8004fb4:	20001154 	.word	0x20001154

08004fb8 <stdio_exit_handler>:
 8004fb8:	4a02      	ldr	r2, [pc, #8]	; (8004fc4 <stdio_exit_handler+0xc>)
 8004fba:	4903      	ldr	r1, [pc, #12]	; (8004fc8 <stdio_exit_handler+0x10>)
 8004fbc:	4803      	ldr	r0, [pc, #12]	; (8004fcc <stdio_exit_handler+0x14>)
 8004fbe:	f000 b869 	b.w	8005094 <_fwalk_sglue>
 8004fc2:	bf00      	nop
 8004fc4:	20000010 	.word	0x20000010
 8004fc8:	08005899 	.word	0x08005899
 8004fcc:	2000001c 	.word	0x2000001c

08004fd0 <cleanup_stdio>:
 8004fd0:	6841      	ldr	r1, [r0, #4]
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <cleanup_stdio+0x34>)
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	b510      	push	{r4, lr}
 8004fd8:	4604      	mov	r4, r0
 8004fda:	d001      	beq.n	8004fe0 <cleanup_stdio+0x10>
 8004fdc:	f000 fc5c 	bl	8005898 <_fflush_r>
 8004fe0:	68a1      	ldr	r1, [r4, #8]
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <cleanup_stdio+0x38>)
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d002      	beq.n	8004fee <cleanup_stdio+0x1e>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 fc55 	bl	8005898 <_fflush_r>
 8004fee:	68e1      	ldr	r1, [r4, #12]
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <cleanup_stdio+0x3c>)
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	d004      	beq.n	8005000 <cleanup_stdio+0x30>
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffc:	f000 bc4c 	b.w	8005898 <_fflush_r>
 8005000:	bd10      	pop	{r4, pc}
 8005002:	bf00      	nop
 8005004:	20001154 	.word	0x20001154
 8005008:	200011bc 	.word	0x200011bc
 800500c:	20001224 	.word	0x20001224

08005010 <global_stdio_init.part.0>:
 8005010:	b510      	push	{r4, lr}
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <global_stdio_init.part.0+0x30>)
 8005014:	4c0b      	ldr	r4, [pc, #44]	; (8005044 <global_stdio_init.part.0+0x34>)
 8005016:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <global_stdio_init.part.0+0x38>)
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	4620      	mov	r0, r4
 800501c:	2200      	movs	r2, #0
 800501e:	2104      	movs	r1, #4
 8005020:	f7ff ff94 	bl	8004f4c <std>
 8005024:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005028:	2201      	movs	r2, #1
 800502a:	2109      	movs	r1, #9
 800502c:	f7ff ff8e 	bl	8004f4c <std>
 8005030:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005034:	2202      	movs	r2, #2
 8005036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503a:	2112      	movs	r1, #18
 800503c:	f7ff bf86 	b.w	8004f4c <std>
 8005040:	2000128c 	.word	0x2000128c
 8005044:	20001154 	.word	0x20001154
 8005048:	08004fb9 	.word	0x08004fb9

0800504c <__sfp_lock_acquire>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__sfp_lock_acquire+0x8>)
 800504e:	f000 ba9a 	b.w	8005586 <__retarget_lock_acquire_recursive>
 8005052:	bf00      	nop
 8005054:	20001295 	.word	0x20001295

08005058 <__sfp_lock_release>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__sfp_lock_release+0x8>)
 800505a:	f000 ba95 	b.w	8005588 <__retarget_lock_release_recursive>
 800505e:	bf00      	nop
 8005060:	20001295 	.word	0x20001295

08005064 <__sinit>:
 8005064:	b510      	push	{r4, lr}
 8005066:	4604      	mov	r4, r0
 8005068:	f7ff fff0 	bl	800504c <__sfp_lock_acquire>
 800506c:	6a23      	ldr	r3, [r4, #32]
 800506e:	b11b      	cbz	r3, 8005078 <__sinit+0x14>
 8005070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005074:	f7ff bff0 	b.w	8005058 <__sfp_lock_release>
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <__sinit+0x28>)
 800507a:	6223      	str	r3, [r4, #32]
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <__sinit+0x2c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f5      	bne.n	8005070 <__sinit+0xc>
 8005084:	f7ff ffc4 	bl	8005010 <global_stdio_init.part.0>
 8005088:	e7f2      	b.n	8005070 <__sinit+0xc>
 800508a:	bf00      	nop
 800508c:	08004fd1 	.word	0x08004fd1
 8005090:	2000128c 	.word	0x2000128c

08005094 <_fwalk_sglue>:
 8005094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005098:	4607      	mov	r7, r0
 800509a:	4688      	mov	r8, r1
 800509c:	4614      	mov	r4, r2
 800509e:	2600      	movs	r6, #0
 80050a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050a4:	f1b9 0901 	subs.w	r9, r9, #1
 80050a8:	d505      	bpl.n	80050b6 <_fwalk_sglue+0x22>
 80050aa:	6824      	ldr	r4, [r4, #0]
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d1f7      	bne.n	80050a0 <_fwalk_sglue+0xc>
 80050b0:	4630      	mov	r0, r6
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b6:	89ab      	ldrh	r3, [r5, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d907      	bls.n	80050cc <_fwalk_sglue+0x38>
 80050bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050c0:	3301      	adds	r3, #1
 80050c2:	d003      	beq.n	80050cc <_fwalk_sglue+0x38>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c0      	blx	r8
 80050ca:	4306      	orrs	r6, r0
 80050cc:	3568      	adds	r5, #104	; 0x68
 80050ce:	e7e9      	b.n	80050a4 <_fwalk_sglue+0x10>

080050d0 <_puts_r>:
 80050d0:	6a03      	ldr	r3, [r0, #32]
 80050d2:	b570      	push	{r4, r5, r6, lr}
 80050d4:	6884      	ldr	r4, [r0, #8]
 80050d6:	4605      	mov	r5, r0
 80050d8:	460e      	mov	r6, r1
 80050da:	b90b      	cbnz	r3, 80050e0 <_puts_r+0x10>
 80050dc:	f7ff ffc2 	bl	8005064 <__sinit>
 80050e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050e2:	07db      	lsls	r3, r3, #31
 80050e4:	d405      	bmi.n	80050f2 <_puts_r+0x22>
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	0598      	lsls	r0, r3, #22
 80050ea:	d402      	bmi.n	80050f2 <_puts_r+0x22>
 80050ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ee:	f000 fa4a 	bl	8005586 <__retarget_lock_acquire_recursive>
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	0719      	lsls	r1, r3, #28
 80050f6:	d513      	bpl.n	8005120 <_puts_r+0x50>
 80050f8:	6923      	ldr	r3, [r4, #16]
 80050fa:	b18b      	cbz	r3, 8005120 <_puts_r+0x50>
 80050fc:	3e01      	subs	r6, #1
 80050fe:	68a3      	ldr	r3, [r4, #8]
 8005100:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005104:	3b01      	subs	r3, #1
 8005106:	60a3      	str	r3, [r4, #8]
 8005108:	b9e9      	cbnz	r1, 8005146 <_puts_r+0x76>
 800510a:	2b00      	cmp	r3, #0
 800510c:	da2e      	bge.n	800516c <_puts_r+0x9c>
 800510e:	4622      	mov	r2, r4
 8005110:	210a      	movs	r1, #10
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f929 	bl	800536a <__swbuf_r>
 8005118:	3001      	adds	r0, #1
 800511a:	d007      	beq.n	800512c <_puts_r+0x5c>
 800511c:	250a      	movs	r5, #10
 800511e:	e007      	b.n	8005130 <_puts_r+0x60>
 8005120:	4621      	mov	r1, r4
 8005122:	4628      	mov	r0, r5
 8005124:	f000 f95e 	bl	80053e4 <__swsetup_r>
 8005128:	2800      	cmp	r0, #0
 800512a:	d0e7      	beq.n	80050fc <_puts_r+0x2c>
 800512c:	f04f 35ff 	mov.w	r5, #4294967295
 8005130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005132:	07da      	lsls	r2, r3, #31
 8005134:	d405      	bmi.n	8005142 <_puts_r+0x72>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	059b      	lsls	r3, r3, #22
 800513a:	d402      	bmi.n	8005142 <_puts_r+0x72>
 800513c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513e:	f000 fa23 	bl	8005588 <__retarget_lock_release_recursive>
 8005142:	4628      	mov	r0, r5
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	2b00      	cmp	r3, #0
 8005148:	da04      	bge.n	8005154 <_puts_r+0x84>
 800514a:	69a2      	ldr	r2, [r4, #24]
 800514c:	429a      	cmp	r2, r3
 800514e:	dc06      	bgt.n	800515e <_puts_r+0x8e>
 8005150:	290a      	cmp	r1, #10
 8005152:	d004      	beq.n	800515e <_puts_r+0x8e>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	6022      	str	r2, [r4, #0]
 800515a:	7019      	strb	r1, [r3, #0]
 800515c:	e7cf      	b.n	80050fe <_puts_r+0x2e>
 800515e:	4622      	mov	r2, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f000 f902 	bl	800536a <__swbuf_r>
 8005166:	3001      	adds	r0, #1
 8005168:	d1c9      	bne.n	80050fe <_puts_r+0x2e>
 800516a:	e7df      	b.n	800512c <_puts_r+0x5c>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	250a      	movs	r5, #10
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	6022      	str	r2, [r4, #0]
 8005174:	701d      	strb	r5, [r3, #0]
 8005176:	e7db      	b.n	8005130 <_puts_r+0x60>

08005178 <puts>:
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <puts+0xc>)
 800517a:	4601      	mov	r1, r0
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	f7ff bfa7 	b.w	80050d0 <_puts_r>
 8005182:	bf00      	nop
 8005184:	20000068 	.word	0x20000068

08005188 <setvbuf>:
 8005188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800518c:	461d      	mov	r5, r3
 800518e:	4b54      	ldr	r3, [pc, #336]	; (80052e0 <setvbuf+0x158>)
 8005190:	681f      	ldr	r7, [r3, #0]
 8005192:	4604      	mov	r4, r0
 8005194:	460e      	mov	r6, r1
 8005196:	4690      	mov	r8, r2
 8005198:	b127      	cbz	r7, 80051a4 <setvbuf+0x1c>
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	b913      	cbnz	r3, 80051a4 <setvbuf+0x1c>
 800519e:	4638      	mov	r0, r7
 80051a0:	f7ff ff60 	bl	8005064 <__sinit>
 80051a4:	f1b8 0f02 	cmp.w	r8, #2
 80051a8:	d006      	beq.n	80051b8 <setvbuf+0x30>
 80051aa:	f1b8 0f01 	cmp.w	r8, #1
 80051ae:	f200 8094 	bhi.w	80052da <setvbuf+0x152>
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	f2c0 8091 	blt.w	80052da <setvbuf+0x152>
 80051b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051ba:	07da      	lsls	r2, r3, #31
 80051bc:	d405      	bmi.n	80051ca <setvbuf+0x42>
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	059b      	lsls	r3, r3, #22
 80051c2:	d402      	bmi.n	80051ca <setvbuf+0x42>
 80051c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c6:	f000 f9de 	bl	8005586 <__retarget_lock_acquire_recursive>
 80051ca:	4621      	mov	r1, r4
 80051cc:	4638      	mov	r0, r7
 80051ce:	f000 fb63 	bl	8005898 <_fflush_r>
 80051d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051d4:	b141      	cbz	r1, 80051e8 <setvbuf+0x60>
 80051d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051da:	4299      	cmp	r1, r3
 80051dc:	d002      	beq.n	80051e4 <setvbuf+0x5c>
 80051de:	4638      	mov	r0, r7
 80051e0:	f000 f9d4 	bl	800558c <_free_r>
 80051e4:	2300      	movs	r3, #0
 80051e6:	6363      	str	r3, [r4, #52]	; 0x34
 80051e8:	2300      	movs	r3, #0
 80051ea:	61a3      	str	r3, [r4, #24]
 80051ec:	6063      	str	r3, [r4, #4]
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	0618      	lsls	r0, r3, #24
 80051f2:	d503      	bpl.n	80051fc <setvbuf+0x74>
 80051f4:	6921      	ldr	r1, [r4, #16]
 80051f6:	4638      	mov	r0, r7
 80051f8:	f000 f9c8 	bl	800558c <_free_r>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	f1b8 0f02 	cmp.w	r8, #2
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	d05f      	beq.n	80052ce <setvbuf+0x146>
 800520e:	ab01      	add	r3, sp, #4
 8005210:	466a      	mov	r2, sp
 8005212:	4621      	mov	r1, r4
 8005214:	4638      	mov	r0, r7
 8005216:	f000 fb67 	bl	80058e8 <__swhatbuf_r>
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	4318      	orrs	r0, r3
 800521e:	81a0      	strh	r0, [r4, #12]
 8005220:	bb2d      	cbnz	r5, 800526e <setvbuf+0xe6>
 8005222:	9d00      	ldr	r5, [sp, #0]
 8005224:	4628      	mov	r0, r5
 8005226:	f000 f9fd 	bl	8005624 <malloc>
 800522a:	4606      	mov	r6, r0
 800522c:	2800      	cmp	r0, #0
 800522e:	d150      	bne.n	80052d2 <setvbuf+0x14a>
 8005230:	f8dd 9000 	ldr.w	r9, [sp]
 8005234:	45a9      	cmp	r9, r5
 8005236:	d13e      	bne.n	80052b6 <setvbuf+0x12e>
 8005238:	f04f 35ff 	mov.w	r5, #4294967295
 800523c:	2200      	movs	r2, #0
 800523e:	60a2      	str	r2, [r4, #8]
 8005240:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005244:	6022      	str	r2, [r4, #0]
 8005246:	6122      	str	r2, [r4, #16]
 8005248:	2201      	movs	r2, #1
 800524a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800524e:	6162      	str	r2, [r4, #20]
 8005250:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005252:	f043 0302 	orr.w	r3, r3, #2
 8005256:	07d1      	lsls	r1, r2, #31
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	d404      	bmi.n	8005266 <setvbuf+0xde>
 800525c:	059b      	lsls	r3, r3, #22
 800525e:	d402      	bmi.n	8005266 <setvbuf+0xde>
 8005260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005262:	f000 f991 	bl	8005588 <__retarget_lock_release_recursive>
 8005266:	4628      	mov	r0, r5
 8005268:	b003      	add	sp, #12
 800526a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800526e:	2e00      	cmp	r6, #0
 8005270:	d0d8      	beq.n	8005224 <setvbuf+0x9c>
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	b913      	cbnz	r3, 800527c <setvbuf+0xf4>
 8005276:	4638      	mov	r0, r7
 8005278:	f7ff fef4 	bl	8005064 <__sinit>
 800527c:	f1b8 0f01 	cmp.w	r8, #1
 8005280:	bf08      	it	eq
 8005282:	89a3      	ldrheq	r3, [r4, #12]
 8005284:	6026      	str	r6, [r4, #0]
 8005286:	bf04      	itt	eq
 8005288:	f043 0301 	orreq.w	r3, r3, #1
 800528c:	81a3      	strheq	r3, [r4, #12]
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	f013 0208 	ands.w	r2, r3, #8
 8005294:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005298:	d01d      	beq.n	80052d6 <setvbuf+0x14e>
 800529a:	07da      	lsls	r2, r3, #31
 800529c:	bf41      	itttt	mi
 800529e:	2200      	movmi	r2, #0
 80052a0:	426d      	negmi	r5, r5
 80052a2:	60a2      	strmi	r2, [r4, #8]
 80052a4:	61a5      	strmi	r5, [r4, #24]
 80052a6:	bf58      	it	pl
 80052a8:	60a5      	strpl	r5, [r4, #8]
 80052aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80052ac:	f015 0501 	ands.w	r5, r5, #1
 80052b0:	d0d4      	beq.n	800525c <setvbuf+0xd4>
 80052b2:	2500      	movs	r5, #0
 80052b4:	e7d7      	b.n	8005266 <setvbuf+0xde>
 80052b6:	4648      	mov	r0, r9
 80052b8:	f000 f9b4 	bl	8005624 <malloc>
 80052bc:	4606      	mov	r6, r0
 80052be:	2800      	cmp	r0, #0
 80052c0:	d0ba      	beq.n	8005238 <setvbuf+0xb0>
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	464d      	mov	r5, r9
 80052cc:	e7d1      	b.n	8005272 <setvbuf+0xea>
 80052ce:	2500      	movs	r5, #0
 80052d0:	e7b4      	b.n	800523c <setvbuf+0xb4>
 80052d2:	46a9      	mov	r9, r5
 80052d4:	e7f5      	b.n	80052c2 <setvbuf+0x13a>
 80052d6:	60a2      	str	r2, [r4, #8]
 80052d8:	e7e7      	b.n	80052aa <setvbuf+0x122>
 80052da:	f04f 35ff 	mov.w	r5, #4294967295
 80052de:	e7c2      	b.n	8005266 <setvbuf+0xde>
 80052e0:	20000068 	.word	0x20000068

080052e4 <__sread>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	460c      	mov	r4, r1
 80052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ec:	f000 f8fc 	bl	80054e8 <_read_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	bfab      	itete	ge
 80052f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052f6:	89a3      	ldrhlt	r3, [r4, #12]
 80052f8:	181b      	addge	r3, r3, r0
 80052fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052fe:	bfac      	ite	ge
 8005300:	6563      	strge	r3, [r4, #84]	; 0x54
 8005302:	81a3      	strhlt	r3, [r4, #12]
 8005304:	bd10      	pop	{r4, pc}

08005306 <__swrite>:
 8005306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	461f      	mov	r7, r3
 800530c:	898b      	ldrh	r3, [r1, #12]
 800530e:	05db      	lsls	r3, r3, #23
 8005310:	4605      	mov	r5, r0
 8005312:	460c      	mov	r4, r1
 8005314:	4616      	mov	r6, r2
 8005316:	d505      	bpl.n	8005324 <__swrite+0x1e>
 8005318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531c:	2302      	movs	r3, #2
 800531e:	2200      	movs	r2, #0
 8005320:	f000 f8d0 	bl	80054c4 <_lseek_r>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800532a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	4632      	mov	r2, r6
 8005332:	463b      	mov	r3, r7
 8005334:	4628      	mov	r0, r5
 8005336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800533a:	f000 b8e7 	b.w	800550c <_write_r>

0800533e <__sseek>:
 800533e:	b510      	push	{r4, lr}
 8005340:	460c      	mov	r4, r1
 8005342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005346:	f000 f8bd 	bl	80054c4 <_lseek_r>
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	bf15      	itete	ne
 8005350:	6560      	strne	r0, [r4, #84]	; 0x54
 8005352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800535a:	81a3      	strheq	r3, [r4, #12]
 800535c:	bf18      	it	ne
 800535e:	81a3      	strhne	r3, [r4, #12]
 8005360:	bd10      	pop	{r4, pc}

08005362 <__sclose>:
 8005362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005366:	f000 b89d 	b.w	80054a4 <_close_r>

0800536a <__swbuf_r>:
 800536a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536c:	460e      	mov	r6, r1
 800536e:	4614      	mov	r4, r2
 8005370:	4605      	mov	r5, r0
 8005372:	b118      	cbz	r0, 800537c <__swbuf_r+0x12>
 8005374:	6a03      	ldr	r3, [r0, #32]
 8005376:	b90b      	cbnz	r3, 800537c <__swbuf_r+0x12>
 8005378:	f7ff fe74 	bl	8005064 <__sinit>
 800537c:	69a3      	ldr	r3, [r4, #24]
 800537e:	60a3      	str	r3, [r4, #8]
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	071a      	lsls	r2, r3, #28
 8005384:	d525      	bpl.n	80053d2 <__swbuf_r+0x68>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	b31b      	cbz	r3, 80053d2 <__swbuf_r+0x68>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	6922      	ldr	r2, [r4, #16]
 800538e:	1a98      	subs	r0, r3, r2
 8005390:	6963      	ldr	r3, [r4, #20]
 8005392:	b2f6      	uxtb	r6, r6
 8005394:	4283      	cmp	r3, r0
 8005396:	4637      	mov	r7, r6
 8005398:	dc04      	bgt.n	80053a4 <__swbuf_r+0x3a>
 800539a:	4621      	mov	r1, r4
 800539c:	4628      	mov	r0, r5
 800539e:	f000 fa7b 	bl	8005898 <_fflush_r>
 80053a2:	b9e0      	cbnz	r0, 80053de <__swbuf_r+0x74>
 80053a4:	68a3      	ldr	r3, [r4, #8]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60a3      	str	r3, [r4, #8]
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	701e      	strb	r6, [r3, #0]
 80053b2:	6962      	ldr	r2, [r4, #20]
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d004      	beq.n	80053c4 <__swbuf_r+0x5a>
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	07db      	lsls	r3, r3, #31
 80053be:	d506      	bpl.n	80053ce <__swbuf_r+0x64>
 80053c0:	2e0a      	cmp	r6, #10
 80053c2:	d104      	bne.n	80053ce <__swbuf_r+0x64>
 80053c4:	4621      	mov	r1, r4
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 fa66 	bl	8005898 <_fflush_r>
 80053cc:	b938      	cbnz	r0, 80053de <__swbuf_r+0x74>
 80053ce:	4638      	mov	r0, r7
 80053d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d2:	4621      	mov	r1, r4
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 f805 	bl	80053e4 <__swsetup_r>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d0d5      	beq.n	800538a <__swbuf_r+0x20>
 80053de:	f04f 37ff 	mov.w	r7, #4294967295
 80053e2:	e7f4      	b.n	80053ce <__swbuf_r+0x64>

080053e4 <__swsetup_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4b2a      	ldr	r3, [pc, #168]	; (8005490 <__swsetup_r+0xac>)
 80053e8:	4605      	mov	r5, r0
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	460c      	mov	r4, r1
 80053ee:	b118      	cbz	r0, 80053f8 <__swsetup_r+0x14>
 80053f0:	6a03      	ldr	r3, [r0, #32]
 80053f2:	b90b      	cbnz	r3, 80053f8 <__swsetup_r+0x14>
 80053f4:	f7ff fe36 	bl	8005064 <__sinit>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053fe:	0718      	lsls	r0, r3, #28
 8005400:	d422      	bmi.n	8005448 <__swsetup_r+0x64>
 8005402:	06d9      	lsls	r1, r3, #27
 8005404:	d407      	bmi.n	8005416 <__swsetup_r+0x32>
 8005406:	2309      	movs	r3, #9
 8005408:	602b      	str	r3, [r5, #0]
 800540a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	e034      	b.n	8005480 <__swsetup_r+0x9c>
 8005416:	0758      	lsls	r0, r3, #29
 8005418:	d512      	bpl.n	8005440 <__swsetup_r+0x5c>
 800541a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800541c:	b141      	cbz	r1, 8005430 <__swsetup_r+0x4c>
 800541e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005422:	4299      	cmp	r1, r3
 8005424:	d002      	beq.n	800542c <__swsetup_r+0x48>
 8005426:	4628      	mov	r0, r5
 8005428:	f000 f8b0 	bl	800558c <_free_r>
 800542c:	2300      	movs	r3, #0
 800542e:	6363      	str	r3, [r4, #52]	; 0x34
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005436:	81a3      	strh	r3, [r4, #12]
 8005438:	2300      	movs	r3, #0
 800543a:	6063      	str	r3, [r4, #4]
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	f043 0308 	orr.w	r3, r3, #8
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	6923      	ldr	r3, [r4, #16]
 800544a:	b94b      	cbnz	r3, 8005460 <__swsetup_r+0x7c>
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005456:	d003      	beq.n	8005460 <__swsetup_r+0x7c>
 8005458:	4621      	mov	r1, r4
 800545a:	4628      	mov	r0, r5
 800545c:	f000 fa6a 	bl	8005934 <__smakebuf_r>
 8005460:	89a0      	ldrh	r0, [r4, #12]
 8005462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005466:	f010 0301 	ands.w	r3, r0, #1
 800546a:	d00a      	beq.n	8005482 <__swsetup_r+0x9e>
 800546c:	2300      	movs	r3, #0
 800546e:	60a3      	str	r3, [r4, #8]
 8005470:	6963      	ldr	r3, [r4, #20]
 8005472:	425b      	negs	r3, r3
 8005474:	61a3      	str	r3, [r4, #24]
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	b943      	cbnz	r3, 800548c <__swsetup_r+0xa8>
 800547a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800547e:	d1c4      	bne.n	800540a <__swsetup_r+0x26>
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	0781      	lsls	r1, r0, #30
 8005484:	bf58      	it	pl
 8005486:	6963      	ldrpl	r3, [r4, #20]
 8005488:	60a3      	str	r3, [r4, #8]
 800548a:	e7f4      	b.n	8005476 <__swsetup_r+0x92>
 800548c:	2000      	movs	r0, #0
 800548e:	e7f7      	b.n	8005480 <__swsetup_r+0x9c>
 8005490:	20000068 	.word	0x20000068

08005494 <memset>:
 8005494:	4402      	add	r2, r0
 8005496:	4603      	mov	r3, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	d100      	bne.n	800549e <memset+0xa>
 800549c:	4770      	bx	lr
 800549e:	f803 1b01 	strb.w	r1, [r3], #1
 80054a2:	e7f9      	b.n	8005498 <memset+0x4>

080054a4 <_close_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d06      	ldr	r5, [pc, #24]	; (80054c0 <_close_r+0x1c>)
 80054a8:	2300      	movs	r3, #0
 80054aa:	4604      	mov	r4, r0
 80054ac:	4608      	mov	r0, r1
 80054ae:	602b      	str	r3, [r5, #0]
 80054b0:	f7fc f9b2 	bl	8001818 <_close>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_close_r+0x1a>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_close_r+0x1a>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	20001290 	.word	0x20001290

080054c4 <_lseek_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4d07      	ldr	r5, [pc, #28]	; (80054e4 <_lseek_r+0x20>)
 80054c8:	4604      	mov	r4, r0
 80054ca:	4608      	mov	r0, r1
 80054cc:	4611      	mov	r1, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	602a      	str	r2, [r5, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f7fc f9b7 	bl	8001846 <_lseek>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_lseek_r+0x1e>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_lseek_r+0x1e>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20001290 	.word	0x20001290

080054e8 <_read_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	; (8005508 <_read_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fc f9b6 	bl	8001868 <_read>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_read_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_read_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	20001290 	.word	0x20001290

0800550c <_write_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	; (800552c <_write_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fc f950 	bl	80017c0 <_write>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_write_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_write_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	20001290 	.word	0x20001290

08005530 <__errno>:
 8005530:	4b01      	ldr	r3, [pc, #4]	; (8005538 <__errno+0x8>)
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000068 	.word	0x20000068

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4d0d      	ldr	r5, [pc, #52]	; (8005574 <__libc_init_array+0x38>)
 8005540:	4c0d      	ldr	r4, [pc, #52]	; (8005578 <__libc_init_array+0x3c>)
 8005542:	1b64      	subs	r4, r4, r5
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	2600      	movs	r6, #0
 8005548:	42a6      	cmp	r6, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	4d0b      	ldr	r5, [pc, #44]	; (800557c <__libc_init_array+0x40>)
 800554e:	4c0c      	ldr	r4, [pc, #48]	; (8005580 <__libc_init_array+0x44>)
 8005550:	f000 fa5e 	bl	8005a10 <_init>
 8005554:	1b64      	subs	r4, r4, r5
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	2600      	movs	r6, #0
 800555a:	42a6      	cmp	r6, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f855 3b04 	ldr.w	r3, [r5], #4
 8005564:	4798      	blx	r3
 8005566:	3601      	adds	r6, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f855 3b04 	ldr.w	r3, [r5], #4
 800556e:	4798      	blx	r3
 8005570:	3601      	adds	r6, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	08005ab8 	.word	0x08005ab8
 8005578:	08005ab8 	.word	0x08005ab8
 800557c:	08005ab8 	.word	0x08005ab8
 8005580:	08005abc 	.word	0x08005abc

08005584 <__retarget_lock_init_recursive>:
 8005584:	4770      	bx	lr

08005586 <__retarget_lock_acquire_recursive>:
 8005586:	4770      	bx	lr

08005588 <__retarget_lock_release_recursive>:
 8005588:	4770      	bx	lr
	...

0800558c <_free_r>:
 800558c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800558e:	2900      	cmp	r1, #0
 8005590:	d044      	beq.n	800561c <_free_r+0x90>
 8005592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005596:	9001      	str	r0, [sp, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f1a1 0404 	sub.w	r4, r1, #4
 800559e:	bfb8      	it	lt
 80055a0:	18e4      	addlt	r4, r4, r3
 80055a2:	f000 f8e7 	bl	8005774 <__malloc_lock>
 80055a6:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <_free_r+0x94>)
 80055a8:	9801      	ldr	r0, [sp, #4]
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	b933      	cbnz	r3, 80055bc <_free_r+0x30>
 80055ae:	6063      	str	r3, [r4, #4]
 80055b0:	6014      	str	r4, [r2, #0]
 80055b2:	b003      	add	sp, #12
 80055b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055b8:	f000 b8e2 	b.w	8005780 <__malloc_unlock>
 80055bc:	42a3      	cmp	r3, r4
 80055be:	d908      	bls.n	80055d2 <_free_r+0x46>
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	1961      	adds	r1, r4, r5
 80055c4:	428b      	cmp	r3, r1
 80055c6:	bf01      	itttt	eq
 80055c8:	6819      	ldreq	r1, [r3, #0]
 80055ca:	685b      	ldreq	r3, [r3, #4]
 80055cc:	1949      	addeq	r1, r1, r5
 80055ce:	6021      	streq	r1, [r4, #0]
 80055d0:	e7ed      	b.n	80055ae <_free_r+0x22>
 80055d2:	461a      	mov	r2, r3
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b10b      	cbz	r3, 80055dc <_free_r+0x50>
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d9fa      	bls.n	80055d2 <_free_r+0x46>
 80055dc:	6811      	ldr	r1, [r2, #0]
 80055de:	1855      	adds	r5, r2, r1
 80055e0:	42a5      	cmp	r5, r4
 80055e2:	d10b      	bne.n	80055fc <_free_r+0x70>
 80055e4:	6824      	ldr	r4, [r4, #0]
 80055e6:	4421      	add	r1, r4
 80055e8:	1854      	adds	r4, r2, r1
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	d1e0      	bne.n	80055b2 <_free_r+0x26>
 80055f0:	681c      	ldr	r4, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	6053      	str	r3, [r2, #4]
 80055f6:	440c      	add	r4, r1
 80055f8:	6014      	str	r4, [r2, #0]
 80055fa:	e7da      	b.n	80055b2 <_free_r+0x26>
 80055fc:	d902      	bls.n	8005604 <_free_r+0x78>
 80055fe:	230c      	movs	r3, #12
 8005600:	6003      	str	r3, [r0, #0]
 8005602:	e7d6      	b.n	80055b2 <_free_r+0x26>
 8005604:	6825      	ldr	r5, [r4, #0]
 8005606:	1961      	adds	r1, r4, r5
 8005608:	428b      	cmp	r3, r1
 800560a:	bf04      	itt	eq
 800560c:	6819      	ldreq	r1, [r3, #0]
 800560e:	685b      	ldreq	r3, [r3, #4]
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	bf04      	itt	eq
 8005614:	1949      	addeq	r1, r1, r5
 8005616:	6021      	streq	r1, [r4, #0]
 8005618:	6054      	str	r4, [r2, #4]
 800561a:	e7ca      	b.n	80055b2 <_free_r+0x26>
 800561c:	b003      	add	sp, #12
 800561e:	bd30      	pop	{r4, r5, pc}
 8005620:	20001298 	.word	0x20001298

08005624 <malloc>:
 8005624:	4b02      	ldr	r3, [pc, #8]	; (8005630 <malloc+0xc>)
 8005626:	4601      	mov	r1, r0
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	f000 b823 	b.w	8005674 <_malloc_r>
 800562e:	bf00      	nop
 8005630:	20000068 	.word	0x20000068

08005634 <sbrk_aligned>:
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	4e0e      	ldr	r6, [pc, #56]	; (8005670 <sbrk_aligned+0x3c>)
 8005638:	460c      	mov	r4, r1
 800563a:	6831      	ldr	r1, [r6, #0]
 800563c:	4605      	mov	r5, r0
 800563e:	b911      	cbnz	r1, 8005646 <sbrk_aligned+0x12>
 8005640:	f000 f9d6 	bl	80059f0 <_sbrk_r>
 8005644:	6030      	str	r0, [r6, #0]
 8005646:	4621      	mov	r1, r4
 8005648:	4628      	mov	r0, r5
 800564a:	f000 f9d1 	bl	80059f0 <_sbrk_r>
 800564e:	1c43      	adds	r3, r0, #1
 8005650:	d00a      	beq.n	8005668 <sbrk_aligned+0x34>
 8005652:	1cc4      	adds	r4, r0, #3
 8005654:	f024 0403 	bic.w	r4, r4, #3
 8005658:	42a0      	cmp	r0, r4
 800565a:	d007      	beq.n	800566c <sbrk_aligned+0x38>
 800565c:	1a21      	subs	r1, r4, r0
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f9c6 	bl	80059f0 <_sbrk_r>
 8005664:	3001      	adds	r0, #1
 8005666:	d101      	bne.n	800566c <sbrk_aligned+0x38>
 8005668:	f04f 34ff 	mov.w	r4, #4294967295
 800566c:	4620      	mov	r0, r4
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	2000129c 	.word	0x2000129c

08005674 <_malloc_r>:
 8005674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005678:	1ccd      	adds	r5, r1, #3
 800567a:	f025 0503 	bic.w	r5, r5, #3
 800567e:	3508      	adds	r5, #8
 8005680:	2d0c      	cmp	r5, #12
 8005682:	bf38      	it	cc
 8005684:	250c      	movcc	r5, #12
 8005686:	2d00      	cmp	r5, #0
 8005688:	4607      	mov	r7, r0
 800568a:	db01      	blt.n	8005690 <_malloc_r+0x1c>
 800568c:	42a9      	cmp	r1, r5
 800568e:	d905      	bls.n	800569c <_malloc_r+0x28>
 8005690:	230c      	movs	r3, #12
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	2600      	movs	r6, #0
 8005696:	4630      	mov	r0, r6
 8005698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800569c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005770 <_malloc_r+0xfc>
 80056a0:	f000 f868 	bl	8005774 <__malloc_lock>
 80056a4:	f8d8 3000 	ldr.w	r3, [r8]
 80056a8:	461c      	mov	r4, r3
 80056aa:	bb5c      	cbnz	r4, 8005704 <_malloc_r+0x90>
 80056ac:	4629      	mov	r1, r5
 80056ae:	4638      	mov	r0, r7
 80056b0:	f7ff ffc0 	bl	8005634 <sbrk_aligned>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	4604      	mov	r4, r0
 80056b8:	d155      	bne.n	8005766 <_malloc_r+0xf2>
 80056ba:	f8d8 4000 	ldr.w	r4, [r8]
 80056be:	4626      	mov	r6, r4
 80056c0:	2e00      	cmp	r6, #0
 80056c2:	d145      	bne.n	8005750 <_malloc_r+0xdc>
 80056c4:	2c00      	cmp	r4, #0
 80056c6:	d048      	beq.n	800575a <_malloc_r+0xe6>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	4631      	mov	r1, r6
 80056cc:	4638      	mov	r0, r7
 80056ce:	eb04 0903 	add.w	r9, r4, r3
 80056d2:	f000 f98d 	bl	80059f0 <_sbrk_r>
 80056d6:	4581      	cmp	r9, r0
 80056d8:	d13f      	bne.n	800575a <_malloc_r+0xe6>
 80056da:	6821      	ldr	r1, [r4, #0]
 80056dc:	1a6d      	subs	r5, r5, r1
 80056de:	4629      	mov	r1, r5
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff ffa7 	bl	8005634 <sbrk_aligned>
 80056e6:	3001      	adds	r0, #1
 80056e8:	d037      	beq.n	800575a <_malloc_r+0xe6>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	442b      	add	r3, r5
 80056ee:	6023      	str	r3, [r4, #0]
 80056f0:	f8d8 3000 	ldr.w	r3, [r8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d038      	beq.n	800576a <_malloc_r+0xf6>
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	42a2      	cmp	r2, r4
 80056fc:	d12b      	bne.n	8005756 <_malloc_r+0xe2>
 80056fe:	2200      	movs	r2, #0
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	e00f      	b.n	8005724 <_malloc_r+0xb0>
 8005704:	6822      	ldr	r2, [r4, #0]
 8005706:	1b52      	subs	r2, r2, r5
 8005708:	d41f      	bmi.n	800574a <_malloc_r+0xd6>
 800570a:	2a0b      	cmp	r2, #11
 800570c:	d917      	bls.n	800573e <_malloc_r+0xca>
 800570e:	1961      	adds	r1, r4, r5
 8005710:	42a3      	cmp	r3, r4
 8005712:	6025      	str	r5, [r4, #0]
 8005714:	bf18      	it	ne
 8005716:	6059      	strne	r1, [r3, #4]
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	bf08      	it	eq
 800571c:	f8c8 1000 	streq.w	r1, [r8]
 8005720:	5162      	str	r2, [r4, r5]
 8005722:	604b      	str	r3, [r1, #4]
 8005724:	4638      	mov	r0, r7
 8005726:	f104 060b 	add.w	r6, r4, #11
 800572a:	f000 f829 	bl	8005780 <__malloc_unlock>
 800572e:	f026 0607 	bic.w	r6, r6, #7
 8005732:	1d23      	adds	r3, r4, #4
 8005734:	1af2      	subs	r2, r6, r3
 8005736:	d0ae      	beq.n	8005696 <_malloc_r+0x22>
 8005738:	1b9b      	subs	r3, r3, r6
 800573a:	50a3      	str	r3, [r4, r2]
 800573c:	e7ab      	b.n	8005696 <_malloc_r+0x22>
 800573e:	42a3      	cmp	r3, r4
 8005740:	6862      	ldr	r2, [r4, #4]
 8005742:	d1dd      	bne.n	8005700 <_malloc_r+0x8c>
 8005744:	f8c8 2000 	str.w	r2, [r8]
 8005748:	e7ec      	b.n	8005724 <_malloc_r+0xb0>
 800574a:	4623      	mov	r3, r4
 800574c:	6864      	ldr	r4, [r4, #4]
 800574e:	e7ac      	b.n	80056aa <_malloc_r+0x36>
 8005750:	4634      	mov	r4, r6
 8005752:	6876      	ldr	r6, [r6, #4]
 8005754:	e7b4      	b.n	80056c0 <_malloc_r+0x4c>
 8005756:	4613      	mov	r3, r2
 8005758:	e7cc      	b.n	80056f4 <_malloc_r+0x80>
 800575a:	230c      	movs	r3, #12
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	4638      	mov	r0, r7
 8005760:	f000 f80e 	bl	8005780 <__malloc_unlock>
 8005764:	e797      	b.n	8005696 <_malloc_r+0x22>
 8005766:	6025      	str	r5, [r4, #0]
 8005768:	e7dc      	b.n	8005724 <_malloc_r+0xb0>
 800576a:	605b      	str	r3, [r3, #4]
 800576c:	deff      	udf	#255	; 0xff
 800576e:	bf00      	nop
 8005770:	20001298 	.word	0x20001298

08005774 <__malloc_lock>:
 8005774:	4801      	ldr	r0, [pc, #4]	; (800577c <__malloc_lock+0x8>)
 8005776:	f7ff bf06 	b.w	8005586 <__retarget_lock_acquire_recursive>
 800577a:	bf00      	nop
 800577c:	20001294 	.word	0x20001294

08005780 <__malloc_unlock>:
 8005780:	4801      	ldr	r0, [pc, #4]	; (8005788 <__malloc_unlock+0x8>)
 8005782:	f7ff bf01 	b.w	8005588 <__retarget_lock_release_recursive>
 8005786:	bf00      	nop
 8005788:	20001294 	.word	0x20001294

0800578c <__sflush_r>:
 800578c:	898a      	ldrh	r2, [r1, #12]
 800578e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005792:	4605      	mov	r5, r0
 8005794:	0710      	lsls	r0, r2, #28
 8005796:	460c      	mov	r4, r1
 8005798:	d458      	bmi.n	800584c <__sflush_r+0xc0>
 800579a:	684b      	ldr	r3, [r1, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	dc05      	bgt.n	80057ac <__sflush_r+0x20>
 80057a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	dc02      	bgt.n	80057ac <__sflush_r+0x20>
 80057a6:	2000      	movs	r0, #0
 80057a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ae:	2e00      	cmp	r6, #0
 80057b0:	d0f9      	beq.n	80057a6 <__sflush_r+0x1a>
 80057b2:	2300      	movs	r3, #0
 80057b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057b8:	682f      	ldr	r7, [r5, #0]
 80057ba:	6a21      	ldr	r1, [r4, #32]
 80057bc:	602b      	str	r3, [r5, #0]
 80057be:	d032      	beq.n	8005826 <__sflush_r+0x9a>
 80057c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	075a      	lsls	r2, r3, #29
 80057c6:	d505      	bpl.n	80057d4 <__sflush_r+0x48>
 80057c8:	6863      	ldr	r3, [r4, #4]
 80057ca:	1ac0      	subs	r0, r0, r3
 80057cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057ce:	b10b      	cbz	r3, 80057d4 <__sflush_r+0x48>
 80057d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057d2:	1ac0      	subs	r0, r0, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	4602      	mov	r2, r0
 80057d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057da:	6a21      	ldr	r1, [r4, #32]
 80057dc:	4628      	mov	r0, r5
 80057de:	47b0      	blx	r6
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	d106      	bne.n	80057f4 <__sflush_r+0x68>
 80057e6:	6829      	ldr	r1, [r5, #0]
 80057e8:	291d      	cmp	r1, #29
 80057ea:	d82b      	bhi.n	8005844 <__sflush_r+0xb8>
 80057ec:	4a29      	ldr	r2, [pc, #164]	; (8005894 <__sflush_r+0x108>)
 80057ee:	410a      	asrs	r2, r1
 80057f0:	07d6      	lsls	r6, r2, #31
 80057f2:	d427      	bmi.n	8005844 <__sflush_r+0xb8>
 80057f4:	2200      	movs	r2, #0
 80057f6:	6062      	str	r2, [r4, #4]
 80057f8:	04d9      	lsls	r1, r3, #19
 80057fa:	6922      	ldr	r2, [r4, #16]
 80057fc:	6022      	str	r2, [r4, #0]
 80057fe:	d504      	bpl.n	800580a <__sflush_r+0x7e>
 8005800:	1c42      	adds	r2, r0, #1
 8005802:	d101      	bne.n	8005808 <__sflush_r+0x7c>
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	b903      	cbnz	r3, 800580a <__sflush_r+0x7e>
 8005808:	6560      	str	r0, [r4, #84]	; 0x54
 800580a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800580c:	602f      	str	r7, [r5, #0]
 800580e:	2900      	cmp	r1, #0
 8005810:	d0c9      	beq.n	80057a6 <__sflush_r+0x1a>
 8005812:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005816:	4299      	cmp	r1, r3
 8005818:	d002      	beq.n	8005820 <__sflush_r+0x94>
 800581a:	4628      	mov	r0, r5
 800581c:	f7ff feb6 	bl	800558c <_free_r>
 8005820:	2000      	movs	r0, #0
 8005822:	6360      	str	r0, [r4, #52]	; 0x34
 8005824:	e7c0      	b.n	80057a8 <__sflush_r+0x1c>
 8005826:	2301      	movs	r3, #1
 8005828:	4628      	mov	r0, r5
 800582a:	47b0      	blx	r6
 800582c:	1c41      	adds	r1, r0, #1
 800582e:	d1c8      	bne.n	80057c2 <__sflush_r+0x36>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0c5      	beq.n	80057c2 <__sflush_r+0x36>
 8005836:	2b1d      	cmp	r3, #29
 8005838:	d001      	beq.n	800583e <__sflush_r+0xb2>
 800583a:	2b16      	cmp	r3, #22
 800583c:	d101      	bne.n	8005842 <__sflush_r+0xb6>
 800583e:	602f      	str	r7, [r5, #0]
 8005840:	e7b1      	b.n	80057a6 <__sflush_r+0x1a>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	e7ad      	b.n	80057a8 <__sflush_r+0x1c>
 800584c:	690f      	ldr	r7, [r1, #16]
 800584e:	2f00      	cmp	r7, #0
 8005850:	d0a9      	beq.n	80057a6 <__sflush_r+0x1a>
 8005852:	0793      	lsls	r3, r2, #30
 8005854:	680e      	ldr	r6, [r1, #0]
 8005856:	bf08      	it	eq
 8005858:	694b      	ldreq	r3, [r1, #20]
 800585a:	600f      	str	r7, [r1, #0]
 800585c:	bf18      	it	ne
 800585e:	2300      	movne	r3, #0
 8005860:	eba6 0807 	sub.w	r8, r6, r7
 8005864:	608b      	str	r3, [r1, #8]
 8005866:	f1b8 0f00 	cmp.w	r8, #0
 800586a:	dd9c      	ble.n	80057a6 <__sflush_r+0x1a>
 800586c:	6a21      	ldr	r1, [r4, #32]
 800586e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005870:	4643      	mov	r3, r8
 8005872:	463a      	mov	r2, r7
 8005874:	4628      	mov	r0, r5
 8005876:	47b0      	blx	r6
 8005878:	2800      	cmp	r0, #0
 800587a:	dc06      	bgt.n	800588a <__sflush_r+0xfe>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e78e      	b.n	80057a8 <__sflush_r+0x1c>
 800588a:	4407      	add	r7, r0
 800588c:	eba8 0800 	sub.w	r8, r8, r0
 8005890:	e7e9      	b.n	8005866 <__sflush_r+0xda>
 8005892:	bf00      	nop
 8005894:	dfbffffe 	.word	0xdfbffffe

08005898 <_fflush_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	690b      	ldr	r3, [r1, #16]
 800589c:	4605      	mov	r5, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	b913      	cbnz	r3, 80058a8 <_fflush_r+0x10>
 80058a2:	2500      	movs	r5, #0
 80058a4:	4628      	mov	r0, r5
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	b118      	cbz	r0, 80058b2 <_fflush_r+0x1a>
 80058aa:	6a03      	ldr	r3, [r0, #32]
 80058ac:	b90b      	cbnz	r3, 80058b2 <_fflush_r+0x1a>
 80058ae:	f7ff fbd9 	bl	8005064 <__sinit>
 80058b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f3      	beq.n	80058a2 <_fflush_r+0xa>
 80058ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058bc:	07d0      	lsls	r0, r2, #31
 80058be:	d404      	bmi.n	80058ca <_fflush_r+0x32>
 80058c0:	0599      	lsls	r1, r3, #22
 80058c2:	d402      	bmi.n	80058ca <_fflush_r+0x32>
 80058c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c6:	f7ff fe5e 	bl	8005586 <__retarget_lock_acquire_recursive>
 80058ca:	4628      	mov	r0, r5
 80058cc:	4621      	mov	r1, r4
 80058ce:	f7ff ff5d 	bl	800578c <__sflush_r>
 80058d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058d4:	07da      	lsls	r2, r3, #31
 80058d6:	4605      	mov	r5, r0
 80058d8:	d4e4      	bmi.n	80058a4 <_fflush_r+0xc>
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	059b      	lsls	r3, r3, #22
 80058de:	d4e1      	bmi.n	80058a4 <_fflush_r+0xc>
 80058e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058e2:	f7ff fe51 	bl	8005588 <__retarget_lock_release_recursive>
 80058e6:	e7dd      	b.n	80058a4 <_fflush_r+0xc>

080058e8 <__swhatbuf_r>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	460c      	mov	r4, r1
 80058ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f0:	2900      	cmp	r1, #0
 80058f2:	b096      	sub	sp, #88	; 0x58
 80058f4:	4615      	mov	r5, r2
 80058f6:	461e      	mov	r6, r3
 80058f8:	da0d      	bge.n	8005916 <__swhatbuf_r+0x2e>
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005900:	f04f 0100 	mov.w	r1, #0
 8005904:	bf0c      	ite	eq
 8005906:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800590a:	2340      	movne	r3, #64	; 0x40
 800590c:	2000      	movs	r0, #0
 800590e:	6031      	str	r1, [r6, #0]
 8005910:	602b      	str	r3, [r5, #0]
 8005912:	b016      	add	sp, #88	; 0x58
 8005914:	bd70      	pop	{r4, r5, r6, pc}
 8005916:	466a      	mov	r2, sp
 8005918:	f000 f848 	bl	80059ac <_fstat_r>
 800591c:	2800      	cmp	r0, #0
 800591e:	dbec      	blt.n	80058fa <__swhatbuf_r+0x12>
 8005920:	9901      	ldr	r1, [sp, #4]
 8005922:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005926:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800592a:	4259      	negs	r1, r3
 800592c:	4159      	adcs	r1, r3
 800592e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005932:	e7eb      	b.n	800590c <__swhatbuf_r+0x24>

08005934 <__smakebuf_r>:
 8005934:	898b      	ldrh	r3, [r1, #12]
 8005936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005938:	079d      	lsls	r5, r3, #30
 800593a:	4606      	mov	r6, r0
 800593c:	460c      	mov	r4, r1
 800593e:	d507      	bpl.n	8005950 <__smakebuf_r+0x1c>
 8005940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	2301      	movs	r3, #1
 800594a:	6163      	str	r3, [r4, #20]
 800594c:	b002      	add	sp, #8
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	ab01      	add	r3, sp, #4
 8005952:	466a      	mov	r2, sp
 8005954:	f7ff ffc8 	bl	80058e8 <__swhatbuf_r>
 8005958:	9900      	ldr	r1, [sp, #0]
 800595a:	4605      	mov	r5, r0
 800595c:	4630      	mov	r0, r6
 800595e:	f7ff fe89 	bl	8005674 <_malloc_r>
 8005962:	b948      	cbnz	r0, 8005978 <__smakebuf_r+0x44>
 8005964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005968:	059a      	lsls	r2, r3, #22
 800596a:	d4ef      	bmi.n	800594c <__smakebuf_r+0x18>
 800596c:	f023 0303 	bic.w	r3, r3, #3
 8005970:	f043 0302 	orr.w	r3, r3, #2
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	e7e3      	b.n	8005940 <__smakebuf_r+0xc>
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	6020      	str	r0, [r4, #0]
 800597c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005980:	81a3      	strh	r3, [r4, #12]
 8005982:	9b00      	ldr	r3, [sp, #0]
 8005984:	6163      	str	r3, [r4, #20]
 8005986:	9b01      	ldr	r3, [sp, #4]
 8005988:	6120      	str	r0, [r4, #16]
 800598a:	b15b      	cbz	r3, 80059a4 <__smakebuf_r+0x70>
 800598c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005990:	4630      	mov	r0, r6
 8005992:	f000 f81d 	bl	80059d0 <_isatty_r>
 8005996:	b128      	cbz	r0, 80059a4 <__smakebuf_r+0x70>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	431d      	orrs	r5, r3
 80059a8:	81a5      	strh	r5, [r4, #12]
 80059aa:	e7cf      	b.n	800594c <__smakebuf_r+0x18>

080059ac <_fstat_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d07      	ldr	r5, [pc, #28]	; (80059cc <_fstat_r+0x20>)
 80059b0:	2300      	movs	r3, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	4608      	mov	r0, r1
 80059b6:	4611      	mov	r1, r2
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	f7fb ff7d 	bl	80018b8 <_fstat>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	d102      	bne.n	80059c8 <_fstat_r+0x1c>
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	b103      	cbz	r3, 80059c8 <_fstat_r+0x1c>
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	bd38      	pop	{r3, r4, r5, pc}
 80059ca:	bf00      	nop
 80059cc:	20001290 	.word	0x20001290

080059d0 <_isatty_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	; (80059ec <_isatty_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb feda 	bl	8001794 <_isatty>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_isatty_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_isatty_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	20001290 	.word	0x20001290

080059f0 <_sbrk_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d06      	ldr	r5, [pc, #24]	; (8005a0c <_sbrk_r+0x1c>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f7fc f878 	bl	8001af0 <_sbrk>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_sbrk_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_sbrk_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20001290 	.word	0x20001290

08005a10 <_init>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr

08005a1c <_fini>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr
